// SPDX-License-Identifier: GPL-3.0
/*
    Copyright 2021 0KIMS association.

    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).

    snarkJS is a free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    snarkJS is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
    License for more details.

    You should have received a copy of the GNU General Public License
    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.
*/

pragma solidity >=0.7.0 <0.9.0;

contract Groth16Verifier {
    // Scalar field size
    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    // Base field size
    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

    // Verification Key data
    uint256 constant alphax  = 9269469640536963473747230137990608980384681053820376319681257628160084677216;
    uint256 constant alphay  = 19251363099934670802518365805735741894267603908436504934431990226702955556258;
    uint256 constant betax1  = 6140534389954227841862148535259089546611033071643780653005687309115541045371;
    uint256 constant betax2  = 4802164604599284376475036645218691701372119678092056290137380584920615237101;
    uint256 constant betay1  = 16042337316285158542801159044922498019156305549351529115025792744360858311128;
    uint256 constant betay2  = 14445760723155303878633844007356314048708447487213617946257578125038729373575;
    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 constant deltax1 = 10680404165785030601270039073093596310405567906281849393503167685140107864695;
    uint256 constant deltax2 = 6644967467571731044431911945300040438269478100631136533461815888402785842922;
    uint256 constant deltay1 = 1719464800350520776664060762774225722708860925841026819388162861837677286871;
    uint256 constant deltay2 = 15241978249241789996619654263001520896202177234927568613316590619911669796263;

    
    uint256 constant IC0x = 20978003322952910151119776713622469026031217210619263777996405940612413848050;
    uint256 constant IC0y = 17585635928459350536494863559071758372819484610904244421895184870068187050266;
    
    uint256 constant IC1x = 6886689154706863138674837164664369993431418573282473048631751690146500440958;
    uint256 constant IC1y = 17727762575944326662636595379703841152349499350237084337495675790976271102293;
    
    uint256 constant IC2x = 18115867582033343178065968262592873798669579890347790714023555791333363776618;
    uint256 constant IC2y = 15164723366778591872337330257756622396815564635617062437490711871681124216659;
    
    uint256 constant IC3x = 7542541424281465330740812227629589602195799916688285771517330783980808819732;
    uint256 constant IC3y = 17956259351445952317547174655117111797254110996598459265048592140054846567077;
    
    uint256 constant IC4x = 13318818356840485396073291186971560422338260561531416341941765328408573424014;
    uint256 constant IC4y = 15579155361807614705093920259058398417095006847942586428906689879580122752193;
    
    uint256 constant IC5x = 15478877554845947904177499205993520602584413391908313228250640434351382245518;
    uint256 constant IC5y = 6748372466986364735192370892285920020586142738581132254350622078062029331392;
    
    uint256 constant IC6x = 17967935650483858137165622719081372705010236643189028113722529940169083820668;
    uint256 constant IC6y = 14357874832070582413310277832347804949438481444445968333113049068479116766621;
    
    uint256 constant IC7x = 9586471682961678169024137772274035396546922339961692372404781053843737553320;
    uint256 constant IC7y = 15290548455563946854452348939633357361547200568722693910406734372209547365100;
    
    uint256 constant IC8x = 19690586246303279937067936189734088597887697081907720499137201218838228793785;
    uint256 constant IC8y = 20952217074461977155147978402707046009097139677599570070621181415160714773623;
    
    uint256 constant IC9x = 8693427722848496965597376355764666194690768320773930596386677927419941286821;
    uint256 constant IC9y = 12598348809038960104682091139721759091028805317634664470617929634267110414519;
    
    uint256 constant IC10x = 1418759058586332958609523575678543908885074530630970593874988105006460049118;
    uint256 constant IC10y = 4028586344229046259152165922506381516273920349560526283538337957977182242220;
    
    uint256 constant IC11x = 18590183111790104931759131485634552608482449417014250172033244461677837116750;
    uint256 constant IC11y = 2902671852858331273998783588886159241247013015873649378216377168005650278841;
    
    uint256 constant IC12x = 472659437074320136123752455447116903142211078377257139999681983433094558040;
    uint256 constant IC12y = 15663151850395833753753698877837835921723480479595296999466900740573780360188;
    
    uint256 constant IC13x = 4111675778030816393981468403677122029590693301507262391558596111208095572874;
    uint256 constant IC13y = 4663029703584807173629595072077927207969790973868460669751213007700400788296;
    
    uint256 constant IC14x = 8725856986828770751614959671770477841242696694302728979898018910384385367220;
    uint256 constant IC14y = 7663252784979923730444960134651449589601973059188277909637529319532513600447;
    
    uint256 constant IC15x = 10229677610577459018294206112687947001601428493335217089092195366475144503032;
    uint256 constant IC15y = 11324363676915977753929535130338048329389819912601569865599575313159548787786;
    
    uint256 constant IC16x = 20840608499166042874822561952481831958609833083614124495445106502002183231441;
    uint256 constant IC16y = 12513269216478027598172896183799512525147089016642687820358953566783647833327;
    
    uint256 constant IC17x = 21151522335258481281747072559360624142705488227589308426073794285011552532828;
    uint256 constant IC17y = 984043324099293353450358802532977789835403975357219053425597892307870216302;
    
    uint256 constant IC18x = 13341520598868747570792458905293800674122452367793516484628476684117583015123;
    uint256 constant IC18y = 12656686070516720084104266092463903278386703473400214783191117847411472886999;
    
    uint256 constant IC19x = 16486395402238955843228718877578309079859936470615402739227961377656378637106;
    uint256 constant IC19y = 2954386353044065836517728376540500153332241362339638252313405513499156454184;
    
    uint256 constant IC20x = 17771082391789251959797076753208589565640990258149318692833495953772663661905;
    uint256 constant IC20y = 2330777964552014244925294069441875681867056926204220768136993123917787346171;
    
    uint256 constant IC21x = 9535286501129225152385967437947192904955412126878869441119501495129343126740;
    uint256 constant IC21y = 9275223266609153233394058865654875275811033443808490136656263555040835466376;
    
    uint256 constant IC22x = 12320721885736600680627237420941112783987544720013263627989098994302762484559;
    uint256 constant IC22y = 20961548849167690898876529079452443185595247160664947728450523409471815425317;
    
    uint256 constant IC23x = 14765254514363790750450435846787573333094550055932630671848501117317581873357;
    uint256 constant IC23y = 129345463329347845042647472045218495912741122045089156364119179375667076102;
    
    uint256 constant IC24x = 10610849282196352133914066811161084754632096150362475764082073637202870148050;
    uint256 constant IC24y = 3428055806405725121343505254154240662813778479471293493704488682423857736036;
    
    uint256 constant IC25x = 6343754270545747346946720808448641902037121145411159662884068240193047722962;
    uint256 constant IC25y = 4975242285191104218122261976856993991822540518264437106901341624883870060564;
    
    uint256 constant IC26x = 3578194199492943930110381312258138794530475504182760204915103567062871544850;
    uint256 constant IC26y = 9084582719483527383365721011220887600161632468562116413917875524997356374115;
    
    uint256 constant IC27x = 14951112655490447973042558591990101365889175592744097607945818370724684877731;
    uint256 constant IC27y = 4373773975380392043182945461537787780650381142050016970727259925204026262020;
    
    uint256 constant IC28x = 21671826020889249997905421780449238075736933733639893108349282924802565750649;
    uint256 constant IC28y = 16369490219727257797237324082285630772960709814851647235089885939877550311878;
    
    uint256 constant IC29x = 16323483353137813723978534595391934418956825131246976377798127318317191201641;
    uint256 constant IC29y = 2401281514098205180739167235310741383066715534529231658741327325757817335005;
    
    uint256 constant IC30x = 12206897230010376874671374250869465603232254586298533466053539684105434098340;
    uint256 constant IC30y = 8387069531186558559696532063718729079259988588732089037659498050969385791369;
    
    uint256 constant IC31x = 5028699470673939958768100958053603112795519018737971032044693727701664334995;
    uint256 constant IC31y = 16534793243964968584629783047743292975399962417348898227861618690338583676598;
    
    uint256 constant IC32x = 7955368687534067928562444235651479891731997359569396419118301837081775674224;
    uint256 constant IC32y = 21445836033808647472743526135798682288325722515245894277998506744457644363935;
    
    uint256 constant IC33x = 16024499022070637637238432016538321462060294905859512428125588441011032960852;
    uint256 constant IC33y = 3328822872028802253311996008308621796979944371199648169457098709890781750521;
    
    uint256 constant IC34x = 16789821836477324640702031813565691763783291218276191086511506552175268325430;
    uint256 constant IC34y = 18653395189319014498083149962047995314124142923528672987211582602003598751003;
    
    uint256 constant IC35x = 852914937148194151734532140787433613612980078881137544848849559245164694456;
    uint256 constant IC35y = 18977016680727180231591034904921670062386943189461617949228458261800035651730;
    
    uint256 constant IC36x = 2173304267587954592995422542663893440481085799740424752991705708998686157122;
    uint256 constant IC36y = 5258650544719465027476443453092558166381766941456038733355618973476001899813;
    
    uint256 constant IC37x = 14380267214370941859839828481982744711468894309297357607349361539620027405688;
    uint256 constant IC37y = 18376520702573285049087113440641065801179855725814173961330980560866885909930;
    
    uint256 constant IC38x = 342851078523873975307909156668748959194131776578608722651291262890263379361;
    uint256 constant IC38y = 17942921563263159194626325250464031323965547257776720931857093838009907415209;
    
    uint256 constant IC39x = 13908591555145528104507967792353472200800026696245307992610770941556238073573;
    uint256 constant IC39y = 12843701972514126063006498018454783476392693655843614200614898977600334090731;
    
    uint256 constant IC40x = 16484950928799282408928746547760304029310247613458716952418204760005190923889;
    uint256 constant IC40y = 10723726472777767397297973258140338929682521951510314311986010690670048337731;
    
    uint256 constant IC41x = 16502418645638304983005461719465650101641611976589120434096136631992919044910;
    uint256 constant IC41y = 13796863280735022899662410570368173058309138646843309240781752481070197043316;
    
    uint256 constant IC42x = 11883622803048026973047753101356754348400710098135050452641397050726673970386;
    uint256 constant IC42y = 5573657391060428346851873649970928968945616731887666227185631825681333322262;
    
    uint256 constant IC43x = 1769204304464877161303355398172219867467905928444447667998202760419160729860;
    uint256 constant IC43y = 4268132005288003008891262867395711723278834059676290595896023711666234765840;
    
    uint256 constant IC44x = 1939478680425925915220763651272775410252463617138584138702974947174888489524;
    uint256 constant IC44y = 17480515556964499828575795921074671087917199512230495390804520464840736693723;
    
    uint256 constant IC45x = 9519593660184355171715660024937974790508967785469395549164609953669159750493;
    uint256 constant IC45y = 5015749731596234493413916655273718246002594388905965949593013451779967401841;
    
    uint256 constant IC46x = 4761994187260746704998056438505073942757674369853675144055901517666711926648;
    uint256 constant IC46y = 17430803096006855005801831773181734425053421593654639653998290221682370934101;
    
    uint256 constant IC47x = 9680643478238530636414691140196302741626668910708990719126515492204840487985;
    uint256 constant IC47y = 21532506534823851639144249203334024735270355157879307437288967356960170977881;
    
    uint256 constant IC48x = 7906773915412830121654256453399820977081213575249222468453633129471307332916;
    uint256 constant IC48y = 16138078113370472505603938092208530628389516739420458921642253162540011897157;
    
    uint256 constant IC49x = 3510356866270419444480466443957672710810140713116548820637892750125355652093;
    uint256 constant IC49y = 13787078308572056180093381137541794168535749365170886624330988229615409509354;
    
    uint256 constant IC50x = 399029167224798328748195592206436943036737037274784277708300724402154038260;
    uint256 constant IC50y = 17524334587120142019897205338187078265973575263970269651982560187052784111798;
    
    uint256 constant IC51x = 2180975890498894478999161742587122990544764885246994514379649160250853874136;
    uint256 constant IC51y = 2884506108700911733583743935471348924388845198088163551477901089774468692147;
    
    uint256 constant IC52x = 7631895671097259843798191811461756643226285918204073311587359148801473501412;
    uint256 constant IC52y = 45545142258984839259588143246323797986892052812612778338246969980552615007;
    
    uint256 constant IC53x = 4297502347377636401108185387429870420332651351198227136494474811800432393845;
    uint256 constant IC53y = 12101679413663212063586834753797011140172804515444605842166392629603143723533;
    
    uint256 constant IC54x = 15632855476868350981191916054985984383911479614937269607530473727833904744069;
    uint256 constant IC54y = 3587283420237001388244106425403534138827707986845619909885539895556400658100;
    
    uint256 constant IC55x = 13276889213371291764896216320283156131780376261408934993360584690333711906900;
    uint256 constant IC55y = 4448573409774298448910092736771104937920278715115010365195547445578613481008;
    
    uint256 constant IC56x = 4199353141772475435388354477238151916164399801137000873108964720115715027564;
    uint256 constant IC56y = 1802554448821182693974003640660649365082823917421394704450769433571214594839;
    
    uint256 constant IC57x = 13599909285838951605620433888245165174283450854797567418479014969409064375397;
    uint256 constant IC57y = 18684435895026215043468178503919061704234922776113245241304617740155321735823;
    
    uint256 constant IC58x = 18626024163611022560729176465660606151623553072888404076501919963503725965101;
    uint256 constant IC58y = 19967725117420299989972733173231851575480164267024814885006179016558321258656;
    
    uint256 constant IC59x = 841119237172861509930898868875060502631611761558419656585917937213763273916;
    uint256 constant IC59y = 6109372648340452518259002107098036938013660699890289039577101730641931125475;
    
    uint256 constant IC60x = 5307489348308807470600153150022619998825050252871663797828589149218284536618;
    uint256 constant IC60y = 20935418319250578251420261516395755965479005136706117600387075585510975188970;
    
    uint256 constant IC61x = 13024941694335246741097584679987440316689563403232776812639202802331064170913;
    uint256 constant IC61y = 3882776716000155251943357462190953563885165045975932422861761605943704821325;
    
    uint256 constant IC62x = 757032359674379220609938978317653241816568147307357753191736530041204406683;
    uint256 constant IC62y = 11199046560467112045957117851572389550923943428452780063788879334933221221362;
    
    uint256 constant IC63x = 9709868407512539313752823777119512660329573645205340243223186279723122919148;
    uint256 constant IC63y = 958412952229849745067802700973707268621755504536844020022418336201767529650;
    
    uint256 constant IC64x = 7938485811745819129550133696331641996624543649956086086598223279020716156940;
    uint256 constant IC64y = 19627472739894655954285637299324580664945847638407533687825450805074257590699;
    
    uint256 constant IC65x = 17965218341969407006977124093308531845510716020763329124259826556360091272459;
    uint256 constant IC65y = 9203363403432107761605933897041960848943037706450458357664002771566397766193;
    
    uint256 constant IC66x = 18618099737532159780603583007346180819416926257360170352508275252501481117442;
    uint256 constant IC66y = 18528704757979186214658009398120550566175219099773208204825201153877208100305;
    
    uint256 constant IC67x = 3620835001081866808803129977943659355182545851976391205127445123951538581380;
    uint256 constant IC67y = 21319801634323600242391314211227419018977097705253909562075744764350533423682;
    
    uint256 constant IC68x = 13786641947973024337722936469438904655025681938838241225981906738578683788480;
    uint256 constant IC68y = 18316724369207404992228424697922825063685556948281430475477807598615098838821;
    
    uint256 constant IC69x = 11672336261728546233483581581123668197453195072732933998195088080167254899;
    uint256 constant IC69y = 10432356946216752295576331161543074596537491367455409858994300183648749758604;
    
    uint256 constant IC70x = 6997690151813370589506098814614097416582642251411271049486628270968215894038;
    uint256 constant IC70y = 7788547857957764933823429220315823561429699360553868825252087824113515297317;
    
    uint256 constant IC71x = 331784368024149830357664552043822634274494485459060222330817419692508877994;
    uint256 constant IC71y = 15153752181896068820680038271702454128455833069238882160361681953588715585659;
    
    uint256 constant IC72x = 4760816257285345784292294781042368773862416639225412458251191399418298583143;
    uint256 constant IC72y = 2644938701629692544541950329519242742282557093999397786960303207426158071971;
    
    uint256 constant IC73x = 4881975889829959717505433112355716454406716655281204355775399138349370655743;
    uint256 constant IC73y = 17713634937497898005268455304344794976513714886510211105802094178050486797612;
    
    uint256 constant IC74x = 9390536135498488350403003927196213060967811398597908219142305906247107415020;
    uint256 constant IC74y = 9581216620819398046993376431912179450345989727276452970251038444585274748765;
    
    uint256 constant IC75x = 16966215057053476248904008187923367677448227366933324118121121746884185109749;
    uint256 constant IC75y = 17564012257829703100830156162287690072415415104724997074859961259684236327425;
    
    uint256 constant IC76x = 12738495478379844049340519659467792669386723059951501762107696002179867586491;
    uint256 constant IC76y = 13901157741716866036245464717266097094155202547585953874290983560550986244589;
    
    uint256 constant IC77x = 19385685413032732858463850944421914864442576481869708911796694268328550584670;
    uint256 constant IC77y = 6484747665397564623106150462467411856237836900645117626539125319565645632273;
    
    uint256 constant IC78x = 16753307256293288050987399423855330736268074972490167367587442618606183103309;
    uint256 constant IC78y = 20479790951361733721403024967025304388087369159570188262744409126847452625956;
    
    uint256 constant IC79x = 2746291365071278219681131174054104968951505368898854627319037529285228272474;
    uint256 constant IC79y = 19087055628448163030379069061564967387805064945047245830138375248380726608771;
    
    uint256 constant IC80x = 18396074979377137631965102332336126320686904669856421417135569476805652611815;
    uint256 constant IC80y = 5621273496260394505939053598919986885308551580948955860373850438395700994289;
    
    uint256 constant IC81x = 10565002603406754738294540731183614930927793514941738359718601583388841098259;
    uint256 constant IC81y = 11944996612817278175178634901650206466986450546402842265662262158129283994696;
    
    uint256 constant IC82x = 6763803837677367508958338089433991711784405594404835329379959924723841593540;
    uint256 constant IC82y = 14630235126694210018996115113076192314726676414059288399528145460541391271756;
    
    uint256 constant IC83x = 16361677227018333360804599090494728691028973677744442967970964538418399148152;
    uint256 constant IC83y = 10338310730858229860701105020543286939156071525676688145197316411968177330805;
    
    uint256 constant IC84x = 21163965806715312307974558134944781291939691279178484243974023107489076078110;
    uint256 constant IC84y = 2340104345729410542935031774015782481888123843843621222707684674969123081577;
    
    uint256 constant IC85x = 21289481396494053754456356004682944935992257537516791173614347775601069029591;
    uint256 constant IC85y = 3665301426941615257259569494028287888615489816513842752651298499629520667158;
    
    uint256 constant IC86x = 2566952263114630357004527197811102210324896817921743416938237562945210176474;
    uint256 constant IC86y = 18428246673245067187722519796430825021082260524431760157158661333666164442982;
    
    uint256 constant IC87x = 1028372178535676080198555030878507484916813588384339955676078505702409635814;
    uint256 constant IC87y = 10550406346308896331912245906598111854937861161859988683425249575522942308108;
    
    uint256 constant IC88x = 9369038972742001552424786430440539159015195063237675751325848348842887216179;
    uint256 constant IC88y = 20368472094256596585941182269433958872209287603302141676396600168771476322714;
    
    uint256 constant IC89x = 3946451953032402314138308589262998560140810116211665444859223385220371546122;
    uint256 constant IC89y = 4030781726119171919016576547918718876948111705902279661598057138776933666748;
    
    uint256 constant IC90x = 10099060045110718589570999744965524328169981033743697547597844291691056003441;
    uint256 constant IC90y = 11390533037735295964908440024337284098082899238528997039302256526302041733498;
    
    uint256 constant IC91x = 6146009661433908115853113647609608703568841198732940671794251178268244645196;
    uint256 constant IC91y = 972946861209138744048125685323907458967637837746388304600486376728301703077;
    
    uint256 constant IC92x = 18113213839390943228641773222236327254387150232649547263588321407728176633887;
    uint256 constant IC92y = 16362781884887278957591000995259926626320731071002630818567911519863361092904;
    
    uint256 constant IC93x = 9524873822017968733392974830233304109705861775437072621853339292343151308396;
    uint256 constant IC93y = 10125483281007165226068231250319699780982395913243698294789632269844526588023;
    
    uint256 constant IC94x = 10757522640973894925974551942869567028431449913130108781413097387526723568100;
    uint256 constant IC94y = 1756425708795351369458449213818019198897208922790825515529099208038555684361;
    
    uint256 constant IC95x = 2417814319743134936254586008044314287734864048945468517950935939638014722176;
    uint256 constant IC95y = 8819049728067808712091496020978387707048663963507694630051053134631360551568;
    
    uint256 constant IC96x = 2335231589367438379863155428419067812973645303802660824124388311071672651552;
    uint256 constant IC96y = 8034586586773661110269493557111569198121145067624454777589148148552519140588;
    
    uint256 constant IC97x = 20718808183990914874253142877701321862031065853090763128696494564560690626588;
    uint256 constant IC97y = 7255775227865871544989638305474532050672909901765076151689570248308546510054;
    
    uint256 constant IC98x = 7512162588068823640529739675057929418355713334892857679060609463437786307460;
    uint256 constant IC98y = 618838828877290974136750100204670708582645505122561318351302281125843898455;
    
    uint256 constant IC99x = 10012709470017405179529480135283795056515038617891490210388870525209655339426;
    uint256 constant IC99y = 16093040785436830337952051155181852653577342068466717668575373228631279612149;
    
    uint256 constant IC100x = 21493682895858581879536071090854634720342115676114041808185311852581926687537;
    uint256 constant IC100y = 7253056055613957785672511880257691628110399468108193902650087885684777586573;
    
    uint256 constant IC101x = 17330161115513157956613430818843489271284139141676445295873103238703616479689;
    uint256 constant IC101y = 19071333524310107373348681486342624707915378351161882617048490800559921947086;
    
    uint256 constant IC102x = 15843447187528884588492858223313219606783131826075248805669837828000824276615;
    uint256 constant IC102y = 20353814267444774012062796260560846889218711637306874649065355074320077217330;
    
    uint256 constant IC103x = 12536945625940590071237989603168133833604022272643175562058849442986136387775;
    uint256 constant IC103y = 3591737674787814465865599976492059330067325234514415168697955174942034590772;
    
    uint256 constant IC104x = 1160140280099908200009798945132890430753981931957335744701550365742369366472;
    uint256 constant IC104y = 4040838605401771062201905346947335424767136206653186237764939374191478189624;
    
    uint256 constant IC105x = 14675054059970798341492453072739978707717842863510620856207869173587710480441;
    uint256 constant IC105y = 2176136498041685746586843674449290272399794141990511126878986324513073359893;
    
    uint256 constant IC106x = 19169623103184801194317792053130563469296928107309888917959330010450345876886;
    uint256 constant IC106y = 16820555535557862854147968591733492727183477525976996759218404660379482668447;
    
    uint256 constant IC107x = 13206379622812938227493130262137132607041886605124763570144938104858587482280;
    uint256 constant IC107y = 19477106163301868362998601480521906364711703932429135420957757646093687583806;
    
    uint256 constant IC108x = 19169188364300390635045260772019602322284132583055661848309436699316458224352;
    uint256 constant IC108y = 4192205207350393749366934109299819308567091823390331343823956013720378783462;
    
    uint256 constant IC109x = 20232201115787703836182439382729452228883134787326424297185082538681269215023;
    uint256 constant IC109y = 17585735035718004255288301936582944075721919090842582831087643921446715949906;
    
    uint256 constant IC110x = 17282152328634559092772774713025454287788455103188447909026620810383270894780;
    uint256 constant IC110y = 17461999472706552724776551491321726487393782056127130371680963756560712177495;
    
    uint256 constant IC111x = 9426668429963326831713883379113774428049050638886767269375177292523309113532;
    uint256 constant IC111y = 21705976065940454486348415834695117049724119563285152661045374015244519658508;
    
    uint256 constant IC112x = 12826370415991078309629693516236443068590997014173085935428251369122848963922;
    uint256 constant IC112y = 4834624031661315560964049274935707479896016036004895020313369602078158926372;
    
    uint256 constant IC113x = 14644164166920143739049767528830833736045205019533343810472953722895292787813;
    uint256 constant IC113y = 5171941128509284710163326113914950203039268177465028669921556645049886241607;
    
    uint256 constant IC114x = 1167726737414692361208615595749474443671148918507021721951287821133694718919;
    uint256 constant IC114y = 601240620844573236035946005773153152146652943529186986336041873160959781160;
    
    uint256 constant IC115x = 2978082280322994143611127864299584920439767622558867964568538378086771377804;
    uint256 constant IC115y = 20352386572374608207000892276907660658244438717221525134852657838393873817990;
    
 
    // Memory data
    uint16 constant pVk = 0;
    uint16 constant pPairing = 128;

    uint16 constant pLastMem = 896;

    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[115] calldata _pubSignals) public view returns (bool) {
        assembly {
            function checkField(v) {
                if iszero(lt(v, q)) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }
            
            // G1 function to multiply a G1 value(x,y) to value in an address
            function g1_mulAccC(pR, x, y, s) {
                let success
                let mIn := mload(0x40)
                mstore(mIn, x)
                mstore(add(mIn, 32), y)
                mstore(add(mIn, 64), s)

                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }

                mstore(add(mIn, 64), mload(pR))
                mstore(add(mIn, 96), mload(add(pR, 32)))

                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)

                if iszero(success) {
                    mstore(0, 0)
                    return(0, 0x20)
                }
            }

            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {
                let _pPairing := add(pMem, pPairing)
                let _pVk := add(pMem, pVk)

                mstore(_pVk, IC0x)
                mstore(add(_pVk, 32), IC0y)

                // Compute the linear combination vk_x
                
                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))
                
                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))
                
                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))
                
                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))
                
                g1_mulAccC(_pVk, IC5x, IC5y, calldataload(add(pubSignals, 128)))
                
                g1_mulAccC(_pVk, IC6x, IC6y, calldataload(add(pubSignals, 160)))
                
                g1_mulAccC(_pVk, IC7x, IC7y, calldataload(add(pubSignals, 192)))
                
                g1_mulAccC(_pVk, IC8x, IC8y, calldataload(add(pubSignals, 224)))
                
                g1_mulAccC(_pVk, IC9x, IC9y, calldataload(add(pubSignals, 256)))
                
                g1_mulAccC(_pVk, IC10x, IC10y, calldataload(add(pubSignals, 288)))
                
                g1_mulAccC(_pVk, IC11x, IC11y, calldataload(add(pubSignals, 320)))
                
                g1_mulAccC(_pVk, IC12x, IC12y, calldataload(add(pubSignals, 352)))
                
                g1_mulAccC(_pVk, IC13x, IC13y, calldataload(add(pubSignals, 384)))
                
                g1_mulAccC(_pVk, IC14x, IC14y, calldataload(add(pubSignals, 416)))
                
                g1_mulAccC(_pVk, IC15x, IC15y, calldataload(add(pubSignals, 448)))
                
                g1_mulAccC(_pVk, IC16x, IC16y, calldataload(add(pubSignals, 480)))
                
                g1_mulAccC(_pVk, IC17x, IC17y, calldataload(add(pubSignals, 512)))
                
                g1_mulAccC(_pVk, IC18x, IC18y, calldataload(add(pubSignals, 544)))
                
                g1_mulAccC(_pVk, IC19x, IC19y, calldataload(add(pubSignals, 576)))
                
                g1_mulAccC(_pVk, IC20x, IC20y, calldataload(add(pubSignals, 608)))
                
                g1_mulAccC(_pVk, IC21x, IC21y, calldataload(add(pubSignals, 640)))
                
                g1_mulAccC(_pVk, IC22x, IC22y, calldataload(add(pubSignals, 672)))
                
                g1_mulAccC(_pVk, IC23x, IC23y, calldataload(add(pubSignals, 704)))
                
                g1_mulAccC(_pVk, IC24x, IC24y, calldataload(add(pubSignals, 736)))
                
                g1_mulAccC(_pVk, IC25x, IC25y, calldataload(add(pubSignals, 768)))
                
                g1_mulAccC(_pVk, IC26x, IC26y, calldataload(add(pubSignals, 800)))
                
                g1_mulAccC(_pVk, IC27x, IC27y, calldataload(add(pubSignals, 832)))
                
                g1_mulAccC(_pVk, IC28x, IC28y, calldataload(add(pubSignals, 864)))
                
                g1_mulAccC(_pVk, IC29x, IC29y, calldataload(add(pubSignals, 896)))
                
                g1_mulAccC(_pVk, IC30x, IC30y, calldataload(add(pubSignals, 928)))
                
                g1_mulAccC(_pVk, IC31x, IC31y, calldataload(add(pubSignals, 960)))
                
                g1_mulAccC(_pVk, IC32x, IC32y, calldataload(add(pubSignals, 992)))
                
                g1_mulAccC(_pVk, IC33x, IC33y, calldataload(add(pubSignals, 1024)))
                
                g1_mulAccC(_pVk, IC34x, IC34y, calldataload(add(pubSignals, 1056)))
                
                g1_mulAccC(_pVk, IC35x, IC35y, calldataload(add(pubSignals, 1088)))
                
                g1_mulAccC(_pVk, IC36x, IC36y, calldataload(add(pubSignals, 1120)))
                
                g1_mulAccC(_pVk, IC37x, IC37y, calldataload(add(pubSignals, 1152)))
                
                g1_mulAccC(_pVk, IC38x, IC38y, calldataload(add(pubSignals, 1184)))
                
                g1_mulAccC(_pVk, IC39x, IC39y, calldataload(add(pubSignals, 1216)))
                
                g1_mulAccC(_pVk, IC40x, IC40y, calldataload(add(pubSignals, 1248)))
                
                g1_mulAccC(_pVk, IC41x, IC41y, calldataload(add(pubSignals, 1280)))
                
                g1_mulAccC(_pVk, IC42x, IC42y, calldataload(add(pubSignals, 1312)))
                
                g1_mulAccC(_pVk, IC43x, IC43y, calldataload(add(pubSignals, 1344)))
                
                g1_mulAccC(_pVk, IC44x, IC44y, calldataload(add(pubSignals, 1376)))
                
                g1_mulAccC(_pVk, IC45x, IC45y, calldataload(add(pubSignals, 1408)))
                
                g1_mulAccC(_pVk, IC46x, IC46y, calldataload(add(pubSignals, 1440)))
                
                g1_mulAccC(_pVk, IC47x, IC47y, calldataload(add(pubSignals, 1472)))
                
                g1_mulAccC(_pVk, IC48x, IC48y, calldataload(add(pubSignals, 1504)))
                
                g1_mulAccC(_pVk, IC49x, IC49y, calldataload(add(pubSignals, 1536)))
                
                g1_mulAccC(_pVk, IC50x, IC50y, calldataload(add(pubSignals, 1568)))
                
                g1_mulAccC(_pVk, IC51x, IC51y, calldataload(add(pubSignals, 1600)))
                
                g1_mulAccC(_pVk, IC52x, IC52y, calldataload(add(pubSignals, 1632)))
                
                g1_mulAccC(_pVk, IC53x, IC53y, calldataload(add(pubSignals, 1664)))
                
                g1_mulAccC(_pVk, IC54x, IC54y, calldataload(add(pubSignals, 1696)))
                
                g1_mulAccC(_pVk, IC55x, IC55y, calldataload(add(pubSignals, 1728)))
                
                g1_mulAccC(_pVk, IC56x, IC56y, calldataload(add(pubSignals, 1760)))
                
                g1_mulAccC(_pVk, IC57x, IC57y, calldataload(add(pubSignals, 1792)))
                
                g1_mulAccC(_pVk, IC58x, IC58y, calldataload(add(pubSignals, 1824)))
                
                g1_mulAccC(_pVk, IC59x, IC59y, calldataload(add(pubSignals, 1856)))
                
                g1_mulAccC(_pVk, IC60x, IC60y, calldataload(add(pubSignals, 1888)))
                
                g1_mulAccC(_pVk, IC61x, IC61y, calldataload(add(pubSignals, 1920)))
                
                g1_mulAccC(_pVk, IC62x, IC62y, calldataload(add(pubSignals, 1952)))
                
                g1_mulAccC(_pVk, IC63x, IC63y, calldataload(add(pubSignals, 1984)))
                
                g1_mulAccC(_pVk, IC64x, IC64y, calldataload(add(pubSignals, 2016)))
                
                g1_mulAccC(_pVk, IC65x, IC65y, calldataload(add(pubSignals, 2048)))
                
                g1_mulAccC(_pVk, IC66x, IC66y, calldataload(add(pubSignals, 2080)))
                
                g1_mulAccC(_pVk, IC67x, IC67y, calldataload(add(pubSignals, 2112)))
                
                g1_mulAccC(_pVk, IC68x, IC68y, calldataload(add(pubSignals, 2144)))
                
                g1_mulAccC(_pVk, IC69x, IC69y, calldataload(add(pubSignals, 2176)))
                
                g1_mulAccC(_pVk, IC70x, IC70y, calldataload(add(pubSignals, 2208)))
                
                g1_mulAccC(_pVk, IC71x, IC71y, calldataload(add(pubSignals, 2240)))
                
                g1_mulAccC(_pVk, IC72x, IC72y, calldataload(add(pubSignals, 2272)))
                
                g1_mulAccC(_pVk, IC73x, IC73y, calldataload(add(pubSignals, 2304)))
                
                g1_mulAccC(_pVk, IC74x, IC74y, calldataload(add(pubSignals, 2336)))
                
                g1_mulAccC(_pVk, IC75x, IC75y, calldataload(add(pubSignals, 2368)))
                
                g1_mulAccC(_pVk, IC76x, IC76y, calldataload(add(pubSignals, 2400)))
                
                g1_mulAccC(_pVk, IC77x, IC77y, calldataload(add(pubSignals, 2432)))
                
                g1_mulAccC(_pVk, IC78x, IC78y, calldataload(add(pubSignals, 2464)))
                
                g1_mulAccC(_pVk, IC79x, IC79y, calldataload(add(pubSignals, 2496)))
                
                g1_mulAccC(_pVk, IC80x, IC80y, calldataload(add(pubSignals, 2528)))
                
                g1_mulAccC(_pVk, IC81x, IC81y, calldataload(add(pubSignals, 2560)))
                
                g1_mulAccC(_pVk, IC82x, IC82y, calldataload(add(pubSignals, 2592)))
                
                g1_mulAccC(_pVk, IC83x, IC83y, calldataload(add(pubSignals, 2624)))
                
                g1_mulAccC(_pVk, IC84x, IC84y, calldataload(add(pubSignals, 2656)))
                
                g1_mulAccC(_pVk, IC85x, IC85y, calldataload(add(pubSignals, 2688)))
                
                g1_mulAccC(_pVk, IC86x, IC86y, calldataload(add(pubSignals, 2720)))
                
                g1_mulAccC(_pVk, IC87x, IC87y, calldataload(add(pubSignals, 2752)))
                
                g1_mulAccC(_pVk, IC88x, IC88y, calldataload(add(pubSignals, 2784)))
                
                g1_mulAccC(_pVk, IC89x, IC89y, calldataload(add(pubSignals, 2816)))
                
                g1_mulAccC(_pVk, IC90x, IC90y, calldataload(add(pubSignals, 2848)))
                
                g1_mulAccC(_pVk, IC91x, IC91y, calldataload(add(pubSignals, 2880)))
                
                g1_mulAccC(_pVk, IC92x, IC92y, calldataload(add(pubSignals, 2912)))
                
                g1_mulAccC(_pVk, IC93x, IC93y, calldataload(add(pubSignals, 2944)))
                
                g1_mulAccC(_pVk, IC94x, IC94y, calldataload(add(pubSignals, 2976)))
                
                g1_mulAccC(_pVk, IC95x, IC95y, calldataload(add(pubSignals, 3008)))
                
                g1_mulAccC(_pVk, IC96x, IC96y, calldataload(add(pubSignals, 3040)))
                
                g1_mulAccC(_pVk, IC97x, IC97y, calldataload(add(pubSignals, 3072)))
                
                g1_mulAccC(_pVk, IC98x, IC98y, calldataload(add(pubSignals, 3104)))
                
                g1_mulAccC(_pVk, IC99x, IC99y, calldataload(add(pubSignals, 3136)))
                
                g1_mulAccC(_pVk, IC100x, IC100y, calldataload(add(pubSignals, 3168)))
                
                g1_mulAccC(_pVk, IC101x, IC101y, calldataload(add(pubSignals, 3200)))
                
                g1_mulAccC(_pVk, IC102x, IC102y, calldataload(add(pubSignals, 3232)))
                
                g1_mulAccC(_pVk, IC103x, IC103y, calldataload(add(pubSignals, 3264)))
                
                g1_mulAccC(_pVk, IC104x, IC104y, calldataload(add(pubSignals, 3296)))
                
                g1_mulAccC(_pVk, IC105x, IC105y, calldataload(add(pubSignals, 3328)))
                
                g1_mulAccC(_pVk, IC106x, IC106y, calldataload(add(pubSignals, 3360)))
                
                g1_mulAccC(_pVk, IC107x, IC107y, calldataload(add(pubSignals, 3392)))
                
                g1_mulAccC(_pVk, IC108x, IC108y, calldataload(add(pubSignals, 3424)))
                
                g1_mulAccC(_pVk, IC109x, IC109y, calldataload(add(pubSignals, 3456)))
                
                g1_mulAccC(_pVk, IC110x, IC110y, calldataload(add(pubSignals, 3488)))
                
                g1_mulAccC(_pVk, IC111x, IC111y, calldataload(add(pubSignals, 3520)))
                
                g1_mulAccC(_pVk, IC112x, IC112y, calldataload(add(pubSignals, 3552)))
                
                g1_mulAccC(_pVk, IC113x, IC113y, calldataload(add(pubSignals, 3584)))
                
                g1_mulAccC(_pVk, IC114x, IC114y, calldataload(add(pubSignals, 3616)))
                
                g1_mulAccC(_pVk, IC115x, IC115y, calldataload(add(pubSignals, 3648)))
                

                // -A
                mstore(_pPairing, calldataload(pA))
                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))

                // B
                mstore(add(_pPairing, 64), calldataload(pB))
                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))
                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))
                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))

                // alpha1
                mstore(add(_pPairing, 192), alphax)
                mstore(add(_pPairing, 224), alphay)

                // beta2
                mstore(add(_pPairing, 256), betax1)
                mstore(add(_pPairing, 288), betax2)
                mstore(add(_pPairing, 320), betay1)
                mstore(add(_pPairing, 352), betay2)

                // vk_x
                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))
                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))


                // gamma2
                mstore(add(_pPairing, 448), gammax1)
                mstore(add(_pPairing, 480), gammax2)
                mstore(add(_pPairing, 512), gammay1)
                mstore(add(_pPairing, 544), gammay2)

                // C
                mstore(add(_pPairing, 576), calldataload(pC))
                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))

                // delta2
                mstore(add(_pPairing, 640), deltax1)
                mstore(add(_pPairing, 672), deltax2)
                mstore(add(_pPairing, 704), deltay1)
                mstore(add(_pPairing, 736), deltay2)


                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)

                isOk := and(success, mload(_pPairing))
            }

            let pMem := mload(0x40)
            mstore(0x40, add(pMem, pLastMem))

            // Validate that all evaluations ∈ F
            
            checkField(calldataload(add(_pubSignals, 0)))
            
            checkField(calldataload(add(_pubSignals, 32)))
            
            checkField(calldataload(add(_pubSignals, 64)))
            
            checkField(calldataload(add(_pubSignals, 96)))
            
            checkField(calldataload(add(_pubSignals, 128)))
            
            checkField(calldataload(add(_pubSignals, 160)))
            
            checkField(calldataload(add(_pubSignals, 192)))
            
            checkField(calldataload(add(_pubSignals, 224)))
            
            checkField(calldataload(add(_pubSignals, 256)))
            
            checkField(calldataload(add(_pubSignals, 288)))
            
            checkField(calldataload(add(_pubSignals, 320)))
            
            checkField(calldataload(add(_pubSignals, 352)))
            
            checkField(calldataload(add(_pubSignals, 384)))
            
            checkField(calldataload(add(_pubSignals, 416)))
            
            checkField(calldataload(add(_pubSignals, 448)))
            
            checkField(calldataload(add(_pubSignals, 480)))
            
            checkField(calldataload(add(_pubSignals, 512)))
            
            checkField(calldataload(add(_pubSignals, 544)))
            
            checkField(calldataload(add(_pubSignals, 576)))
            
            checkField(calldataload(add(_pubSignals, 608)))
            
            checkField(calldataload(add(_pubSignals, 640)))
            
            checkField(calldataload(add(_pubSignals, 672)))
            
            checkField(calldataload(add(_pubSignals, 704)))
            
            checkField(calldataload(add(_pubSignals, 736)))
            
            checkField(calldataload(add(_pubSignals, 768)))
            
            checkField(calldataload(add(_pubSignals, 800)))
            
            checkField(calldataload(add(_pubSignals, 832)))
            
            checkField(calldataload(add(_pubSignals, 864)))
            
            checkField(calldataload(add(_pubSignals, 896)))
            
            checkField(calldataload(add(_pubSignals, 928)))
            
            checkField(calldataload(add(_pubSignals, 960)))
            
            checkField(calldataload(add(_pubSignals, 992)))
            
            checkField(calldataload(add(_pubSignals, 1024)))
            
            checkField(calldataload(add(_pubSignals, 1056)))
            
            checkField(calldataload(add(_pubSignals, 1088)))
            
            checkField(calldataload(add(_pubSignals, 1120)))
            
            checkField(calldataload(add(_pubSignals, 1152)))
            
            checkField(calldataload(add(_pubSignals, 1184)))
            
            checkField(calldataload(add(_pubSignals, 1216)))
            
            checkField(calldataload(add(_pubSignals, 1248)))
            
            checkField(calldataload(add(_pubSignals, 1280)))
            
            checkField(calldataload(add(_pubSignals, 1312)))
            
            checkField(calldataload(add(_pubSignals, 1344)))
            
            checkField(calldataload(add(_pubSignals, 1376)))
            
            checkField(calldataload(add(_pubSignals, 1408)))
            
            checkField(calldataload(add(_pubSignals, 1440)))
            
            checkField(calldataload(add(_pubSignals, 1472)))
            
            checkField(calldataload(add(_pubSignals, 1504)))
            
            checkField(calldataload(add(_pubSignals, 1536)))
            
            checkField(calldataload(add(_pubSignals, 1568)))
            
            checkField(calldataload(add(_pubSignals, 1600)))
            
            checkField(calldataload(add(_pubSignals, 1632)))
            
            checkField(calldataload(add(_pubSignals, 1664)))
            
            checkField(calldataload(add(_pubSignals, 1696)))
            
            checkField(calldataload(add(_pubSignals, 1728)))
            
            checkField(calldataload(add(_pubSignals, 1760)))
            
            checkField(calldataload(add(_pubSignals, 1792)))
            
            checkField(calldataload(add(_pubSignals, 1824)))
            
            checkField(calldataload(add(_pubSignals, 1856)))
            
            checkField(calldataload(add(_pubSignals, 1888)))
            
            checkField(calldataload(add(_pubSignals, 1920)))
            
            checkField(calldataload(add(_pubSignals, 1952)))
            
            checkField(calldataload(add(_pubSignals, 1984)))
            
            checkField(calldataload(add(_pubSignals, 2016)))
            
            checkField(calldataload(add(_pubSignals, 2048)))
            
            checkField(calldataload(add(_pubSignals, 2080)))
            
            checkField(calldataload(add(_pubSignals, 2112)))
            
            checkField(calldataload(add(_pubSignals, 2144)))
            
            checkField(calldataload(add(_pubSignals, 2176)))
            
            checkField(calldataload(add(_pubSignals, 2208)))
            
            checkField(calldataload(add(_pubSignals, 2240)))
            
            checkField(calldataload(add(_pubSignals, 2272)))
            
            checkField(calldataload(add(_pubSignals, 2304)))
            
            checkField(calldataload(add(_pubSignals, 2336)))
            
            checkField(calldataload(add(_pubSignals, 2368)))
            
            checkField(calldataload(add(_pubSignals, 2400)))
            
            checkField(calldataload(add(_pubSignals, 2432)))
            
            checkField(calldataload(add(_pubSignals, 2464)))
            
            checkField(calldataload(add(_pubSignals, 2496)))
            
            checkField(calldataload(add(_pubSignals, 2528)))
            
            checkField(calldataload(add(_pubSignals, 2560)))
            
            checkField(calldataload(add(_pubSignals, 2592)))
            
            checkField(calldataload(add(_pubSignals, 2624)))
            
            checkField(calldataload(add(_pubSignals, 2656)))
            
            checkField(calldataload(add(_pubSignals, 2688)))
            
            checkField(calldataload(add(_pubSignals, 2720)))
            
            checkField(calldataload(add(_pubSignals, 2752)))
            
            checkField(calldataload(add(_pubSignals, 2784)))
            
            checkField(calldataload(add(_pubSignals, 2816)))
            
            checkField(calldataload(add(_pubSignals, 2848)))
            
            checkField(calldataload(add(_pubSignals, 2880)))
            
            checkField(calldataload(add(_pubSignals, 2912)))
            
            checkField(calldataload(add(_pubSignals, 2944)))
            
            checkField(calldataload(add(_pubSignals, 2976)))
            
            checkField(calldataload(add(_pubSignals, 3008)))
            
            checkField(calldataload(add(_pubSignals, 3040)))
            
            checkField(calldataload(add(_pubSignals, 3072)))
            
            checkField(calldataload(add(_pubSignals, 3104)))
            
            checkField(calldataload(add(_pubSignals, 3136)))
            
            checkField(calldataload(add(_pubSignals, 3168)))
            
            checkField(calldataload(add(_pubSignals, 3200)))
            
            checkField(calldataload(add(_pubSignals, 3232)))
            
            checkField(calldataload(add(_pubSignals, 3264)))
            
            checkField(calldataload(add(_pubSignals, 3296)))
            
            checkField(calldataload(add(_pubSignals, 3328)))
            
            checkField(calldataload(add(_pubSignals, 3360)))
            
            checkField(calldataload(add(_pubSignals, 3392)))
            
            checkField(calldataload(add(_pubSignals, 3424)))
            
            checkField(calldataload(add(_pubSignals, 3456)))
            
            checkField(calldataload(add(_pubSignals, 3488)))
            
            checkField(calldataload(add(_pubSignals, 3520)))
            
            checkField(calldataload(add(_pubSignals, 3552)))
            
            checkField(calldataload(add(_pubSignals, 3584)))
            
            checkField(calldataload(add(_pubSignals, 3616)))
            
            checkField(calldataload(add(_pubSignals, 3648)))
            
            checkField(calldataload(add(_pubSignals, 3680)))
            

            // Validate all evaluations
            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)

            mstore(0, isValid)
             return(0, 0x20)
         }
     }
 }