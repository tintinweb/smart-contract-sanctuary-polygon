// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Takuya Mizutani (@Takuya-Mizutani)
 */

pragma solidity ^0.8.6;

import '../packages/graphics/IFontProvider.sol';
import { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';

contract DotGothic16 is IFontProvider, Ownable {
  uint constant fixed_height = 1024;
  uint constant fixed_baseline = 800;

  uint16[0xe0] widths;
  mapping(uint => function() view returns (bytes memory)) fonts;
  address public immutable designer;

  function font_ex() internal pure returns(bytes memory) {
    return "\x4d\x50\xda\xe4\x04\x48\x25\x06\x56\x67\x07\x48\xda\x05\x5a\x4d\x50\xda\x9d\x07\x48\x25\x06\x56\x27\x08\x48\xda\x05\x5a";
  }
  function font_double_quote() internal pure returns(bytes memory) {
    return "\x4d\x50\x9c\xa5\x04\x48\xe5\x05\x56\xad\x05\x48\x9c\x05\x5a\x4d\x60\x1a\xa5\x04\x48\x64\x06\x56\xad\x05\x48\x1a\x06\x5a";
  }
  function font_sharp() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\x67\x07\x48\x1d\x05\x56\x1e\x07\x48\x5d\x05\x56\x9f\x06\x48\x9d\x05\x56\x2b\x06\x48\x5d\x05\x56\xe1\x05\x48\x9d\x05\x56\xe4\x04\x48\xe6\x05\x56\xe1\x05\x48\x5a\x06\x56\xe4\x04\x48\xa4\x06\x56\xe1\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\xaa\x06\x48\x65\x06\x56\x1e\x07\x48\xa4\x06\x56\x67\x07\x48\x65\x06\x56\x27\x08\x48\x1b\x06\x56\x67\x07\x48\xa7\x05\x56\x27\x08\x48\x5d\x05\x5a\x4d\x60\x1b\x1e\x07\x56\x9f\x06\x48\x5a\x06\x56\x2b\x06\x48\xe6\x05\x56\xaa\x06\x48\xa7\x05\x56\x1e\x07\x5a";
  }
  function font_dallar() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x1e\x07\x48\x68\x05\x56\xdb\x07\x48\xdb\x05\x56\x6a\x06\x48\x5d\x05\x56\x2b\x06\x48\x1d\x05\x56\x23\x05\x48\x5d\x05\x56\xe4\x04\x48\xdb\x05\x56\xa5\x04\x48\x26\x06\x56\xe4\x04\x48\xa4\x06\x56\x23\x05\x48\xe3\x06\x56\xad\x05\x48\x9a\x06\x56\x2e\x05\x48\x26\x06\x56\x5f\x06\x48\xa4\x06\x56\x9f\x06\x48\xe3\x06\x56\xe6\x07\x48\xa4\x06\x56\x27\x08\x48\x26\x06\x56\x66\x08\x48\xdb\x05\x56\x27\x08\x48\x5d\x05\x56\xe6\x07\x48\x1d\x05\x5a\x4d\x50\xdb\x21\x06\x56\x2e\x05\x48\x68\x05\x56\x21\x06\x5a\x4d\x60\x9a\xdb\x07\x56\xaa\x06\x48\x26\x06\x56\xdb\x07\x5a";
  }
  function font_percent() internal pure returns(bytes memory) {
    return "\x4d\x50\x02\xdb\x07\x48\x42\x05\x56\x5d\x07\x48\x80\x05\x56\xde\x06\x48\xbc\x05\x56\xaa\x06\x48\x42\x05\x56\x6a\x06\x48\x02\x05\x56\x23\x05\x48\x42\x05\x56\xe4\x04\x48\xc8\x05\x56\x23\x05\x48\x06\x06\x56\x21\x06\x48\x39\x06\x56\xa2\x05\x48\x78\x06\x56\x23\x05\x48\xb4\x06\x56\xe4\x04\x48\xfe\x06\x56\x2e\x05\x48\xbf\x06\x56\xad\x05\x48\x81\x06\x56\x2b\x06\x48\x45\x06\x56\x5f\x06\x48\xbf\x06\x56\x9f\x06\x48\xfe\x06\x56\xe6\x07\x48\xbf\x06\x56\x27\x08\x48\x39\x06\x56\xe6\x07\x48\xfb\x05\x56\xe9\x06\x48\xc8\x05\x56\x67\x07\x48\x89\x05\x56\xe6\x07\x48\x4d\x05\x56\x27\x08\x48\x02\x05\x5a\x4d\x50\xbc\x5f\x06\x56\x2e\x05\x48\x4d\x05\x56\x5f\x06\x5a\x4d\x50\xfb\x9f\x06\x56\x6a\x06\x48\xc8\x05\x56\x9f\x06\x5a\x4d\x60\xb4\xdb\x07\x56\xaa\x06\x48\x45\x06\x56\xdb\x07\x5a";
  }
  function font_and() internal pure returns(bytes memory) {
    return "\x4d\x50\x42\xe6\x07\x48\x02\x05\x56\xde\x06\x48\x42\x05\x56\x9f\x06\x48\x80\x05\x56\x2b\x06\x48\x42\x05\x56\x23\x05\x48\x80\x05\x56\xe4\x04\x48\x81\x06\x56\x23\x05\x48\xbf\x06\x56\xed\x05\x48\x81\x06\x56\x2b\x06\x48\x45\x06\x56\x6a\x06\x48\x06\x06\x56\xde\x06\x48\x45\x06\x56\x1e\x07\x48\x81\x06\x56\x5d\x07\x48\xb4\x06\x56\xde\x06\x48\xfe\x06\x56\x67\x07\x48\xbf\x06\x56\xdb\x07\x48\xfe\x06\x56\x27\x08\x48\xb4\x06\x56\xe6\x07\x48\x81\x06\x56\x27\x08\x48\x42\x05\x5a\x4d\x50\xfb\x5f\x06\x56\x21\x06\x48\x39\x06\x56\xe1\x05\x48\x78\x06\x56\x2e\x05\x48\x89\x05\x56\x21\x06\x48\xc8\x05\x56\x5f\x06\x5a\x4d\x60\x78\xdb\x07\x56\x67\x07\x48\x39\x06\x56\x29\x07\x48\xfb\x05\x56\xe9\x06\x48\xbc\x05\x56\xaa\x06\x48\x89\x05\x56\xe9\x06\x48\x4d\x05\x56\xdb\x07\x5a";
  }
  function font_apostrophe() internal pure returns(bytes memory) {
    return "\x4d\x50\xda\xa5\x04\x48\x25\x06\x56\xad\x05\x48\xda\x05\x5a";
  }
  function font_brackets_left() internal pure returns(bytes memory) {
    return "\x4d\x60\x3d\x67\x07\x48\xfe\x05\x56\xa2\x05\x48\x3d\x06\x56\xe4\x04\x48\x7d\x06\x56\xa5\x04\x48\xc7\x06\x56\xef\x04\x48\x87\x06\x56\xad\x05\x48\x49\x06\x56\x5d\x07\x48\x87\x06\x56\x1b\x08\x48\xc7\x06\x56\x66\x08\x48\x7d\x06\x56\x27\x08\x48\x3d\x06\x5a";
  }
  function font_brackets_right() internal pure returns(bytes memory) {
    return "\x4d\x50\x80\x1b\x08\x56\x5d\x07\x48\xbe\x05\x56\xad\x05\x48\x80\x05\x56\xef\x04\x48\x41\x05\x56\xa5\x04\x48\x8a\x05\x56\xe4\x04\x48\xca\x05\x56\xa2\x05\x48\x09\x06\x56\x67\x07\x48\xca\x05\x56\x27\x08\x48\x8a\x05\x56\x66\x08\x48\x41\x05\x56\x1b\x08\x5a";
  }
  function font_asterisk() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x21\x06\x48\x5d\x05\x56\xe1\x05\x48\x9d\x05\x56\x6e\x05\x48\x5d\x05\x56\x2e\x05\x48\x1d\x05\x56\xe4\x04\x48\x68\x05\x56\x23\x05\x48\xa7\x05\x56\x62\x05\x48\xdb\x05\x56\xe4\x04\x48\x26\x06\x56\x62\x05\x48\x5a\x06\x56\x23\x05\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\x2e\x05\x48\xa4\x06\x56\x6e\x05\x48\x65\x06\x56\xe1\x05\x48\xa4\x06\x56\x21\x06\x48\xe3\x06\x56\x6a\x06\x48\x9a\x06\x56\x2b\x06\x48\x5a\x06\x56\xed\x05\x48\x26\x06\x56\x6a\x06\x48\xdb\x05\x56\xed\x05\x48\xa7\x05\x56\x2b\x06\x48\x68\x05\x56\x6a\x06\x48\x1d\x05\x5a";
  }
  function font_plus() internal pure returns(bytes memory) {
    return "\x4d\x50\xdb\x29\x07\x48\x1d\x05\x56\xde\x06\x48\xdb\x05\x56\xe1\x05\x48\x26\x06\x56\xde\x06\x48\xe3\x06\x56\x29\x07\x48\x26\x06\x56\x27\x08\x48\xdb\x05\x5a";
  }
  function font_comma() internal pure returns(bytes memory) {
    return "\x4d\x50\x80\x1b\x08\x56\xe6\x07\x48\x41\x05\x56\x5d\x07\x48\xca\x05\x56\x27\x08\x48\x8a\x05\x56\x66\x08\x48\x41\x05\x56\x1b\x08\x5a";
  }
  function font_hyphen() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\xde\x06\x48\xc3\x06\x56\x29\x07\x48\x3c\x05\x5a";
  }
  function font_period() internal pure returns(bytes memory) {
    return "\x4d\x50\x41\x5d\x07\x48\xca\x05\x56\xe6\x07\x48\x41\x05\x5a";
  }
  function font_slash() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x9d\x07\x48\x5c\x05\x56\x1e\x07\x48\x9b\x05\x56\x9f\x06\x48\xda\x05\x56\x21\x06\x48\x1a\x06\x56\xa2\x05\x48\x59\x06\x56\x23\x05\x48\x98\x06\x56\xa5\x04\x48\xe2\x06\x56\x2e\x05\x48\xa3\x06\x56\xad\x05\x48\x63\x06\x56\x2b\x06\x48\x25\x06\x56\xaa\x06\x48\xe5\x05\x56\x29\x07\x48\xa6\x05\x56\xa7\x07\x48\x66\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_0() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_1() internal pure returns(bytes memory) {
    return "\x4d\x60\x1a\x2e\x05\x48\x9c\x05\x56\xe4\x04\x48\x64\x06\x56\x27\x08\x48\x1a\x06\x5a";
  }
  function font_2() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x1e\x07\x48\x5d\x05\x56\xde\x06\x48\x9d\x05\x56\x9f\x06\x48\x1b\x06\x56\x5f\x06\x48\x5a\x06\x56\x21\x06\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x2b\x06\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\x6a\x06\x48\x65\x06\x56\xaa\x06\x48\x26\x06\x56\xe9\x06\x48\xa7\x05\x56\x29\x07\x48\x68\x05\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_3() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x1e\x07\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xe9\x06\x48\x5a\x06\x56\xaa\x06\x48\x9d\x05\x56\x5f\x06\x48\x5a\x06\x56\x21\x06\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\xed\x05\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\x6a\x06\x48\x65\x06\x56\x9f\x06\x48\xa4\x06\x56\xde\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_4() internal pure returns(bytes memory) {
    return "\x4d\x50\x02\x5d\x07\x48\x42\x05\x56\x1e\x07\x48\x80\x05\x56\x9f\x06\x48\xbc\x05\x56\x21\x06\x48\xfb\x05\x56\xa2\x05\x48\x39\x06\x56\x23\x05\x48\x78\x06\x56\xe4\x04\x48\xbf\x06\x56\x5d\x07\x48\xfe\x06\x56\xa7\x07\x48\xbf\x06\x56\x27\x08\x48\x78\x06\x56\xa7\x07\x48\x02\x05\x5a\x4d\x60\x78\x5d\x07\x56\xad\x05\x48\x45\x06\x56\x2b\x06\x48\x06\x06\x56\xaa\x06\x48\xc8\x05\x56\x29\x07\x48\x89\x05\x56\x5d\x07\x5a";
  }
  function font_5() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x5d\x07\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xaa\x06\x48\x5a\x06\x56\x6a\x06\x48\xa7\x05\x56\xaa\x06\x48\x68\x05\x56\xe9\x06\x48\x1d\x05\x56\xe4\x04\x48\xa4\x06\x56\x2e\x05\x48\x68\x05\x56\x5f\x06\x48\x9d\x05\x56\x21\x06\x48\x65\x06\x56\x5f\x06\x48\xa4\x06\x56\x9f\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_6() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xed\x05\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x5f\x06\x48\x9d\x05\x56\x21\x06\x48\x65\x06\x56\x5f\x06\x48\xa4\x06\x56\x9f\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xaa\x06\x48\x5a\x06\x56\x6a\x06\x48\xa7\x05\x56\xaa\x06\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_7() internal pure returns(bytes memory) {
    return "\x4d\x50\x9d\x5d\x07\x48\xdb\x05\x56\x9f\x06\x48\x1b\x06\x56\xe1\x05\x48\x5a\x06\x56\x62\x05\x48\x9a\x06\x56\x2e\x05\x48\x1d\x05\x56\xe4\x04\x48\xe3\x06\x56\x6e\x05\x48\xa4\x06\x56\xed\x05\x48\x65\x06\x56\xaa\x06\x48\x26\x06\x56\x67\x07\x48\xe6\x05\x56\x27\x08\x48\x9d\x05\x5a";
  }
  function font_8() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\xde\x06\x48\x5d\x05\x56\x9f\x06\x48\x9d\x05\x56\x6a\x06\x48\x5d\x05\x56\x2b\x06\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\x6a\x06\x48\x65\x06\x56\x9f\x06\x48\xa4\x06\x56\xde\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x60\x5a\x5f\x06\x56\x21\x06\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x21\x06\x48\xa7\x05\x56\x5f\x06\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xe9\x06\x48\x5a\x06\x56\xaa\x06\x48\xa7\x05\x56\xe9\x06\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_9() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x5d\x07\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xe9\x06\x48\x65\x06\x56\x29\x07\x48\x9d\x05\x56\xe9\x06\x48\x5d\x05\x56\xaa\x06\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x60\x5a\xde\x06\x56\x9f\x06\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x9f\x06\x48\xa7\x05\x56\xde\x06\x5a";
  }
  function font_colon() internal pure returns(bytes memory) {
    return "\x4d\x50\xba\xe1\x05\x48\x45\x06\x56\x6a\x06\x48\xba\x05\x5a\x4d\x50\xba\x5d\x07\x48\x45\x06\x56\xe6\x07\x48\xba\x05\x5a";
  }
  function font_semi_colon() internal pure returns(bytes memory) {
    return "\x4d\x50\xba\xe1\x05\x48\x45\x06\x56\x6a\x06\x48\xba\x05\x5a\x4d\x50\xfa\x1b\x08\x56\xe6\x07\x48\xba\x05\x56\x5d\x07\x48\x45\x06\x56\x27\x08\x48\x05\x06\x56\x66\x08\x48\xba\x05\x56\x1b\x08\x5a";
  }
  function font_LT() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\x29\x07\x48\x1d\x05\x56\xde\x06\x48\x5d\x05\x56\x9f\x06\x48\xdb\x05\x56\x5f\x06\x48\x1b\x06\x56\x21\x06\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\x6a\x06\x48\x26\x06\x56\xaa\x06\x48\xe6\x05\x56\xe9\x06\x48\x68\x05\x56\x1e\x07\x48\xe6\x05\x56\x5d\x07\x48\x26\x06\x56\x9d\x07\x48\xa4\x06\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x1b\x06\x56\xa7\x07\x48\xdb\x05\x56\x67\x07\x48\x5d\x05\x5a";
  }
  function font_equal() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x5f\x06\x48\xc3\x06\x56\xaa\x06\x48\x3c\x05\x5a\x4d\x50\x3c\x5d\x07\x48\xc3\x06\x56\xa7\x07\x48\x3c\x05\x5a";
  }
  function font_big() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xdb\x07\x48\x5d\x05\x56\x9d\x07\x48\xdb\x05\x56\x5d\x07\x48\x1b\x06\x56\x1e\x07\x48\x9a\x06\x56\xe9\x06\x48\x1b\x06\x56\xaa\x06\x48\xdb\x05\x56\x6a\x06\x48\x5d\x05\x56\x2b\x06\x48\x1d\x05\x56\xe1\x05\x48\x68\x05\x56\x21\x06\x48\xe6\x05\x56\x5f\x06\x48\x26\x06\x56\x9f\x06\x48\xa4\x06\x56\xde\x06\x48\xe3\x06\x56\x29\x07\x48\xa4\x06\x56\x67\x07\x48\x26\x06\x56\xa7\x07\x48\xe6\x05\x56\xe6\x07\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_question() internal pure returns(bytes memory) {
    return "\x4d\x50\xbc\x9f\x06\x48\xfb\x05\x56\x5f\x06\x48\x78\x06\x56\x21\x06\x48\xb4\x06\x56\x6e\x05\x48\x78\x06\x56\x2e\x05\x48\x89\x05\x56\x6e\x05\x48\x4d\x05\x56\xed\x05\x48\x02\x05\x56\x62\x05\x48\x42\x05\x56\x23\x05\x48\x80\x05\x56\xe4\x04\x48\x81\x06\x56\x23\x05\x48\xbf\x06\x56\x62\x05\x48\xfe\x06\x56\x2b\x06\x48\xbf\x06\x56\x6a\x06\x48\x81\x06\x56\xaa\x06\x48\x06\x06\x56\x67\x07\x48\xbc\x05\x5a\x4d\x50\xbc\x9d\x07\x48\x45\x06\x56\x27\x08\x48\xbc\x05\x5a";
  }
  function font_at() internal pure returns(bytes memory) {
    return "\x4d\x50\x42\xa7\x07\x48\x02\x05\x56\xe1\x05\x48\x42\x05\x56\x62\x05\x48\x80\x05\x56\x23\x05\x48\xbc\x05\x56\xe4\x04\x48\x81\x06\x56\x23\x05\x48\xbf\x06\x56\x62\x05\x48\xfe\x06\x56\x29\x07\x48\xbf\x06\x56\x67\x07\x48\x78\x06\x56\x29\x07\x48\x45\x06\x56\x67\x07\x48\xbc\x05\x56\x29\x07\x48\x80\x05\x56\xed\x05\x48\x4d\x05\x56\x9d\x07\x48\x89\x05\x56\xdb\x07\x48\xbf\x06\x56\x27\x08\x48\x80\x05\x56\xe6\x07\x48\x42\x05\x5a\x4d\x50\xbc\xe1\x05\x56\xa2\x05\x48\x45\x06\x56\xe1\x05\x48\x78\x06\x56\xa2\x05\x48\xb4\x06\x56\x6e\x05\x48\x78\x06\x56\x2e\x05\x48\xc8\x05\x56\x6e\x05\x48\x89\x05\x56\xe1\x05\x5a\x4d\x60\x39\x1e\x07\x56\xed\x05\x48\xc8\x05\x56\x1e\x07\x5a\x4d\x60\xb4\x1e\x07\x56\xed\x05\x48\x81\x06\x56\x1e\x07\x5a";
  }
  function font_A() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x5d\x07\x48\x5d\x05\x56\x5f\x06\x48\x9d\x05\x56\xa2\x05\x48\xdb\x05\x56\xe4\x04\x48\x26\x06\x56\xa2\x05\x48\x65\x06\x56\x5f\x06\x48\xa4\x06\x56\x5d\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\x67\x07\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a\x4d\x60\x5a\x1e\x07\x56\x6a\x06\x48\x1b\x06\x56\xad\x05\x48\xe6\x05\x56\x6a\x06\x48\xa7\x05\x56\x1e\x07\x5a";
  }
  function font_B() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\x6a\x06\x48\x65\x06\x56\x9f\x06\x48\xa4\x06\x56\xde\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x1d\x05\x5a\x4d\x60\x5a\x5f\x06\x56\x21\x06\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\x68\x05\x56\x5f\x06\x5a\x4d\x60\x5a\xdb\x07\x56\x9d\x07\x48\x9a\x06\x56\xe9\x06\x48\x5a\x06\x56\xaa\x06\x48\x68\x05\x56\xdb\x07\x5a";
  }
  function font_C() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xed\x05\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xde\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_D() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x1d\x05\x5a\x4d\x60\x5a\xdb\x07\x56\x9d\x07\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\x68\x05\x56\xdb\x07\x5a";
  }
  function font_E() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\xe3\x06\x56\x2e\x05\x48\x68\x05\x56\x5f\x06\x48\xa4\x06\x56\xaa\x06\x48\x68\x05\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_F() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\xe3\x06\x56\x2e\x05\x48\x68\x05\x56\x5f\x06\x48\xa4\x06\x56\xaa\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_G() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xed\x05\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xaa\x06\x48\xdb\x05\x56\x5f\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_H() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x68\x05\x56\x5f\x06\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xaa\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_I() internal pure returns(bytes memory) {
    return "\x4d\x50\xda\xe4\x04\x48\x25\x06\x56\x27\x08\x48\xda\x05\x5a";
  }
  function font_J() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\xde\x06\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_K() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x68\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\xdb\x05\x56\xa2\x05\x48\x1b\x06\x56\x62\x05\x48\x5a\x06\x56\x23\x05\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\x2e\x05\x48\xa4\x06\x56\x6e\x05\x48\x65\x06\x56\xad\x05\x48\x26\x06\x56\xed\x05\x48\xe6\x05\x56\x2b\x06\x48\xa7\x05\x56\x9f\x06\x48\xe6\x05\x56\xde\x06\x48\x26\x06\x56\x1e\x07\x48\x65\x06\x56\x9d\x07\x48\xa4\x06\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x5a\x06\x56\xa7\x07\x48\x1b\x06\x56\x29\x07\x48\xdb\x05\x56\xe9\x06\x48\x9d\x05\x56\xaa\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_L() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x68\x05\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_M() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x68\x05\x56\x62\x05\x48\xa7\x05\x56\x21\x06\x48\xe6\x05\x56\x1e\x07\x48\x1b\x06\x56\x21\x06\x48\x5a\x06\x56\x62\x05\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\x2b\x06\x48\x65\x06\x56\x29\x07\x48\x26\x06\x56\xe6\x07\x48\xdb\x05\x56\x29\x07\x48\x9d\x05\x56\x2b\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_N() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x68\x05\x56\x62\x05\x48\xa7\x05\x56\xe1\x05\x48\xe6\x05\x56\x5f\x06\x48\x26\x06\x56\xde\x06\x48\x65\x06\x56\x5d\x07\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x5a\x06\x56\x67\x07\x48\x1b\x06\x56\xe9\x06\x48\xdb\x05\x56\x6a\x06\x48\x9d\x05\x56\xed\x05\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_O() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_P() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\x6a\x06\x48\xa4\x06\x56\xaa\x06\x48\x65\x06\x56\xe9\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a\x4d\x60\x5a\x9f\x06\x56\x5f\x06\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\x68\x05\x56\x9f\x06\x5a";
  }
  function font_Q() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\x1b\x08\x48\xe3\x06\x56\x66\x08\x48\x5a\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x1b\x06\x56\xa7\x07\x48\xdb\x05\x56\x1e\x07\x48\x26\x06\x56\x9d\x07\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_R() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\x6a\x06\x48\x65\x06\x56\x9f\x06\x48\xa4\x06\x56\x5d\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\x67\x07\x48\x5a\x06\x56\xaa\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a\x4d\x60\x5a\x5f\x06\x56\x21\x06\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\x68\x05\x56\x5f\x06\x5a";
  }
  function font_S() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x1e\x07\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xe9\x06\x48\x5a\x06\x56\xaa\x06\x48\x9d\x05\x56\x6a\x06\x48\x5d\x05\x56\x2b\x06\x48\x1d\x05\x56\x62\x05\x48\x5d\x05\x56\x23\x05\x48\x9d\x05\x56\xe4\x04\x48\x65\x06\x56\x23\x05\x48\xa4\x06\x56\x62\x05\x48\xe3\x06\x56\xed\x05\x48\x9a\x06\x56\x6e\x05\x48\x5a\x06\x56\x2e\x05\x48\xa7\x05\x56\x6e\x05\x48\x68\x05\x56\x21\x06\x48\xa7\x05\x56\x5f\x06\x48\x65\x06\x56\x9f\x06\x48\xa4\x06\x56\xde\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_T() internal pure returns(bytes memory) {
    return "\x4d\x50\xdb\x6e\x05\x48\x1d\x05\x56\x23\x05\x48\xe3\x06\x56\x6e\x05\x48\x26\x06\x56\x27\x08\x48\xdb\x05\x5a";
  }
  function font_U() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\xe4\x04\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_V() internal pure returns(bytes memory) {
    return "\x4d\x50\x9d\xe9\x06\x48\x5d\x05\x56\xed\x05\x48\x1d\x05\x56\xe4\x04\x48\x68\x05\x56\xe1\x05\x48\xa7\x05\x56\xde\x06\x48\xe6\x05\x56\x9d\x07\x48\x1b\x06\x56\xde\x06\x48\x5a\x06\x56\xe1\x05\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\xed\x05\x48\xa4\x06\x56\xe9\x06\x48\x65\x06\x56\xa7\x07\x48\x26\x06\x56\x27\x08\x48\xdb\x05\x56\xa7\x07\x48\x9d\x05\x5a";
  }
  function font_W() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\x29\x07\x48\x1d\x05\x56\xe4\x04\x48\x68\x05\x56\x1e\x07\x48\x9d\x05\x56\x21\x06\x48\xdb\x05\x56\x23\x05\x48\x26\x06\x56\x21\x06\x48\x65\x06\x56\x1e\x07\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\x29\x07\x48\xa4\x06\x56\x27\x08\x48\x5a\x06\x56\x29\x07\x48\x1b\x06\x56\x2b\x06\x48\xe6\x05\x56\x29\x07\x48\xa7\x05\x56\x27\x08\x48\x5d\x05\x5a";
  }
  function font_X() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x9d\x07\x48\x5d\x05\x56\x1e\x07\x48\x9d\x05\x56\x9f\x06\x48\xdb\x05\x56\x6a\x06\x48\x9d\x05\x56\xed\x05\x48\x5d\x05\x56\x6e\x05\x48\x1d\x05\x56\xe4\x04\x48\x68\x05\x56\x62\x05\x48\xa7\x05\x56\xe1\x05\x48\xe6\x05\x56\x5f\x06\x48\x1b\x06\x56\xe1\x05\x48\x5a\x06\x56\x62\x05\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\x6e\x05\x48\xa4\x06\x56\xed\x05\x48\x65\x06\x56\x6a\x06\x48\x26\x06\x56\x9f\x06\x48\x65\x06\x56\x1e\x07\x48\xa4\x06\x56\x9d\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xa7\x07\x48\x5a\x06\x56\x29\x07\x48\x1b\x06\x56\xaa\x06\x48\xe6\x05\x56\x29\x07\x48\xa7\x05\x56\xa7\x07\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_Y() internal pure returns(bytes memory) {
    return "\x4d\x50\xdb\xaa\x06\x48\x9d\x05\x56\x2b\x06\x48\x5d\x05\x56\xad\x05\x48\x1d\x05\x56\xe4\x04\x48\x68\x05\x56\xa2\x05\x48\xa7\x05\x56\x21\x06\x48\xe6\x05\x56\x9f\x06\x48\x1b\x06\x56\x21\x06\x48\x5a\x06\x56\xa2\x05\x48\x9a\x06\x56\xe4\x04\x48\xe3\x06\x56\xad\x05\x48\xa4\x06\x56\x2b\x06\x48\x65\x06\x56\xaa\x06\x48\x26\x06\x56\x27\x08\x48\xdb\x05\x5a";
  }
  function font_Z() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x9d\x07\x48\x5d\x05\x56\x1e\x07\x48\x9d\x05\x56\x9f\x06\x48\xdb\x05\x56\x21\x06\x48\x1b\x06\x56\xa2\x05\x48\x5a\x06\x56\x2e\x05\x48\x1d\x05\x56\xe4\x04\x48\xe3\x06\x56\x2e\x05\x48\xa4\x06\x56\xad\x05\x48\x65\x06\x56\x2b\x06\x48\x26\x06\x56\xaa\x06\x48\xe6\x05\x56\x29\x07\x48\xa7\x05\x56\xa7\x07\x48\x68\x05\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_left_bracket() internal pure returns(bytes memory) {
    return "\x4d\x50\xfe\xa5\x04\x48\xc7\x06\x56\xef\x04\x48\x49\x06\x56\x1b\x08\x48\xc7\x06\x56\x66\x08\x48\xfe\x05\x5a";
  }
  function font_back_slash() internal pure returns(bytes memory) {
    return "\x4d\x60\x1a\xe9\x06\x48\xda\x05\x56\x2b\x06\x48\x9c\x05\x56\x6e\x05\x48\x5c\x05\x56\xe4\x04\x48\xa6\x05\x56\x62\x05\x48\xe5\x05\x56\x21\x06\x48\x25\x06\x56\xde\x06\x48\x64\x06\x56\x9d\x07\x48\xa3\x06\x56\x27\x08\x48\x59\x06\x56\xa7\x07\x48\x1a\x06\x5a";
  }
  function font_right_bracket() internal pure returns(bytes memory) {
    return "\x4d\x50\xbe\x1b\x08\x56\xef\x04\x48\x41\x05\x56\xa5\x04\x48\x09\x06\x56\x66\x08\x48\x41\x05\x56\x1b\x08\x5a";
  }
  function font_caret() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\xe1\x05\x48\x7c\x05\x56\x62\x05\x48\xba\x05\x56\xe4\x04\x48\x45\x06\x56\x62\x05\x48\x83\x06\x56\xe1\x05\x48\xc3\x06\x56\x6a\x06\x48\x79\x06\x56\xed\x05\x48\x39\x06\x56\x6e\x05\x48\xc6\x05\x56\xed\x05\x48\x86\x05\x56\x6a\x06\x48\x3c\x05\x5a";
  }
  function font_underline() internal pure returns(bytes memory) {
    return "\x4d\x60\xfe\x3b\x08\x56\x85\x08\x48\x02\x05\x56\x3b\x08\x5a";
  }
  function font_grave() internal pure returns(bytes memory) {
    return "\x4d\x50\xfe\x6e\x05\x48\xbe\x05\x56\x2e\x05\x48\x80\x05\x56\xa5\x04\x48\xca\x05\x56\xe4\x04\x48\x09\x06\x56\x62\x05\x48\x49\x06\x56\xad\x05\x48\xfe\x05\x5a";
  }
  function font_a() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x1e\x07\x48\x5d\x05\x56\xde\x06\x48\x5a\x06\x56\x2b\x06\x48\x68\x05\x56\xaa\x06\x48\x1d\x05\x56\x21\x06\x48\x5d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x26\x06\x56\x27\x08\x48\x5d\x05\x56\xe6\x07\x48\x1d\x05\x5a\x4d\x60\x1b\xdb\x07\x56\x9d\x07\x48\x5a\x06\x56\x29\x07\x48\x68\x05\x56\xdb\x07\x5a";
  }
  function font_b() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x23\x05\x48\x68\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\x5f\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_c() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x5f\x06\x48\x5d\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\x5f\x06\x48\xe3\x06\x56\xaa\x06\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\x5d\x07\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_d() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x5f\x06\x48\x5d\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\x9a\x06\x56\x23\x05\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_e() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x5f\x06\x48\x5d\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\x5f\x06\x48\xe3\x06\x56\x29\x07\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\x5d\x07\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x60\x9a\xde\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\xde\x06\x5a";
  }
  function font_f() internal pure returns(bytes memory) {
    return "\x4d\x50\xbc\x2b\x06\x48\x3c\x05\x56\xe1\x05\x48\xbc\x05\x56\x23\x05\x48\xfb\x05\x56\xe4\x04\x48\xc4\x06\x56\x2e\x05\x48\x06\x06\x56\xe1\x05\x48\xc4\x06\x56\x2b\x06\x48\x06\x06\x56\x27\x08\x48\xbc\x05\x5a";
  }
  function font_g() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x9d\x07\x48\x5d\x05\x56\x67\x07\x48\x1d\x05\x56\x1e\x07\x48\x5d\x05\x56\xe9\x06\x48\x1d\x05\x56\x21\x06\x48\x5d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\xe9\x06\x48\x65\x06\x56\x29\x07\x48\x68\x05\x56\x5d\x07\x48\xa4\x06\x56\x9d\x07\x48\xe3\x06\x56\x27\x08\x48\xa4\x06\x56\x66\x08\x48\x5d\x05\x56\x27\x08\x48\x1d\x05\x5a\x4d\x60\x5a\xde\x06\x56\x2b\x06\x48\x68\x05\x56\xde\x06\x5a\x4d\x60\x9a\x1b\x08\x56\xa7\x07\x48\x68\x05\x56\x1b\x08\x5a";
  }
  function font_h() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x23\x05\x48\x68\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\x5f\x06\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_i() internal pure returns(bytes memory) {
    return "\x4d\x50\xda\x23\x05\x48\x25\x06\x56\xad\x05\x48\xda\x05\x5a\x4d\x50\xda\xe1\x05\x48\x25\x06\x56\x27\x08\x48\xda\x05\x5a";
  }
  function font_j() internal pure returns(bytes memory) {
    return "\x4d\x60\x1a\x23\x05\x48\x64\x06\x56\xad\x05\x48\x1a\x06\x5a\x4d\x60\x1a\x1b\x08\x56\xe1\x05\x48\x64\x06\x56\x27\x08\x48\x25\x06\x56\x66\x08\x48\x9c\x05\x56\x1b\x08\x5a";
  }
  function font_k() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x23\x05\x48\x68\x05\x56\xde\x06\x48\x9d\x05\x56\x9f\x06\x48\xdb\x05\x56\x5f\x06\x48\x5a\x06\x56\x21\x06\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\x6a\x06\x48\x65\x06\x56\xaa\x06\x48\xe6\x05\x56\xe9\x06\x48\xa7\x05\x56\x1e\x07\x48\xe6\x05\x56\x5d\x07\x48\x65\x06\x56\x9d\x07\x48\xa4\x06\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x5a\x06\x56\xa7\x07\x48\xdb\x05\x56\x67\x07\x48\x9d\x05\x56\x29\x07\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_l() internal pure returns(bytes memory) {
    return "\x4d\x50\xda\x23\x05\x48\x25\x06\x56\x27\x08\x48\xda\x05\x5a";
  }
  function font_m() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe1\x05\x48\x68\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\xe6\x05\x56\x21\x06\x48\x5a\x06\x56\xe1\x05\x48\xa4\x06\x56\x21\x06\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\x2b\x06\x48\x65\x06\x56\x6a\x06\x48\x26\x06\x56\x27\x08\x48\xdb\x05\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_n() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe1\x05\x48\x68\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\x5f\x06\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_o() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\x5f\x06\x48\x5d\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\x5f\x06\x48\xe3\x06\x56\xa7\x07\x48\xa4\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a\x4d\x50\xa7\x9d\x07\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x9d\x07\x5a";
  }
  function font_p() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xe1\x05\x48\x68\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\xa4\x06\x56\x5f\x06\x48\xe3\x06\x56\x67\x07\x48\xa4\x06\x56\xa7\x07\x48\x65\x06\x56\xe6\x07\x48\x9d\x05\x56\xa7\x07\x48\x68\x05\x56\x66\x08\x48\x1d\x05\x5a\x4d\x60\x5a\x9d\x07\x56\x5d\x07\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x5d\x07\x48\xa7\x05\x56\x9d\x07\x5a";
  }
  function font_q() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\x67\x07\x48\x1d\x05\x56\x5f\x06\x48\x5d\x05\x56\x21\x06\x48\x9d\x05\x56\xe1\x05\x48\x65\x06\x56\x21\x06\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x66\x08\x48\x9a\x06\x56\xa7\x07\x48\x65\x06\x56\xe6\x07\x48\x9d\x05\x56\xa7\x07\x48\x5d\x05\x5a\x4d\x60\x5a\x9d\x07\x56\x5d\x07\x48\x9a\x06\x56\x6a\x06\x48\x5a\x06\x56\x2b\x06\x48\xa7\x05\x56\x6a\x06\x48\x68\x05\x56\x5d\x07\x48\xa7\x05\x56\x9d\x07\x5a";
  }
  function font_r() internal pure returns(bytes memory) {
    return "\x4d\x50\x5c\xe1\x05\x48\xa6\x05\x56\x21\x06\x48\xda\x05\x56\xe1\x05\x48\xa3\x06\x56\x2b\x06\x48\xe5\x05\x56\x6a\x06\x48\xa6\x05\x56\x27\x08\x48\x5c\x05\x5a";
  }
  function font_s() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x5d\x07\x48\x68\x05\x56\xdb\x07\x48\x9a\x06\x56\x29\x07\x48\x5d\x05\x56\xe9\x06\x48\x1d\x05\x56\x21\x06\x48\x5d\x05\x56\xe1\x05\x48\xa4\x06\x56\x21\x06\x48\xe3\x06\x56\xaa\x06\x48\x9a\x06\x56\x2b\x06\x48\x68\x05\x56\xde\x06\x48\xa4\x06\x56\x1e\x07\x48\xe3\x06\x56\xe6\x07\x48\xa4\x06\x56\x27\x08\x48\x5d\x05\x56\xe6\x07\x48\x1d\x05\x5a";
  }
  function font_t() internal pure returns(bytes memory) {
    return "\x4d\x50\xbc\x2b\x06\x48\x3c\x05\x56\xe1\x05\x48\xbc\x05\x56\x23\x05\x48\x06\x06\x56\xe1\x05\x48\xc4\x06\x56\x2b\x06\x48\x06\x06\x56\xdb\x07\x48\xc4\x06\x56\x27\x08\x48\xfb\x05\x56\xe6\x07\x48\xbc\x05\x5a";
  }
  function font_u() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\xa7\x07\x48\x1d\x05\x56\xe1\x05\x48\x68\x05\x56\x9d\x07\x48\xa7\x05\x56\xdb\x07\x48\x5a\x06\x56\x9d\x07\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x65\x06\x56\x27\x08\x48\x9d\x05\x56\xe6\x07\x48\x5d\x05\x5a";
  }
  function font_v() internal pure returns(bytes memory) {
    return "\x4d\x50\x9d\x29\x07\x48\x5d\x05\x56\xaa\x06\x48\x1d\x05\x56\xe1\x05\x48\x68\x05\x56\x9f\x06\x48\xa7\x05\x56\x1e\x07\x48\xe6\x05\x56\x9d\x07\x48\x1b\x06\x56\x1e\x07\x48\x5a\x06\x56\x9f\x06\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\xaa\x06\x48\xa4\x06\x56\x29\x07\x48\x65\x06\x56\xa7\x07\x48\x26\x06\x56\x27\x08\x48\xdb\x05\x56\xa7\x07\x48\x9d\x05\x5a";
  }
  function font_w() internal pure returns(bytes memory) {
    return "\x4d\x50\x5d\x67\x07\x48\x1d\x05\x56\xe1\x05\x48\x68\x05\x56\x5d\x07\x48\x9d\x05\x56\x9f\x06\x48\xdb\x05\x56\xe1\x05\x48\x26\x06\x56\x9f\x06\x48\x65\x06\x56\x5d\x07\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x67\x07\x48\xa4\x06\x56\x27\x08\x48\x5a\x06\x56\x67\x07\x48\x1b\x06\x56\xaa\x06\x48\xe6\x05\x56\x67\x07\x48\xa7\x05\x56\x27\x08\x48\x5d\x05\x5a";
  }
  function font_x() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\xdb\x07\x48\x5d\x05\x56\x5d\x07\x48\x9d\x05\x56\x1e\x07\x48\xdb\x05\x56\xe9\x06\x48\x9d\x05\x56\xaa\x06\x48\x5d\x05\x56\x2b\x06\x48\x1d\x05\x56\xe1\x05\x48\x68\x05\x56\x21\x06\x48\xa7\x05\x56\x9f\x06\x48\xe6\x05\x56\xde\x06\x48\x1b\x06\x56\x9f\x06\x48\x5a\x06\x56\x21\x06\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x2b\x06\x48\xa4\x06\x56\xaa\x06\x48\x65\x06\x56\xe9\x06\x48\x26\x06\x56\x1e\x07\x48\x65\x06\x56\x5d\x07\x48\xa4\x06\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x9a\x06\x56\xe6\x07\x48\x5a\x06\x56\x67\x07\x48\x1b\x06\x56\x29\x07\x48\xe6\x05\x56\x67\x07\x48\xa7\x05\x56\xe6\x07\x48\x68\x05\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_y() internal pure returns(bytes memory) {
    return "\x4d\x50\xdb\x1b\x08\x56\xa7\x07\x48\x9d\x05\x56\x29\x07\x48\x5d\x05\x56\x6a\x06\x48\x1d\x05\x56\xe1\x05\x48\x68\x05\x56\x5f\x06\x48\xa7\x05\x56\x1e\x07\x48\xe6\x05\x56\x9d\x07\x48\x1b\x06\x56\x1e\x07\x48\x5a\x06\x56\x5f\x06\x48\x9a\x06\x56\xe1\x05\x48\xe3\x06\x56\x6a\x06\x48\xa4\x06\x56\x29\x07\x48\x65\x06\x56\xa7\x07\x48\x26\x06\x56\x27\x08\x48\xe6\x05\x56\x66\x08\x48\x1d\x05\x56\x1b\x08\x5a";
  }
  function font_z() internal pure returns(bytes memory) {
    return "\x4d\x50\x1d\x9d\x07\x48\x5d\x05\x56\x5d\x07\x48\x9d\x05\x56\x1e\x07\x48\xdb\x05\x56\xde\x06\x48\x1b\x06\x56\x9f\x06\x48\x5a\x06\x56\x5f\x06\x48\x9a\x06\x56\x2b\x06\x48\x1d\x05\x56\xe1\x05\x48\xe3\x06\x56\x6a\x06\x48\xa4\x06\x56\xaa\x06\x48\x65\x06\x56\xe9\x06\x48\x26\x06\x56\x29\x07\x48\xe6\x05\x56\x67\x07\x48\xa7\x05\x56\xa7\x07\x48\x68\x05\x56\xdb\x07\x48\xe3\x06\x56\x27\x08\x48\x1d\x05\x5a";
  }
  function font_left_middle_bracket() internal pure returns(bytes memory) {
    return "\x4d\x50\xfe\xaa\x06\x48\xbe\x05\x56\x5f\x06\x48\xfe\x05\x56\xe4\x04\x48\x3d\x06\x56\xa5\x04\x48\xc7\x06\x56\xef\x04\x48\x49\x06\x56\x6a\x06\x48\x09\x06\x56\x9f\x06\x48\x49\x06\x56\x1b\x08\x48\xc7\x06\x56\x66\x08\x48\x3d\x06\x56\x27\x08\x48\xfe\x05\x5a";
  }
  function font_vertical() internal pure returns(bytes memory) {
    return "\x4d\x50\xda\xe4\x04\x48\x25\x06\x56\x66\x08\x48\xda\x05\x5a";
  }
  function font_right_middle_bracket() internal pure returns(bytes memory) {
    return "\x4d\x50\xbe\x1b\x08\x56\x9f\x06\x48\xfe\x05\x56\x6a\x06\x48\xbe\x05\x56\xef\x04\x48\x41\x05\x56\xa5\x04\x48\xca\x05\x56\xe4\x04\x48\x09\x06\x56\x5f\x06\x48\x49\x06\x56\xaa\x06\x48\x09\x06\x56\x27\x08\x48\xca\x05\x56\x66\x08\x48\x41\x05\x56\x1b\x08\x5a";
  }
  function font_tilde() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\xde\x06\x48\x7c\x05\x56\x9f\x06\x48\x05\x06\x56\xde\x06\x48\x79\x06\x56\x9f\x06\x48\xc3\x06\x56\xe9\x06\x48\x83\x06\x56\x29\x07\x48\xfa\x05\x56\xe9\x06\x48\x86\x05\x56\x29\x07\x48\x3c\x05\x5a";
  }

  function _register(uint _key, function() view returns (bytes memory) _function, uint _width) internal {
    fonts[_key] = _function;
    widths[_key - 0x20] = uint16(_width);
  }

  function _registerAll() internal {
    widths[0] = 208; // space
    _register(0x21, font_ex, 512);
    _register(0x22, font_double_quote, 512);
    _register(0x23, font_sharp, 512);
    _register(0x24, font_dallar, 512);
    _register(0x25, font_percent, 512);
    _register(0x26, font_and, 512);
    _register(0x27, font_apostrophe, 512);
    _register(0x28, font_brackets_left, 512);
    _register(0x29, font_brackets_right, 512);
    _register(0x2A, font_asterisk, 512);
    _register(0x2B, font_plus, 512);
    _register(0x2C, font_comma, 512);
    _register(0x2D, font_hyphen, 512);
    _register(0x2E, font_period, 512);
    _register(0x2F, font_slash, 512);
    _register(0x30, font_0, 512);
    _register(0x31, font_1, 512);
    _register(0x32, font_2, 512);
    _register(0x33, font_3, 512);
    _register(0x34, font_4, 512);
    _register(0x35, font_5, 512);
    _register(0x36, font_6, 512);
    _register(0x37, font_7, 512);
    _register(0x38, font_8, 512);
    _register(0x39, font_9, 512);
    _register(0x3A, font_colon, 512);
    _register(0x3B, font_semi_colon, 512);
    _register(0x3C, font_LT, 512);
    _register(0x3D, font_equal, 512);
    _register(0x3E, font_big, 512);
    _register(0x3F, font_question, 512);
    _register(0x40, font_at, 512);
    _register(0x41, font_A, 512);
    _register(0x42, font_B, 512);
    _register(0x43, font_C, 512);
    _register(0x44, font_D, 512);
    _register(0x45, font_E, 512);
    _register(0x46, font_F, 512);
    _register(0x47, font_G, 512);
    _register(0x48, font_H, 512);
    _register(0x49, font_I, 512);
    _register(0x4A, font_J, 512);
    _register(0x4B, font_K, 512);
    _register(0x4C, font_L, 512);
    _register(0x4D, font_M, 512);
    _register(0x4E, font_N, 512);
    _register(0x4F, font_O, 512);
    _register(0x50, font_P, 512);
    _register(0x51, font_Q, 512);
    _register(0x52, font_R, 512);
    _register(0x53, font_S, 512);
    _register(0x54, font_T, 512);
    _register(0x55, font_U, 512);
    _register(0x56, font_V, 512);
    _register(0x57, font_W, 512);
    _register(0x58, font_X, 512);
    _register(0x59, font_Y, 512);
    _register(0x5A, font_Z, 512);
    _register(0x5B, font_left_bracket, 512);
    _register(0x5C, font_back_slash, 512);
    _register(0x5D, font_right_bracket, 512);
    _register(0x5E, font_caret, 512);
    _register(0x5F, font_underline, 512);
    _register(0x60, font_grave, 512);
    _register(0x61, font_a, 512);
    _register(0x62, font_b, 512);
    _register(0x63, font_c, 512);
    _register(0x64, font_d, 512);
    _register(0x65, font_e, 512);
    _register(0x66, font_f, 512);
    _register(0x67, font_g, 512);
    _register(0x68, font_h, 512);
    _register(0x69, font_i, 512);
    _register(0x6A, font_j, 512);
    _register(0x6B, font_k, 512);
    _register(0x6C, font_l, 512);
    _register(0x6D, font_m, 512);
    _register(0x6E, font_n, 512);
    _register(0x6F, font_o, 512);
    _register(0x70, font_p, 512);
    _register(0x71, font_q, 512);
    _register(0x72, font_r, 512);
    _register(0x73, font_s, 512);
    _register(0x74, font_t, 512);
    _register(0x75, font_u, 512);
    _register(0x76, font_v, 512);
    _register(0x77, font_w, 512);
    _register(0x78, font_x, 512);
    _register(0x79, font_y, 512);
    _register(0x7A, font_z, 512);
    _register(0x7B, font_left_middle_bracket, 512);
    _register(0x7C, font_vertical, 512);
    _register(0x7D, font_right_middle_bracket, 512);
    _register(0x7E, font_tilde, 512);

  }

  constructor(address _designer) {
    designer = _designer;
    _registerAll();
  }

  function height() external pure override returns (uint) {
    return fixed_height;
  }

  function baseline() external pure override returns (uint) {
    return fixed_baseline;
  }

  function widthOf(string memory _char) external view override returns (uint width) {
    uint key = uint(uint8(bytes(_char)[0]));
    if (key >= 0x20 && key < 0x7F) {
      width = uint(widths[key - 0x20]);
    }
  }

  function pathOf(string memory _char) external view override returns (bytes memory path) {
    uint key = uint(uint8(bytes(_char)[0]));
    if (key >= 0x21 && key < 0x7F) {
      path = fonts[key]();
    }
  }

  function processPayout() external payable override {
    address payable payableTo = payable(designer);
    payableTo.transfer(msg.value);
    emit Payout('DotGothic16', payableTo, msg.value);
  }
}

// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

interface IFontProvider {
  function height() external view returns (uint);

  function baseline() external view returns (uint);

  function widthOf(string memory _char) external view returns (uint);

  function pathOf(string memory _char) external view returns (bytes memory);

  /**
   * This function processes the royalty payment from the decentralized autonomous marketplace.
   */
  function processPayout() external payable;

  event Payout(string providerKey, address payable to, uint256 amount);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}