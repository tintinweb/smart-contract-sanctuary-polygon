/**
 *Submitted for verification at polygonscan.com on 2023-06-11
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// DISCLAIMER: This contract was generated by ChatGPT for educational purposes only. Use it at your own responsibility and risk.

contract GuessingGame {
    address public owner;
    uint256 private targetNumber;
    uint256 public maxGuesses;
    uint256 public maxGuessesPerUser;
    uint256 public entryFee;
    uint256 public totalPot;
    uint256 public totalGuesses; // New variable to track the total number of guesses
    mapping(address => uint256) public numGuessesByUser;
    mapping(address => bool) public hasGuessed;

    event GuessMade(address indexed player, uint256 guess);
    event WinnerDeclared(address indexed winner, uint256 payout);
    event GameEnded();

    constructor() {
        owner = msg.sender;
        maxGuesses = 10;
        maxGuessesPerUser = 3;
        entryFee = 0.0001 ether;
        totalPot = 0;
        totalGuesses = 0;
        targetNumber = getRandomNumber();
    }

    function getRandomNumber() private view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.number))) % 101;
    }

    function makeGuess(uint256 guess) public payable {
        require(msg.value >= entryFee, "Insufficient entry fee");
        require(numGuessesByUser[msg.sender] < maxGuessesPerUser, "Max number of guesses per user reached");
        require(totalGuesses < maxGuesses, "Max number of guesses reached");
        require(guess >= 1 && guess <= 100, "Invalid guess range (1-100)");
        require(!hasGuessed[msg.sender], "Already guessed");

        numGuessesByUser[msg.sender]++;
        hasGuessed[msg.sender] = true;
        totalGuesses++;
        totalPot += msg.value;

        emit GuessMade(msg.sender, guess);

        if (guess == targetNumber) {
            // Winner!
            uint256 payout = totalPot;
            totalPot = 0;
            payable(msg.sender).transfer(payout);

            emit WinnerDeclared(msg.sender, payout);

            // End the game after a winner is declared
            emit GameEnded();
        } else if (numGuessesByUser[msg.sender] == maxGuessesPerUser) {
            // Max guesses per user reached
            hasGuessed[msg.sender] = true;
        } else if (totalGuesses == maxGuesses) {
            // No winner after max guesses
            totalPot = 0;

            emit GameEnded();
        }
    }

    function getContractBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function withdrawFunds() public {
        require(msg.sender == owner, "Only the owner can withdraw funds");
        uint256 contractBalance = address(this).balance;
        payable(msg.sender).transfer(contractBalance);
    }
}