// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Takuya Mizutani (@Takuya-Mizutani)
 */

pragma solidity ^0.8.6;

import '../packages/graphics/IFontProvider.sol';
import { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';

contract ZenDots is IFontProvider, Ownable {
  uint constant fixed_height = 1024;
  uint constant fixed_baseline = 800;

  uint16[0xe0] widths;
  mapping(uint => function() view returns (bytes memory)) fonts;
  address public immutable designer;

  function font_ex() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x7f\x06\x56\xd3\x04\x48\xc4\x05\x56\x7f\x06\x5a\x4d\x50\x3c\x33\x07\x56\xb9\x06\x48\xc4\x05\x56\x33\x07\x5a";
  }
  function font_double_quote() internal pure returns(bytes memory) {
    return "\x4d\x50\x33\xce\x05\x56\xd3\x04\x48\x9a\x05\x56\xce\x05\x5a\x4d\x50\xd5\xce\x05\x56\xd3\x04\x48\x3c\x06\x56\xce\x05\x5a";
  }
  function font_sharp() internal pure returns(bytes memory) {
    return "\x4d\x50\x89\x33\x57\xa2\x8d\x06\x48\x22\x05\x4c\x31\x65\x2b\x48\x50\xb1\x4c\x50\xbd\xde\x05\x48\x3d\x05\x4c\x4c\x55\x7c\x48\x50\xcc\x4c\x50\xe6\xd3\x04\x48\x51\x06\x4c\x37\x56\x7c\x48\x60\xb3\x4c\x60\xcd\xd3\x04\x48\x38\x07\x4c\x1f\x57\x7c\x48\x70\x9f\x4c\x70\x8f\xde\x05\x48\x0f\x07\x4c\x03\x67\x2b\x48\x70\x83\x4c\x70\x75\x8d\x06\x48\xf5\x06\x4c\xdb\x76\x33\x48\x60\x70\x4c\x60\x89\x8d\x06\x48\x0e\x06\x4c\xf4\x75\x33\x5a\x00\x4d\x1c\x66\x2b\x48\x60\x98\x4c\x60\xa4\xde\x05\x48\x28\x06\x5a";
  }
  function font_dallar() internal pure returns(bytes memory) {
    return "\x4d\x50\x20\xe2\x06\x56\x80\x06\x48\x0a\x06\x56\x31\x06\x48\xb4\x05\x51\x68\x65\x31\x41\x65\x0e\x51\x50\x1a\xec\x55\x1a\xab\x05\x51\x1a\x55\x69\x41\x55\x46\x51\x50\x69\x22\x55\xb4\x22\x05\x48\x0a\x06\x56\x84\x04\x48\x71\x06\x56\x22\x05\x48\x39\x07\x56\x84\x05\x48\x71\x06\x56\xcf\x05\x48\xd9\x06\x51\x1b\x57\xcf\x3f\x57\xf1\x51\x70\x62\x14\x76\x62\x55\x06\x51\x62\x67\x98\x3e\x67\xbd\x51\x70\x1a\xe2\x66\xd9\xe2\x06\x48\x71\x06\x56\x81\x07\x48\x0a\x06\x56\xe2\x06\x5a\x4d\x50\xba\xcf\x05\x48\x0a\x06\x56\x84\x05\x48\xba\x05\x51\x95\x55\x84\x95\x55\xa8\x51\x50\x95\xba\x55\xa0\xc4\x05\x51\xaa\x55\xcf\xba\x55\xcf\x5a\x00\x4d\xc3\x66\x31\x48\x60\x71\x56\x60\x80\x48\x60\xc3\x51\x60\xe6\x80\x66\xe6\x58\x06\x51\xe6\x66\x31\xc3\x66\x31\x5a\x00";
  }
  function font_percent() internal pure returns(bytes memory) {
    return "\x4d\x50\x9a\x33\x77\x70\xd3\x04\x48\xf1\x07\x4c\x1c\x76\x33\x5a\x00\x4d\xb7\x65\x03\x51\x50\x6c\x03\x56\x43\xd9\x05\x51\x1a\x55\xb0\x1a\x55\x6b\x51\x50\x1a\x26\x55\x43\xfc\x04\x51\x6c\x45\xd3\xb7\x45\xd3\x48\x50\xed\x51\x60\x38\xd3\x64\x62\xfc\x04\x51\x8b\x56\x26\x8b\x56\x6b\x51\x60\x8b\xb0\x65\x62\xd9\x05\x51\x38\x66\x03\xed\x65\x03\x5a\x00\x4d\xc9\x55\xb1\x48\x50\xdc\x51\x50\xfd\xb1\x65\x0e\x9e\x05\x51\x1f\x56\x8c\x1f\x56\x6b\x51\x60\x1f\x49\x65\x0e\x37\x05\x51\xfd\x55\x25\xdc\x55\x25\x48\x50\xc9\x51\x50\xa7\x25\x55\x97\x37\x05\x51\x86\x55\x49\x86\x55\x6b\x51\x50\x86\x8c\x55\x97\x9e\x05\x51\xa7\x55\xb1\xc9\x55\xb1\x5a\x00\x4d\x97\x77\x33\x51\x70\x4c\x33\x77\x23\x0a\x07\x51\xf9\x66\xe0\xf9\x66\x9b\x51\x60\xf9\x56\x76\x23\x2d\x06\x51\x4c\x67\x03\x97\x67\x03\x48\x70\xcd\x51\x80\x18\x03\x86\x41\x2d\x06\x51\x6b\x68\x56\x6b\x68\x9b\x51\x80\x6b\xe0\x86\x41\x0a\x07\x51\x18\x78\x33\xcd\x77\x33\x5a\x00\x4d\xa8\x67\xe1\x48\x70\xbc\x51\x70\xdd\xe1\x76\xee\xcf\x06\x51\xfe\x67\xbd\xfe\x67\x9b\x51\x70\xfe\x7a\x76\xee\x68\x06\x51\xdd\x67\x55\xbc\x67\x55\x48\x70\xa8\x51\x70\x87\x55\x76\x76\x68\x06\x51\x66\x67\x7a\x66\x67\x9b\x51\x70\x66\xbd\x76\x76\xcf\x06\x51\x87\x67\xe1\xa8\x67\xe1\x5a\x00";
  }
  function font_and() internal pure returns(bytes memory) {
    return "\x4d\x50\xb7\x33\x07\x51\x83\x75\x33\x60\x75\x21\x51\x50\x3d\x0f\x57\x2b\xf2\x06\x51\x1a\x65\xd5\x1a\x65\xb3\x51\x50\x1a\x95\x56\x27\x76\x06\x51\x35\x65\x57\x4f\x65\x3d\x4c\x50\xdd\xaf\x05\x51\xd3\x55\xa1\xcd\x55\x90\x51\x50\xc7\x7f\x55\xc7\x69\x05\x51\xc7\x55\x43\xdc\x55\x20\x51\x50\xf1\xfd\x64\x1a\xe7\x04\x51\x43\x46\xd1\x7f\x46\xd1\x48\x60\xfe\x51\x70\x57\xd1\x74\x87\x02\x05\x51\xb7\x57\x32\xb7\x57\x83\x48\x70\x2a\x51\x70\x2a\x40\x65\xe4\x40\x05\x48\x9c\x06\x51\x7d\x56\x40\x6e\x56\x4e\x51\x60\x60\x5c\x65\x60\x6e\x05\x51\x60\x56\x78\x65\x56\x83\x51\x60\x6b\x8f\x65\x76\x98\x05\x4c\x39\x67\x3d\x4c\x70\xac\xc9\x05\x48\x5c\x08\x4c\x98\x67\x8d\x4c\x80\x5c\x33\x07\x48\x9b\x07\x4c\x40\x67\xe5\x4c\x60\xf1\x33\x07\x5a\x4d\x50\xd9\xc4\x06\x48\xb1\x06\x4c\xe2\x66\x94\x4c\x60\x39\x02\x06\x4c\xbc\x65\x7e\x51\x50\xb3\x86\x56\xb0\x8f\x06\x51\xac\x65\x97\xac\x65\xa0\x51\x50\xac\xae\x56\xb8\xb9\x06\x51\xc3\x65\xc4\xd9\x65\xc4\x5a\x00";
  }
  function font_apostrophe() internal pure returns(bytes memory) {
    return "\x4d\x50\x33\xce\x05\x56\xd3\x04\x48\x9a\x05\x56\xce\x05\x5a";
  }
  function font_brackets_left() internal pure returns(bytes memory) {
    return "\x4d\x50\xda\xd8\x07\x51\x90\x75\x83\x6a\x75\x1d\x51\x50\x44\xb7\x56\x44\x49\x06\x51\x44\x55\x68\xda\x45\xb9\x48\x60\x42\x51\x50\xfc\x0f\x55\xd7\x74\x05\x51\xb3\x55\xd9\xb3\x65\x49\x51\x50\xb3\xb8\x56\xd7\x1e\x07\x51\xfc\x75\x83\x42\x76\xd8\x5a\x00";
  }
  function font_brackets_right() internal pure returns(bytes memory) {
    return "\x4d\x50\x78\xd8\x07\x51\xc3\x75\x83\xe9\x75\x1d\x51\x60\x0f\xb7\x66\x0f\x49\x06\x51\x0f\x56\x68\x78\x45\xb9\x48\x50\x11\x51\x50\x57\x0f\x55\x7b\x74\x05\x51\xa0\x55\xd9\xa0\x65\x49\x51\x50\xa0\xb8\x56\x7b\x1e\x07\x51\x57\x75\x83\x11\x75\xd8\x5a\x00";
  }
  function font_asterisk() internal pure returns(bytes memory) {
    return "\x4d\x50\x94\x43\x56\x54\x14\x56\xa4\xa6\x55\x22\x7c\x55\x3b\x31\x55\xbd\x5a\x05\x56\xd3\x04\x48\x0b\x06\x56\x5a\x05\x4c\x8d\x56\x31\x4c\x60\xa5\x7c\x05\x4c\x23\x56\xa6\x4c\x60\x73\x14\x06\x4c\x33\x66\x43\x4c\x50\xe3\xd4\x05\x5a";
  }
  function font_plus() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\x6c\x06\x56\x09\x06\x48\xe6\x05\x56\x43\x05\x48\x50\x06\x56\x09\x06\x48\x13\x07\x56\x6c\x06\x48\x50\x06\x56\x33\x07\x48\xe6\x05\x56\x6c\x06\x5a";
  }
  function font_comma() internal pure returns(bytes memory) {
    return "\x4d\x50\x70\xb4\x07\x56\x33\x07\x48\x33\x05\x56\xb9\x06\x48\xbd\x05\x56\xb4\x07\x5a";
  }
  function font_hyphen() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\x6c\x06\x56\x09\x06\x48\x27\x06\x56\x6c\x06\x5a";
  }
  function font_period() internal pure returns(bytes memory) {
    return "\x4d\x50\x33\x33\x07\x56\xb9\x06\x48\xbc\x05\x56\x33\x07\x5a";
  }
  function font_slash() internal pure returns(bytes memory) {
    return "\x4d\x50\x04\xd8\x67\x95\xb9\x04\x48\x03\x07\x4c\x72\x75\xd8\x5a\x00";
  }
  function font_0() internal pure returns(bytes memory) {
    return "\x4d\x60\x7e\x37\x07\x51\xda\x75\x37\x7e\x65\xe9\x51\x50\x22\x9b\x56\x22\x02\x06\x51\x22\x55\x69\x7e\x55\x1b\x51\x50\xda\xcd\x64\x7e\xcd\x04\x48\xed\x06\x51\x93\x47\xcd\xee\x57\x1b\x51\x80\x49\x69\x85\x49\x02\x06\x51\x49\x68\x9b\xee\x67\xe9\x51\x70\x93\x37\x67\xed\x37\x07\x5a\x4d\x50\xad\x02\x06\x51\xad\x65\x5f\xda\x65\x8f\x4c\x70\x29\x42\x05\x51\x0a\x57\x3c\xe4\x56\x3c\x48\x60\x88\x51\x60\x1c\x3c\x55\xe5\x6b\x05\x51\xad\x55\x9a\xad\x65\x02\x5a\x00\x4d\x88\x66\xc9\x48\x60\xe4\x51\x70\x4f\xc9\x76\x87\x99\x06\x51\xbe\x67\x6a\xbe\x67\x02\x51\x70\xbe\xa5\x75\x90\x74\x05\x4c\x41\x66\xc3\x51\x60\x60\xc9\x66\x88\xc9\x06\x5a";
  }
  function font_1() internal pure returns(bytes memory) {
    return "\x4d\x50\xbd\x33\x07\x56\x42\x05\x48\x09\x05\x56\xd3\x04\x48\x42\x06\x56\x33\x07\x5a";
  }
  function font_2() internal pure returns(bytes memory) {
    return "\x4d\x50\x1a\x33\x07\x56\x7e\x06\x51\x1a\x65\x29\x49\x55\xfa\x51\x50\x79\xcb\x55\xd4\xcb\x05\x48\xed\x06\x51\x3e\x57\xcb\x3e\x57\x86\x51\x70\x3e\x41\x65\xed\x41\x05\x48\x27\x05\x56\xd2\x04\x48\x08\x07\x51\x60\x47\xd2\x91\x57\x02\x51\x70\xc3\x31\x75\xc3\x86\x05\x51\xc3\x57\xda\x91\x67\x0a\x51\x70\x60\x3a\x76\x08\x3a\x06\x48\xe7\x05\x51\xc3\x65\x3a\xb0\x65\x4c\x51\x50\x9e\x5f\x56\x9e\x80\x06\x56\xc5\x06\x48\xb2\x07\x56\x33\x07\x5a";
  }
  function font_3() internal pure returns(bytes memory) {
    return "\x4d\x50\x1a\x33\x07\x56\xc4\x06\x48\xef\x06\x51\x0f\x67\xc4\x20\x67\xb2\x51\x70\x30\xa0\x76\x30\x7f\x06\x51\x30\x67\x5e\x20\x67\x4b\x51\x70\x0f\x38\x66\xef\x38\x06\x48\x6a\x05\x56\xca\x05\x48\xee\x06\x51\x30\x57\xca\x30\x57\x85\x51\x70\x30\x41\x65\xee\x41\x05\x48\x1a\x05\x56\xd2\x04\x48\x08\x07\x51\x60\x47\xd2\x91\x47\xfe\x51\x70\xc3\x2a\x75\xc3\x78\x05\x51\xc3\x57\xa3\xb2\x57\xc9\x51\x70\xa2\xef\x75\x7d\x01\x06\x51\xa2\x67\x14\xb2\x67\x38\x51\x70\xc3\x5c\x76\xc3\x88\x06\x51\xc3\x67\xd5\x91\x77\x04\x51\x70\x60\x33\x77\x08\x33\x07\x5a";
  }
  function font_4() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\xc3\x06\x56\x54\x06\x4c\x63\x46\xd2\x48\x70\x0b\x4c\x50\xc5\x54\x06\x48\x0f\x07\x56\xc9\x05\x48\x93\x07\x56\x54\x06\x48\x22\x08\x56\xc3\x06\x48\x93\x07\x56\x33\x07\x48\x0f\x07\x56\xc3\x06\x5a";
  }
  function font_5() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xc4\x06\x48\x01\x07\x51\x52\x67\xc4\x52\x67\x7f\x51\x70\x52\x3a\x76\x01\x3a\x06\x48\x3c\x05\x56\xd2\x04\x48\xbd\x07\x56\x40\x05\x48\xc0\x05\x56\xcb\x05\x48\x1b\x07\x51\x74\x57\xcb\xa5\x57\xfb\x51\x70\xd6\x2b\x76\xd6\x7f\x06\x51\xd6\x67\xd4\xa5\x77\x03\x51\x70\x74\x33\x77\x1b\x33\x07\x5a";
  }
  function font_6() internal pure returns(bytes memory) {
    return "\x4d\x60\x3a\x34\x07\x51\xb5\x75\x34\x6c\x65\xe3\x51\x50\x22\x93\x56\x22\x02\x06\x51\x22\x55\x64\x7e\x55\x1a\x51\x50\xda\xd1\x64\x7e\xd1\x04\x48\xd6\x07\x56\x40\x05\x48\x88\x06\x51\x2b\x56\x40\xf4\x55\x5f\x51\x50\xbe\x7e\x55\xb1\xcc\x05\x48\x40\x07\x51\x9f\x57\xcc\xd5\x57\xfb\x51\x80\x0c\x2b\x86\x0c\x7e\x06\x51\x0c\x68\xd4\xd5\x77\x04\x51\x70\x9f\x34\x77\x40\x34\x07\x5a\x4d\x60\x43\xc5\x06\x48\x26\x07\x51\x54\x67\xc5\x6e\x67\xb4\x51\x70\x88\xa2\x76\x88\x7f\x06\x51\x88\x67\x5d\x6e\x67\x4c\x51\x70\x54\x3b\x76\x26\x3b\x06\x48\xb1\x05\x51\xc5\x65\xc5\x43\x66\xc5\x5a\x00";
  }
  function font_7() internal pure returns(bytes memory) {
    return "\x4d\x50\x90\x33\x77\x2d\x42\x05\x48\x1e\x05\x56\xd3\x04\x48\xd1\x07\x56\x43\x05\x4c\x35\x76\x33\x5a\x00";
  }
  function font_8() internal pure returns(bytes memory) {
    return "\x4d\x50\xf7\x33\x07\x51\x9f\x75\x33\x6d\x75\x02\x51\x50\x3c\xd0\x56\x3c\x7f\x06\x51\x3c\x65\x2a\x70\x55\xf7\x51\x50\x4d\xca\x55\x4d\x84\x05\x51\x4d\x55\x33\x7e\x55\x03\x51\x50\xb0\xd2\x64\x08\xd2\x04\x48\x58\x07\x51\xb1\x47\xd2\xe2\x57\x03\x51\x80\x13\x33\x85\x13\x84\x05\x51\x13\x58\xca\xf0\x57\xf7\x51\x80\x24\x29\x86\x24\x7f\x06\x51\x24\x68\xd0\xf3\x77\x02\x51\x70\xc2\x33\x77\x69\x33\x07\x5a\x4d\x60\x22\xc8\x05\x48\x3d\x07\x51\x81\x57\xc8\x81\x57\x83\x51\x70\x81\x43\x75\x3d\x43\x05\x48\x22\x06\x51\xdf\x55\x43\xdf\x55\x83\x51\x50\xdf\xc8\x65\x22\xc8\x05\x5a\x4d\x60\x11\xc3\x06\x48\x4f\x07\x51\x92\x67\xc3\x92\x67\x7e\x51\x70\x92\x38\x76\x4f\x38\x06\x48\x11\x06\x51\xcf\x65\x38\xcf\x65\x7e\x51\x50\xcf\xc3\x66\x11\xc3\x06\x5a";
  }
  function font_9() internal pure returns(bytes memory) {
    return "\x4d\x50\x4f\x33\x07\x56\xc3\x06\x48\xbb\x06\x51\x08\x67\xc3\x34\x67\x9f\x51\x70\x60\x7b\x76\x6c\x39\x06\x48\xd4\x05\x51\x7d\x65\x39\x4b\x65\x09\x51\x50\x1a\xd8\x55\x1a\x87\x05\x51\x1a\x55\x35\x4b\x55\x04\x51\x50\x7d\xd3\x54\xd4\xd3\x04\x48\xc7\x06\x51\x2b\x47\xd3\x71\x47\xf8\x51\x70\xb8\x1e\x75\xde\x62\x05\x51\x03\x58\xa6\x03\x68\x03\x51\x80\x03\x5f\x76\xde\xa3\x06\x51\xb8\x67\xe7\x71\x77\x0d\x51\x70\x2b\x33\x67\xc7\x33\x07\x5a\x4d\x50\xef\xca\x05\x48\x6c\x07\x51\x60\x57\x89\x33\x57\x66\x51\x70\x06\x43\x65\xb9\x43\x05\x48\xef\x05\x51\xac\x55\x43\xac\x55\x87\x51\x50\xac\xca\x55\xef\xca\x05\x5a";
  }
  function font_colon() internal pure returns(bytes memory) {
    return "\x4d\x50\x33\x33\x07\x56\xb9\x06\x48\xbc\x05\x56\x33\x07\x5a\x4d\x50\x33\xf6\x05\x56\x7c\x05\x48\xbc\x05\x56\xf6\x05\x5a";
  }
  function font_semi_colon() internal pure returns(bytes memory) {
    return "\x4d\x50\x33\xf6\x05\x56\x7c\x05\x48\xbc\x05\x56\xf6\x05\x5a\x4d\x50\x70\xb4\x07\x56\x33\x07\x48\x33\x05\x56\xb9\x06\x48\xbd\x05\x56\xb4\x07\x5a";
  }
  function font_LT() internal pure returns(bytes memory) {
    return "\x4d\x70\x64\x22\x57\x22\x6c\x06\x56\x09\x06\x4c\x64\x57\x54\x56\x50\xbc\x4c\x50\xb9\x3b\x06\x4c\x64\x67\xba\x5a\x00";
  }
  function font_equal() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\x09\x06\x56\xa6\x05\x48\x13\x07\x56\x09\x06\x5a\x4d\x50\x22\xcf\x06\x56\x6c\x06\x48\x13\x07\x56\xcf\x06\x5a";
  }
  function font_big() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\x54\x75\x64\x0a\x06\x56\x6c\x06\x4c\x22\x75\x22\x56\x60\xba\x4c\x60\xcd\x3b\x06\x4c\x22\x55\xbc\x5a\x00";
  }
  function font_question() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x7f\x06\x56\xcc\x05\x48\x7d\x06\x51\xbd\x56\xcc\xbd\x56\x87\x51\x60\xbd\x42\x65\x7d\x42\x05\x48\x3c\x05\x56\xd3\x04\x48\x8e\x06\x51\xe6\x46\xd3\x17\x57\x04\x51\x70\x49\x35\x75\x49\x86\x05\x51\x49\x57\xd7\x17\x67\x09\x51\x60\xe6\x3b\x66\x8e\x3b\x06\x48\xc4\x05\x56\x7f\x06\x5a\x4d\x50\x3c\x33\x07\x56\xb9\x06\x48\xc4\x05\x56\x33\x07\x5a";
  }
  function font_at() internal pure returns(bytes memory) {
    return "\x4d\x60\x7e\xa2\x07\x51\x0e\x76\xa2\xbe\x75\x77\x51\x50\x6e\x4d\x57\x44\x00\x07\x51\x1a\x65\xb2\x1a\x65\x4b\x51\x50\x1a\xe3\x55\x44\x96\x05\x51\x6e\x55\x49\xbe\x55\x1e\x51\x60\x0e\xf3\x64\x7e\xf3\x04\x48\x73\x07\x51\xe3\x47\xf3\x33\x58\x15\x51\x80\x83\x37\x85\xad\x76\x05\x51\xd8\x58\xb6\xd8\x68\x10\x51\x80\xd8\x58\x86\xbd\x8f\x06\x51\xa1\x68\xc6\x6c\x68\xe5\x51\x80\x37\x04\x77\xec\x04\x07\x48\x71\x06\x51\x33\x76\x04\x14\x66\xe7\x51\x50\xf4\xc9\x56\xf4\x93\x06\x51\xf4\x65\x5c\x14\x66\x3f\x51\x60\x33\x21\x66\x71\x21\x06\x48\x82\x07\x56\x10\x06\x51\x82\x57\xe5\x56\x57\xe5\x48\x60\x24\x56\x50\x91\x48\x70\x71\x51\x70\xb1\x91\x75\xce\xb1\x05\x51\xec\x57\xd0\xec\x67\x03\x56\x60\xb1\x51\x80\x2d\xaf\x86\x4e\x85\x06\x51\x6f\x68\x5b\x6f\x68\x10\x51\x80\x6f\xa8\x85\x30\x78\x05\x51\xf1\x57\x49\x77\x57\x49\x48\x60\x7b\x51\x50\xfe\x49\x55\xc0\x8b\x05\x51\x83\x55\xce\x83\x65\x4b\x51\x50\x83\xc8\x56\xc0\x0a\x07\x51\xfe\x75\x4d\x7b\x76\x4d\x48\x70\x82\x56\x70\xa2\x5a\x00\x4d\x88\x66\xb1\x48\x70\x82\x56\x60\x74\x48\x60\x88\x51\x60\x73\x74\x66\x6b\x7c\x06\x51\x62\x66\x84\x62\x66\x93\x51\x60\x62\xa0\x66\x6b\xa9\x06\x51\x73\x66\xb1\x88\x66\xb1\x5a\x00";
  }
  function font_A() internal pure returns(bytes memory) {
    return "\x4d\x50\x09\x33\x67\x1b\xd1\x04\x48\xee\x06\x4c\x01\x78\x33\x48\x70\x6c\x4c\x70\x32\xb2\x06\x48\xd7\x05\x4c\x9d\x75\x33\x5a\x00\x4d\x09\x66\x43\x48\x70\x01\x4c\x60\x8a\x3c\x05\x48\x7f\x06\x5a";
  }
  function font_B() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd3\x04\x4c\x3d\x47\xd1\x51\x70\xa3\xd1\x74\xd4\xfb\x04\x51\x05\x58\x26\x05\x58\x7a\x51\x80\x05\xcf\x75\xcd\xf6\x05\x51\xf2\x67\x0a\x04\x68\x2c\x51\x80\x16\x4e\x86\x16\x83\x06\x51\x16\x68\xd9\xe5\x77\x06\x51\x70\xb4\x32\x77\x4f\x32\x07\x5a\x4d\x70\x2d\x3e\x05\x48\xc4\x05\x56\xc7\x05\x48\x2d\x07\x51\x7b\x57\xc7\x7b\x57\x81\x51\x70\x7b\x3e\x75\x2d\x3e\x05\x5a\x4d\x70\x3e\x34\x06\x48\xc4\x05\x56\xc5\x06\x48\x3e\x07\x51\x8c\x67\xc5\x8c\x67\x7c\x51\x70\x8c\x34\x76\x3e\x34\x06\x5a";
  }
  function font_C() internal pure returns(bytes memory) {
    return "\x4d\x60\x76\x37\x07\x51\xcd\x75\x37\x73\x65\xe9\x51\x50\x1a\x9b\x56\x1a\x02\x06\x51\x1a\x55\x69\x73\x55\x1a\x51\x50\xcd\xcc\x64\x76\xcd\x04\x4c\xa9\x47\xcf\x56\x50\x3c\x48\x60\x7f\x51\x60\x10\x3c\x55\xda\x6b\x05\x51\xa5\x55\x9a\xa5\x65\x02\x51\x50\xa5\x6a\x56\xda\x99\x06\x51\x10\x66\xc9\x7f\x66\xc9\x48\x70\xb1\x56\x70\x37\x5a\x00";
  }
  function font_D() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xa0\x05\x4c\xb1\x46\xd0\x51\x70\x57\xd0\x74\xb2\x1e\x05\x51\x0e\x58\x6c\x0e\x68\x02\x51\x80\x0e\x98\x76\xb2\xe6\x06\x51\x57\x77\x33\xb1\x76\x33\x5a\x00\x4d\xa8\x56\x3f\x48\x50\xc4\x56\x60\xc4\x48\x60\xa8\x51\x70\x14\xc4\x76\x4b\x95\x06\x51\x83\x67\x66\x83\x67\x02\x51\x70\x83\x9c\x75\x4b\x6e\x05\x51\x14\x57\x3f\xa8\x56\x3f\x5a\x00";
  }
  function font_E() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xd9\x07\x56\x40\x05\x48\xc4\x05\x56\xc7\x05\x48\xa7\x07\x56\x36\x06\x48\xc4\x05\x56\xc4\x06\x48\xd9\x07\x56\x33\x07\x5a";
  }
  function font_F() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xc8\x07\x56\x40\x05\x48\xc4\x05\x56\xe9\x05\x48\x85\x07\x56\x58\x06\x48\xc4\x05\x56\x33\x07\x5a";
  }
  function font_G() internal pure returns(bytes memory) {
    return "\x4d\x60\x65\x37\x07\x51\xc9\x75\x37\x71\x65\xe9\x51\x50\x1a\x9b\x56\x1a\x02\x06\x51\x1a\x55\x69\x73\x55\x1b\x51\x50\xcc\xcd\x64\x76\xcd\x04\x48\xba\x07\x56\x3c\x05\x48\x7f\x06\x51\x0f\x56\x3c\xda\x55\x6b\x51\x50\xa5\x9a\x55\xa5\x02\x06\x51\xa5\x65\x65\xd4\x65\x94\x51\x60\x03\xc3\x66\x5d\xc8\x06\x56\xda\x05\x48\xdb\x07\x56\x37\x07\x5a\x4d\x60\xdd\xc9\x06\x48\x53\x07\x56\x49\x06\x48\xdd\x06\x5a";
  }
  function font_H() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xc4\x05\x56\xcb\x05\x48\x72\x07\x56\xd1\x04\x48\xfb\x07\x56\x33\x07\x48\x72\x07\x56\x3a\x06\x48\xc4\x05\x56\x33\x07\x5a";
  }
  function font_I() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xc4\x05\x56\x33\x07\x5a";
  }
  function font_J() internal pure returns(bytes memory) {
    return "\x4d\x60\x08\x37\x07\x51\x89\x75\x37\x4e\x75\x0b\x51\x50\x13\xde\x56\x13\x81\x06\x51\x13\x65\x6b\x18\x65\x54\x48\x50\xa0\x51\x50\x9f\x5f\x56\x9e\x69\x06\x51\x9d\x65\x73\x9d\x65\x7a\x51\x50\x9d\xa9\x56\xc0\xb9\x06\x51\xe3\x65\xc9\x1f\x66\xc9\x48\x60\x54\x51\x60\x9d\xc9\x66\xbb\xb1\x06\x51\xda\x66\x9a\xda\x66\x59\x56\x40\xd1\x48\x70\x62\x56\x60\x59\x51\x70\x62\xa4\x76\x4b\xd5\x06\x51\x34\x77\x07\xfe\x76\x1f\x51\x60\xc9\x37\x67\x6c\x37\x07\x5a";
  }
  function font_K() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd3\x04\x48\xc4\x05\x56\xcb\x05\x48\x8f\x06\x4c\x58\x47\xd3\x48\x80\x02\x4c\x70\x07\x03\x06\x4c\x02\x78\x33\x48\x70\x58\x4c\x60\x8f\x3a\x06\x48\xc4\x05\x56\x33\x07\x5a";
  }
  function font_L() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xc4\x05\x56\xc4\x06\x48\x83\x07\x56\x33\x07\x5a";
  }
  function font_M() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xae\x05\x4c\xc9\x56\x97\x48\x60\xcd\x4c\x70\xe7\xd1\x04\x48\x5a\x08\x56\x33\x07\x48\xd1\x07\x56\x7c\x05\x4c\x0f\x57\xfd\x56\x70\x33\x48\x60\x87\x56\x50\xfd\x4c\x50\xc4\x7c\x05\x56\x33\x07\x5a";
  }
  function font_N() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\xc6\x05\x4c\x76\x67\x88\x56\x40\xd1\x48\x70\xfe\x56\x70\x33\x48\x70\x74\x4c\x50\xc4\x7c\x05\x56\x33\x07\x5a";
  }
  function font_O() internal pure returns(bytes memory) {
    return "\x4d\x60\x70\x37\x07\x51\xcd\x75\x37\x73\x65\xe9\x51\x50\x1a\x9b\x56\x1a\x02\x06\x51\x1a\x55\x69\x73\x55\x1b\x51\x50\xcd\xcd\x64\x76\xcd\x04\x48\x0f\x07\x51\xb8\x47\xcd\x12\x58\x1b\x51\x80\x6c\x69\x85\x6c\x02\x06\x51\x6c\x68\x9b\x12\x68\xe9\x51\x70\xb8\x37\x77\x14\x37\x07\x5a\x4d\x60\x7f\x3c\x05\x51\x20\x56\x3c\xec\x55\x5e\x51\x50\xb7\x80\x55\xa9\xca\x05\x48\xdc\x07\x51\xcf\x57\x80\x9a\x57\x5e\x51\x70\x65\x3c\x75\x06\x3c\x05\x5a\x4d\x60\x82\xc9\x06\x48\x06\x07\x51\x66\x67\xc9\x9a\x67\xa6\x51\x70\xcf\x84\x76\xdc\x39\x06\x48\xa9\x05\x51\xb7\x65\x84\xec\x65\xa6\x51\x60\x20\xc9\x66\x82\xc9\x06\x5a";
  }
  function font_P() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\x3b\x07\x51\x9a\x47\xd1\xce\x57\x01\x51\x80\x03\x31\x85\x03\x92\x05\x51\x03\x58\xf3\xce\x67\x23\x51\x70\x9a\x53\x76\x3b\x53\x06\x48\xc4\x05\x56\x33\x07\x5a\x4d\x70\x2b\x40\x05\x48\xc4\x05\x56\xe3\x05\x4c\x2b\x57\xe4\x51\x70\x50\xe4\x75\x64\xd1\x05\x51\x78\x57\xbe\x78\x57\x92\x51\x70\x78\x65\x75\x64\x52\x05\x51\x50\x57\x40\x2b\x57\x40\x5a\x00";
  }
  function font_Q() internal pure returns(bytes memory) {
    return "\x4d\x60\x70\x37\x07\x51\xcd\x75\x37\x73\x65\xe9\x51\x50\x1a\x9b\x56\x1a\x02\x06\x51\x1a\x55\x69\x73\x55\x1b\x51\x50\xcd\xcd\x64\x76\xcd\x04\x48\x0f\x07\x51\xb8\x47\xcd\x12\x58\x1b\x51\x80\x6c\x69\x85\x6c\x02\x06\x51\x6c\x68\x9b\x12\x68\xe9\x51\x70\xb8\x37\x77\x14\x37\x07\x48\x09\x07\x56\x91\x07\x48\x80\x06\x56\x37\x07\x5a\x4d\x70\x09\x5e\x06\x56\xc9\x06\x51\x77\x67\xc8\xac\x67\x99\x51\x70\xe0\x6a\x76\xe0\x02\x06\x51\xe0\x57\x9a\xab\x57\x6b\x51\x70\x76\x3c\x75\x06\x3c\x05\x48\x7f\x06\x51\x10\x56\x3c\xda\x55\x6b\x51\x50\xa5\x9a\x55\xa5\x02\x06\x51\xa5\x65\x6a\xda\x65\x99\x51\x60\x10\xc9\x66\x80\xc9\x06\x56\x5e\x06\x5a";
  }
  function font_R() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\x33\x07\x56\xd1\x04\x48\x3b\x07\x51\x9a\x47\xd1\xce\x57\x01\x51\x80\x03\x31\x85\x03\x92\x05\x51\x03\x58\xe5\xdc\x67\x14\x51\x70\xb6\x43\x76\x6f\x4f\x06\x4c\xfc\x77\x33\x48\x70\x60\x4c\x60\xde\x53\x06\x48\xc4\x05\x56\x33\x07\x5a\x4d\x70\x2b\x40\x05\x48\xc4\x05\x56\xe3\x05\x4c\x2b\x57\xe4\x51\x70\x50\xe4\x75\x64\xd1\x05\x51\x78\x57\xbe\x78\x57\x92\x51\x70\x78\x65\x75\x64\x52\x05\x51\x50\x57\x40\x2b\x57\x40\x5a\x00";
  }
  function font_S() internal pure returns(bytes memory) {
    return "\x4d\x50\x28\x37\x07\x56\xc9\x06\x4c\x13\x67\xc9\x51\x70\x38\xc9\x76\x4c\xb8\x06\x51\x60\x67\xa6\x60\x67\x7f\x51\x70\x60\x58\x76\x4c\x46\x06\x51\x38\x67\x35\x13\x67\x35\x48\x50\xe1\x51\x50\x83\x35\x56\x4e\x07\x06\x51\x1a\x55\xda\x1a\x55\x81\x51\x50\x1a\x28\x55\x4e\xfa\x04\x51\x83\x45\xcd\xe1\x45\xcd\x48\x70\xc1\x56\x50\x3c\x4c\x50\xf0\x3b\x05\x51\xcb\x55\x3b\xb7\x55\x4c\x51\x50\xa2\x5c\x55\xa2\x81\x05\x51\xa2\x55\xa6\xb7\x55\xb6\x51\x50\xcb\xc7\x55\xf0\xc7\x05\x48\x21\x07\x51\x80\x57\xc7\xb4\x57\xf5\x51\x70\xe9\x24\x76\xe9\x7f\x06\x51\xe9\x67\xda\xb4\x77\x09\x51\x70\x80\x37\x77\x21\x37\x07\x5a";
  }
  function font_T() internal pure returns(bytes memory) {
    return "\x4d\x50\x26\x06\x06\x56\xd1\x04\x48\x15\x08\x56\x06\x06\x48\x8b\x07\x56\x40\x05\x48\xd1\x06\x56\x33\x07\x48\x49\x06\x56\x40\x05\x48\xb1\x05\x56\x06\x06\x5a";
  }
  function font_U() internal pure returns(bytes memory) {
    return "\x4d\x60\x32\x37\x07\x51\xd5\x75\x37\xa0\x75\x1f\x51\x50\x6a\x07\x57\x53\xd5\x06\x51\x3c\x65\xa4\x3c\x65\x59\x56\x40\xd1\x48\x50\xc4\x56\x60\x59\x51\x50\xc4\x9a\x56\xe3\xb1\x06\x51\x01\x66\xc9\x49\x66\xc9\x48\x60\xee\x51\x70\x37\xc9\x76\x55\xb1\x06\x51\x73\x67\x9a\x73\x67\x59\x56\x40\xd1\x48\x70\xfc\x56\x60\x59\x51\x70\xfc\xa4\x76\xe5\xd5\x06\x51\xce\x77\x07\x98\x77\x1f\x51\x70\x62\x37\x77\x05\x37\x07\x5a";
  }
  function font_V() internal pure returns(bytes memory) {
    return "\x4d\x60\x13\x33\x57\x00\xd1\x04\x48\x94\x05\x4c\x77\x66\xc9\x48\x60\x82\x4c\x70\x64\xd1\x04\x48\xf8\x07\x4c\xe6\x76\x33\x5a\x00";
  }
  function font_W() internal pure returns(bytes memory) {
    return "\x4d\x50\x6f\x33\x57\x2b\xd1\x04\x48\xb3\x05\x4c\xe6\x65\x8f\x4c\x60\x8f\x0c\x06\x56\xd1\x04\x48\x18\x07\x56\x0d\x06\x4c\xc0\x67\x8f\x4c\x70\xf3\xd1\x04\x48\x7c\x08\x4c\x37\x78\x33\x48\x70\xc5\x4c\x60\xd4\x70\x06\x4c\xe1\x75\x33\x5a\x00";
  }
  function font_X() internal pure returns(bytes memory) {
    return "\x4d\x50\x09\x33\x57\xed\x03\x56\x09\xd1\x04\x48\xaf\x05\x4c\x66\x56\xcb\x48\x60\xb5\x4c\x70\x6c\xd1\x04\x48\x13\x08\x4c\x2e\x67\x03\x4c\x80\x13\x33\x07\x48\x6c\x07\x4c\xb5\x66\x3a\x48\x60\x66\x4c\x50\xb0\x33\x07\x5a";
  }
  function font_Y() internal pure returns(bytes memory) {
    return "\x4d\x60\x43\x33\x07\x56\x5a\x06\x4c\x00\x45\xd1\x48\x50\xa9\x4c\x60\x88\xe6\x05\x4c\x66\x47\xd1\x48\x80\x0f\x4c\x60\xcd\x59\x06\x56\x33\x07\x5a";
  }
  function font_Z() internal pure returns(bytes memory) {
    return "\x4d\x50\x1a\x33\x07\x56\xcc\x06\x4c\xe4\x56\x42\x48\x50\x2d\x56\x40\xd3\x48\x70\xaa\x56\x50\x3a\x4c\x50\xdf\xc4\x06\x48\xa8\x07\x56\x33\x07\x5a";
  }
  function font_left_bracket() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\xd8\x07\x56\xb9\x04\x48\x24\x06\x56\x13\x05\x48\xa2\x05\x56\x7e\x07\x48\x24\x06\x56\xd8\x07\x5a";
  }
  function font_back_slash() internal pure returns(bytes memory) {
    return "\x4d\x70\x03\xd8\x57\x72\xb9\x04\x48\x04\x05\x4c\x95\x76\xd8\x5a\x00";
  }
  function font_right_bracket() internal pure returns(bytes memory) {
    return "\x4d\x50\xf1\xd8\x07\x56\xb9\x04\x48\x09\x05\x56\x13\x05\x48\x8a\x05\x56\x7e\x07\x48\x09\x05\x56\xd8\x07\x5a";
  }
  function font_caret() internal pure returns(bytes memory) {
    return "\x4d\x50\x11\x3a\x56\xe2\xd3\x04\x48\x74\x06\x4c\x45\x67\x3a\x48\x60\xcf\x4c\x60\x2b\x17\x05\x4c\x87\x65\x3a\x5a\x00";
  }
  function font_underline() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\x9a\x07\x56\x37\x07\x48\x30\x07\x56\x9a\x07\x5a";
  }
  function font_grave() internal pure returns(bytes memory) {
    return "\x4d\x50\xe8\x44\x55\x33\xc4\x04\x48\xca\x05\x4c\x64\x56\x44\x5a\x00";
  }
  function font_a() internal pure returns(bytes memory) {
    return "\x4d\x50\xa4\x33\x07\x51\x5f\x75\x33\x3a\x75\x10\x51\x50\x15\xed\x56\x15\xac\x06\x51\x15\x65\x6c\x3a\x65\x49\x51\x50\x5f\x26\x56\xa4\x26\x06\x48\xec\x06\x56\x12\x06\x51\xec\x56\xde\xb8\x56\xde\x48\x50\x4f\x56\x50\x7c\x48\x60\xd9\x51\x70\x26\x7c\x75\x47\x9f\x05\x51\x67\x57\xc3\x67\x67\x03\x56\x70\x33\x5a\x00\x4d\xba\x65\xd1\x48\x60\xec\x56\x60\x89\x48\x50\xba\x51\x50\xaa\x89\x56\xa1\x92\x06\x51\x98\x65\x9c\x98\x65\xac\x51\x50\x98\xbd\x56\xa1\xc7\x06\x51\xaa\x65\xd1\xba\x65\xd1\x5a\x00";
  }
  function font_b() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\xd1\x04\x48\xab\x05\x56\x33\x07\x5a\x4d\x50\x44\x33\x07\x56\xd1\x06\x48\x6b\x06\x51\xa2\x66\xd1\xc0\x66\xb3\x51\x60\xdd\x94\x66\xdd\x58\x06\x51\xdd\x66\x1a\xc0\x56\xfc\x51\x60\xa2\xde\x65\x6b\xde\x05\x48\x4d\x05\x56\x7c\x05\x48\x6b\x06\x51\xdd\x56\x7c\x1d\x57\xb4\x51\x70\x5d\xec\x75\x5d\x58\x06\x51\x5d\x67\xc3\x1d\x67\xfb\x51\x60\xdd\x33\x67\x6b\x33\x07\x5a";
  }
  function font_c() internal pure returns(bytes memory) {
    return "\x4d\x60\x10\x37\x07\x51\x9e\x75\x37\x5e\x65\xff\x51\x50\x1e\xc6\x56\x1e\x58\x06\x51\x1e\x55\xe9\x5e\x55\xb0\x51\x50\x9e\x77\x65\x10\x77\x05\x48\x2e\x07\x56\xda\x05\x48\x10\x06\x51\xd9\x55\xda\xbb\x55\xf8\x51\x50\x9e\x17\x56\x9e\x58\x06\x51\x9e\x65\x98\xbb\x65\xb7\x51\x50\xd9\xd5\x66\x10\xd5\x06\x48\x37\x07\x56\x37\x07\x5a";
  }
  function font_d() internal pure returns(bytes memory) {
    return "\x4d\x70\x4c\x33\x07\x56\xd1\x04\x48\xd0\x06\x56\x33\x07\x5a\x4d\x70\x37\x33\x07\x56\xd1\x06\x48\x10\x06\x51\xd9\x65\xd1\xbb\x65\xb3\x51\x50\x9e\x94\x56\x9e\x58\x06\x51\x9e\x65\x1a\xbb\x55\xfc\x51\x50\xd9\xde\x65\x10\xde\x05\x48\x2e\x07\x56\x7c\x05\x48\x10\x06\x51\x9e\x55\x7c\x5e\x55\xb4\x51\x50\x1e\xec\x55\x1e\x58\x06\x51\x1e\x65\xc3\x5e\x65\xfb\x51\x50\x9e\x33\x67\x10\x33\x07\x5a";
  }
  function font_e() internal pure returns(bytes memory) {
    return "\x4d\x60\x10\x37\x07\x51\x9e\x75\x37\x5e\x65\xff\x51\x50\x1e\xc6\x56\x1e\x58\x06\x51\x1e\x55\xe9\x5e\x55\xb0\x51\x50\x9e\x77\x65\x10\x77\x05\x48\xe6\x06\x51\x31\x57\x77\x58\x57\x9b\x51\x70\x80\xbe\x75\x80\x00\x06\x51\x80\x67\x86\xe6\x66\x86\x48\x50\xa3\x51\x50\xb5\xd5\x66\x10\xd5\x06\x48\x6a\x07\x56\x37\x07\x5a\x4d\x60\x10\xda\x05\x51\xb8\x55\xda\xa4\x65\x24\x48\x60\xe0\x51\x60\xf1\x24\x66\xfa\x1a\x06\x51\x04\x67\x0f\x04\x57\xfd\x51\x70\x04\xda\x65\xe0\xda\x05\x5a";
  }
  function font_f() internal pure returns(bytes memory) {
    return "\x4d\x50\x90\x33\x07\x56\xde\x05\x48\x11\x05\x56\x7c\x05\x48\x90\x05\x56\x5a\x05\x51\x90\x55\x1d\xb3\x45\xf8\x51\x50\xd6\xd3\x64\x20\xd3\x04\x48\xda\x06\x56\x35\x05\x48\x3f\x06\x51\x0c\x56\x35\x0c\x56\x69\x56\x50\x7c\x48\x60\xc3\x56\x50\xde\x48\x60\x0c\x56\x70\x33\x5a\x00";
  }
  function font_g() internal pure returns(bytes memory) {
    return "\x4d\x50\x97\xf3\x07\x56\x91\x07\x48\x99\x06\x51\xcc\x76\x91\xcc\x76\x5d\x56\x70\x33\x48\x60\x10\x51\x50\x9e\x33\x57\x5e\xfb\x06\x51\x1e\x65\xc3\x1e\x65\x58\x51\x50\x1e\xec\x55\x5e\xb4\x05\x51\x9e\x55\x7c\x10\x56\x7c\x48\x70\x48\x56\x70\x6c\x51\x70\x48\xa9\x77\x25\xce\x07\x51\x02\x77\xf3\xb7\x76\xf3\x5a\x00\x4d\x10\x66\xd1\x48\x60\xcc\x56\x50\xde\x48\x60\x10\x51\x50\xd9\xde\x55\xbb\xfc\x05\x51\x9e\x65\x1a\x9e\x65\x58\x51\x50\x9e\x94\x56\xbb\xb3\x06\x51\xd9\x65\xd1\x10\x66\xd1\x5a\x00";
  }
  function font_h() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\xd1\x04\x48\xab\x05\x56\x7c\x05\x48\xae\x06\x51\xf9\x56\x7c\x1c\x57\xa1\x51\x70\x3e\xc6\x75\x3e\x03\x06\x56\x33\x07\x48\xc3\x06\x56\x11\x06\x51\xc3\x56\xde\x8f\x56\xde\x48\x50\xab\x56\x70\x33\x5a\x00";
  }
  function font_i() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\x7c\x05\x48\xab\x05\x56\x33\x07\x5a\x4d\x50\x2e\x33\x05\x56\xd3\x04\x48\xac\x05\x56\x33\x05\x5a";
  }
  function font_j() internal pure returns(bytes memory) {
    return "\x4d\x50\x2c\xf3\x07\x56\x7c\x05\x48\xa7\x05\x56\xf3\x07\x5a\x4d\x50\x2b\x33\x05\x56\xd3\x04\x48\xa8\x05\x56\x33\x05\x5a";
  }
  function font_k() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\xd1\x04\x48\xab\x05\x56\x7c\x05\x48\xd2\x06\x51\x1d\x57\x7c\x45\x57\x9f\x51\x70\x6c\xc3\x75\x6c\x04\x06\x51\x6c\x67\x70\x06\x67\x84\x4c\x70\x6e\x33\x07\x48\xe3\x06\x4c\x7e\x66\x89\x48\x50\xab\x56\x70\x33\x5a\x00\x4d\xcc\x56\xdd\x48\x50\xab\x56\x60\x28\x48\x60\xcc\x51\x60\xdd\x28\x66\xe7\x1e\x06\x51\xf1\x66\x14\xf1\x66\x02\x51\x60\xf1\xdd\x65\xcc\xdd\x05\x5a";
  }
  function font_l() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\xd1\x04\x48\xab\x05\x56\x33\x07\x5a";
  }
  function font_m() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\x7c\x05\x48\x68\x07\x51\xb3\x57\x7c\xd6\x57\xa1\x51\x70\xf9\xc6\x75\xf9\x03\x06\x56\x33\x07\x48\x7d\x07\x56\x12\x06\x51\x7d\x57\xde\x49\x57\xde\x48\x60\xd2\x56\x70\x33\x48\x60\x56\x56\x50\xde\x48\x50\xab\x56\x70\x33\x5a\x00";
  }
  function font_n() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\x7c\x05\x48\xae\x06\x51\xf9\x56\x7c\x1c\x57\xa1\x51\x70\x3e\xc6\x75\x3e\x03\x06\x56\x33\x07\x48\xc3\x06\x56\x11\x06\x51\xc3\x56\xde\x8f\x56\xde\x48\x50\xab\x56\x70\x33\x5a\x00";
  }
  function font_o() internal pure returns(bytes memory) {
    return "\x4d\x60\x10\x37\x07\x51\x9e\x75\x37\x5e\x65\xff\x51\x50\x1e\xc6\x56\x1e\x58\x06\x51\x1e\x55\xe9\x5e\x55\xb0\x51\x50\x9e\x77\x65\x10\x77\x05\x48\xae\x06\x51\x20\x57\x77\x60\x57\xb0\x51\x70\xa0\xe9\x75\xa0\x58\x06\x51\xa0\x67\xc6\x60\x67\xff\x51\x70\x20\x37\x67\xae\x37\x07\x5a\x4d\x60\x10\xd5\x06\x48\xae\x06\x51\xe6\x66\xd5\x03\x67\xb7\x51\x70\x20\x98\x76\x20\x58\x06\x51\x20\x67\x17\x03\x57\xf8\x51\x60\xe6\xda\x65\xae\xda\x05\x48\x10\x06\x51\xd9\x55\xda\xbb\x55\xf8\x51\x50\x9e\x17\x56\x9e\x58\x06\x51\x9e\x65\x98\xbb\x65\xb7\x51\x50\xd9\xd5\x66\x10\xd5\x06\x5a";
  }
  function font_p() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\xf3\x07\x56\x7c\x05\x48\x6b\x06\x51\xdd\x56\x7c\x1d\x57\xb4\x51\x70\x5d\xec\x75\x5d\x57\x06\x51\x5d\x67\xc3\x1d\x67\xfb\x51\x60\xdd\x33\x67\x6b\x33\x07\x48\xab\x05\x56\xf3\x07\x5a\x4d\x60\x6b\xde\x05\x48\xab\x05\x56\xd1\x06\x48\x6b\x06\x51\xa2\x66\xd1\xc0\x66\xb3\x51\x60\xdd\x94\x66\xdd\x57\x06\x51\xdd\x66\x1a\xc0\x56\xfc\x51\x60\xa2\xde\x65\x6b\xde\x05\x5a";
  }
  function font_q() internal pure returns(bytes memory) {
    return "\x4d\x70\x4c\xf3\x07\x56\x7c\x05\x48\x10\x06\x51\x9e\x55\x7c\x5e\x55\xb4\x51\x50\x1e\xec\x55\x1e\x57\x06\x51\x1e\x65\xc3\x5e\x65\xfb\x51\x50\x9e\x33\x67\x10\x33\x07\x48\xd0\x06\x56\xf3\x07\x5a\x4d\x60\x10\xde\x05\x48\xd0\x06\x56\xd1\x06\x48\x10\x06\x51\xd9\x65\xd1\xbb\x65\xb3\x51\x50\x9e\x94\x56\x9e\x57\x06\x51\x9e\x65\x1a\xbb\x55\xfc\x51\x50\xd9\xde\x65\x10\xde\x05\x5a";
  }
  function font_r() internal pure returns(bytes memory) {
    return "\x4d\x50\x2f\x33\x07\x56\x7c\x05\x48\x7f\x06\x51\xc9\x56\x7c\xec\x56\xa1\x51\x70\x0f\xc6\x75\x0f\x03\x06\x56\x5e\x06\x48\x92\x06\x56\x12\x06\x51\x92\x56\xdf\x5f\x56\xdf\x48\x50\xac\x56\x70\x33\x5a\x00";
  }
  function font_s() internal pure returns(bytes memory) {
    return "\x4d\x50\x20\x37\x07\x56\xd5\x06\x48\xc3\x06\x51\xe6\x66\xd5\xe6\x66\xad\x51\x60\xe6\x86\x66\xc3\x86\x06\x48\xb4\x05\x51\x68\x65\x86\x41\x65\x63\x51\x50\x1a\x41\x56\x1a\x00\x06\x51\x1a\x55\xbe\x41\x55\x9b\x51\x50\x69\x77\x55\xb4\x77\x05\x48\x39\x07\x56\xda\x05\x48\xba\x05\x51\x95\x55\xda\x95\x55\xfd\x51\x50\x95\x0f\x56\xa0\x1a\x06\x51\xaa\x65\x24\xba\x65\x24\x48\x60\xd9\x51\x70\x1b\x24\x76\x3f\x46\x06\x51\x62\x67\x69\x62\x67\xab\x51\x70\x62\xed\x76\x3e\x12\x07\x51\x1a\x77\x37\xd9\x76\x37\x5a\x00";
  }
  function font_t() internal pure returns(bytes memory) {
    return "\x4d\x60\x14\x33\x07\x51\xc9\x75\x33\xa6\x75\x0e\x51\x50\x83\xe9\x56\x83\xac\x06\x56\xde\x05\x48\x04\x05\x56\x7c\x05\x48\x83\x05\x56\xf5\x04\x48\xff\x05\x56\x7c\x05\x48\xb6\x06\x56\xde\x05\x48\xff\x05\x56\x9d\x06\x51\xff\x65\xd1\x32\x66\xd1\x48\x60\xce\x56\x70\x33\x5a\x00";
  }
  function font_u() internal pure returns(bytes memory) {
    return "\x4d\x50\xbb\x33\x07\x51\x70\x75\x33\x4d\x75\x0e\x51\x50\x2b\xe8\x56\x2b\xac\x06\x56\x7c\x05\x48\xa6\x05\x56\x9e\x06\x51\xa6\x65\xd1\xda\x65\xd1\x48\x60\x8b\x51\x60\xbe\xd1\x66\xbe\x9e\x06\x56\x7c\x05\x48\x3a\x07\x56\xac\x06\x51\x3a\x67\xe8\x17\x77\x0e\x51\x60\xf5\x33\x67\xaa\x33\x07\x5a";
  }
  function font_v() internal pure returns(bytes memory) {
    return "\x4d\x50\xc2\x33\x57\x09\x7c\x05\x48\x8a\x05\x4c\x1a\x66\xd0\x48\x60\x44\x4c\x60\xd4\x7c\x05\x48\x55\x07\x4c\x9c\x76\x33\x5a\x00";
  }
  function font_w() internal pure returns(bytes memory) {
    return "\x4d\x50\x43\x33\x57\x1a\x7c\x05\x48\x96\x05\x4c\xb3\x65\xc9\x4c\x60\x37\x8e\x06\x56\x7c\x05\x48\xb3\x06\x56\x8f\x06\x4c\x37\x67\xc9\x4c\x70\x54\x7c\x05\x48\xd1\x07\x4c\xa7\x77\x33\x48\x70\x32\x4c\x60\x75\xe0\x06\x4c\xb8\x75\x33\x5a\x00";
  }
  function font_x() internal pure returns(bytes memory) {
    return "\x4d\x50\x09\x33\x57\xae\x58\x56\x09\x7d\x05\x48\x9a\x05\x4c\x19\x66\x26\x48\x60\x57\x4c\x60\xd7\x7d\x05\x48\x67\x07\x4c\xc3\x66\x58\x4c\x70\x67\x33\x07\x48\xd7\x06\x4c\x56\x66\x89\x48\x60\x19\x4c\x50\x9a\x33\x07\x5a";
  }
  function font_y() internal pure returns(bytes memory) {
    return "\x4d\x50\x92\xf3\x07\x56\x91\x07\x48\x94\x06\x51\xc7\x76\x91\xc7\x76\x5d\x56\x70\x33\x48\x50\xbf\x51\x50\x74\x33\x57\x51\x0e\x07\x51\x2f\x65\xe8\x2f\x65\xac\x56\x50\x7c\x48\x50\xab\x56\x60\x9e\x51\x50\xab\xd1\x56\xde\xd1\x06\x48\xc3\x06\x56\x7c\x05\x48\x43\x07\x56\x6c\x07\x51\x43\x77\xa9\x20\x77\xce\x51\x60\xfd\xf3\x67\xb2\xf3\x07\x5a";
  }
  function font_z() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\x33\x07\x56\xd9\x06\x4c\x7d\x56\xde\x48\x50\x31\x56\x50\x7c\x48\x70\x31\x56\x50\xd6\x4c\x50\xd7\xd1\x06\x48\x31\x07\x56\x33\x07\x5a";
  }
  function font_left_middle_bracket() internal pure returns(bytes memory) {
    return "\x4d\x60\x22\xd8\x07\x51\xd7\x75\xd8\xb4\x75\xb2\x51\x50\x90\x8d\x57\x90\x51\x07\x56\xc2\x06\x51\x90\x65\x75\x55\x65\x75\x48\x50\x22\x56\x60\x1c\x48\x50\x55\x51\x50\x90\x1c\x56\x90\xcf\x05\x56\x40\x05\x51\x90\x55\x03\xb4\x45\xde\x51\x50\xd7\xb9\x64\x22\xb9\x04\x48\x7a\x06\x56\x13\x05\x48\x28\x06\x51\x0e\x56\x13\x02\x56\x20\x51\x50\xf7\x2d\x55\xf7\x49\x05\x56\xe6\x05\x51\xf7\x65\x13\xe5\x65\x29\x51\x50\xd3\x40\x56\xad\x49\x06\x51\xd3\x65\x51\xe5\x65\x68\x51\x50\xf7\x7e\x56\xf7\xac\x06\x56\x49\x07\x51\xf7\x75\x64\x02\x76\x71\x51\x60\x0e\x7e\x67\x28\x7e\x07\x48\x7a\x06\x56\xd8\x07\x5a";
  }
  function font_vertical() internal pure returns(bytes memory) {
    return "\x4d\x50\x3c\xd8\x07\x56\xb9\x04\x48\xa2\x05\x56\xd8\x07\x5a";
  }
  function font_right_middle_bracket() internal pure returns(bytes memory) {
    return "\x4d\x50\x60\xd8\x07\x51\xac\x75\xd8\xcf\x75\xb2\x51\x50\xf2\x8d\x57\xf2\x51\x07\x56\xc2\x06\x51\xf2\x65\x75\x2d\x66\x75\x48\x60\x60\x56\x60\x1c\x48\x60\x2d\x51\x50\xf2\x1c\x56\xf2\xcf\x05\x56\x40\x05\x51\xf2\x55\x03\xcf\x45\xde\x51\x50\xac\xb9\x54\x60\xb9\x04\x48\x09\x05\x56\x13\x05\x48\x5a\x05\x51\x75\x55\x13\x80\x55\x20\x51\x50\x8c\x2d\x55\x8c\x49\x05\x56\xe6\x05\x51\x8c\x65\x13\x9e\x65\x29\x51\x50\xb0\x40\x56\xd5\x49\x06\x51\xb0\x65\x51\x9e\x65\x68\x51\x50\x8c\x7e\x56\x8c\xac\x06\x56\x49\x07\x51\x8c\x75\x64\x80\x75\x71\x51\x50\x75\x7e\x57\x5a\x7e\x07\x48\x09\x05\x56\xd8\x07\x5a";
  }
  function font_tilde() internal pure returns(bytes memory) {
    return "\x4d\x50\x22\xcd\x06\x56\x8f\x06\x51\x22\x65\x4f\x46\x65\x2c\x51\x50\x6b\x09\x56\xac\x09\x06\x48\x8f\x06\x51\x9f\x66\x09\xa7\x66\x00\x51\x60\xb0\xf6\x65\xb0\xe6\x05\x56\xa8\x05\x48\x13\x07\x56\xe6\x05\x51\x13\x67\x26\xef\x66\x49\x51\x60\xcb\x6c\x66\x89\x6c\x06\x48\xa6\x05\x51\x96\x65\x6c\x8e\x65\x75\x51\x50\x85\x7e\x56\x85\x8f\x06\x56\xcd\x06\x5a";
  }

  function _register(uint _key, function() view returns (bytes memory) _function, uint _width) internal {
    fonts[_key] = _function;
    widths[_key - 0x20] = uint16(_width);
  }

  function _registerAll() internal {
    widths[0] = 208; // space
    _register(0x21, font_ex, 256);
    _register(0x22, font_double_quote, 367);
    _register(0x23, font_sharp, 705);
    _register(0x24, font_dallar, 636);
    _register(0x25, font_percent, 909);
    _register(0x26, font_and, 877);
    _register(0x27, font_apostrophe, 205);
    _register(0x28, font_brackets_left, 339);
    _register(0x29, font_brackets_right, 339);
    _register(0x2A, font_asterisk, 455);
    _register(0x2B, font_plus, 565);
    _register(0x2C, font_comma, 242);
    _register(0x2D, font_hyphen, 329);
    _register(0x2E, font_period, 241);
    _register(0x2F, font_slash, 520);
    _register(0x30, font_0, 876);
    _register(0x31, font_1, 381);
    _register(0x32, font_2, 732);
    _register(0x33, font_3, 732);
    _register(0x34, font_4, 823);
    _register(0x35, font_5, 752);
    _register(0x36, font_6, 806);
    _register(0x37, font_7, 734);
    _register(0x38, font_8, 864);
    _register(0x39, font_9, 806);
    _register(0x3A, font_colon, 241);
    _register(0x3B, font_semi_colon, 242);
    _register(0x3C, font_LT, 646);
    _register(0x3D, font_equal, 565);
    _register(0x3E, font_big, 646);
    _register(0x3F, font_question, 610);
    _register(0x40, font_at, 1009);
    _register(0x41, font_A, 777);
    _register(0x42, font_B, 824);
    _register(0x43, font_C, 715);
    _register(0x44, font_D, 807);
    _register(0x45, font_E, 763);
    _register(0x46, font_F, 746);
    _register(0x47, font_G, 791);
    _register(0x48, font_H, 823);
    _register(0x49, font_I, 256);
    _register(0x4A, font_J, 670);
    _register(0x4B, font_K, 778);
    _register(0x4C, font_L, 668);
    _register(0x4D, font_M, 917);
    _register(0x4E, font_N, 826);
    _register(0x4F, font_O, 901);
    _register(0x50, font_P, 796);
    _register(0x51, font_Q, 901);
    _register(0x52, font_R, 813);
    _register(0x53, font_S, 771);
    _register(0x54, font_T, 828);
    _register(0x55, font_U, 823);
    _register(0x56, font_V, 760);
    _register(0x57, font_W, 934);
    _register(0x58, font_X, 795);
    _register(0x59, font_Y, 783);
    _register(0x5A, font_Z, 707);
    _register(0x5B, font_left_bracket, 300);
    _register(0x5C, font_back_slash, 520);
    _register(0x5D, font_right_bracket, 300);
    _register(0x5E, font_caret, 598);
    _register(0x5F, font_underline, 594);
    _register(0x60, font_grave, 407);
    _register(0x61, font_a, 662);
    _register(0x62, font_b, 635);
    _register(0x63, font_c, 584);
    _register(0x64, font_d, 635);
    _register(0x65, font_e, 670);
    _register(0x66, font_f, 483);
    _register(0x67, font_g, 631);
    _register(0x68, font_h, 617);
    _register(0x69, font_i, 218);
    _register(0x6A, font_j, 211);
    _register(0x6B, font_k, 652);
    _register(0x6C, font_l, 218);
    _register(0x6D, font_m, 804);
    _register(0x6E, font_n, 617);
    _register(0x6F, font_o, 702);
    _register(0x70, font_p, 635);
    _register(0x71, font_q, 635);
    _register(0x72, font_r, 549);
    _register(0x73, font_s, 636);
    _register(0x74, font_t, 479);
    _register(0x75, font_u, 613);
    _register(0x76, font_v, 606);
    _register(0x77, font_w, 747);
    _register(0x78, font_x, 624);
    _register(0x79, font_y, 625);
    _register(0x7A, font_z, 596);
    _register(0x7B, font_left_middle_bracket, 387);
    _register(0x7C, font_vertical, 222);
    _register(0x7D, font_right_middle_bracket, 387);
    _register(0x7E, font_tilde, 565);

  }

  constructor(address _designer) {
    designer = _designer;
    _registerAll();
  }

  function height() external pure override returns (uint) {
    return fixed_height;
  }

  function baseline() external pure override returns (uint) {
    return fixed_baseline;
  }

  function widthOf(string memory _char) external view override returns (uint width) {
    uint key = uint(uint8(bytes(_char)[0]));
    if (key >= 0x20 && key < 0x7F) {
      width = uint(widths[key - 0x20]);
    }
  }

  function pathOf(string memory _char) external view override returns (bytes memory path) {
    uint key = uint(uint8(bytes(_char)[0]));
    if (key >= 0x21 && key < 0x7F) {
      path = fonts[key]();
    }
  }

  function processPayout() external payable override {
    address payable payableTo = payable(designer);
    payableTo.transfer(msg.value);
    emit Payout('ZenDots', payableTo, msg.value);
  }
}

// SPDX-License-Identifier: MIT

/*
 * This is a part of fully-on-chain.sol, a npm package that allows developers
 * to create fully on-chain generative art.
 *
 * Created by Satoshi Nakajima (@snakajima)
 */

pragma solidity ^0.8.6;

interface IFontProvider {
  function height() external view returns (uint);

  function baseline() external view returns (uint);

  function widthOf(string memory _char) external view returns (uint);

  function pathOf(string memory _char) external view returns (bytes memory);

  /**
   * This function processes the royalty payment from the decentralized autonomous marketplace.
   */
  function processPayout() external payable;

  event Payout(string providerKey, address payable to, uint256 amount);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}