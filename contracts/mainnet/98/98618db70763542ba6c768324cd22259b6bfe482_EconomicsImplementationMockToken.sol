// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.19 <0.9.0;

import "forge-std/Test.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../../../contracts/FuelHolder.sol";
import "../../../contracts/interfaces/IFuelHolder.sol";

contract EconomicsImplementationMockToken is Test {
    IERC20 public fuelToken;
    uint256 public totalToppedUpCount;
    uint256 public totalRouterCount;
    uint256 public amountOfTimesRouted;
    IFuelHolder public fuelHolder;
    address public fuelHolderAddress;

    uint256 public getPriceAlways;

    uint256 public fuelTokenMultiplier = 1e18;

    function setFuelTokenMultiplier(uint256 _multiplier) external {
        fuelTokenMultiplier = _multiplier;
    }

    constructor(address _fuelToken) {
        fuelToken = IERC20(_fuelToken);
        _deployNewFuelHolder();
        getPriceAlways = 2 * 1e18;
    }

    function setPriceOfFuel(uint256 _price) external {
        getPriceAlways = _price;
    }

    function routeFuelRequest(
        uint256 _usdAmount,
        address _fuelDestination
    ) external returns (uint256 totalFuelSpendTokens_) {
        uint256 calcAmount_ = (_usdAmount * fuelTokenMultiplier) / getPriceAlways;
        console.log("calcAmount_", calcAmount_);
        console.log("destination address", _fuelDestination);
        fuelHolder.transferTokensOut(_fuelDestination, calcAmount_);
        // fuelToken.transfer(_fuelDestination, calcAmount_);
        totalRouterCount += _usdAmount;
        amountOfTimesRouted += 1;
    }

    function deployNewFuelHolder() external returns (address newHolder_) {
        newHolder_ = _deployNewFuelHolder();
    }

    function _deployNewFuelHolder() internal returns (address newHolder_) {
        newHolder_ = address(new FuelHolder(address(fuelToken)));
        fuelHolderAddress = newHolder_;
        fuelHolder = IFuelHolder(newHolder_);
    }

    function deleteRouterCounts() external {
        totalRouterCount = 0;
        amountOfTimesRouted = 0;
    }

    function topUpMock(uint256 _amount) public {
        // token needs to be in this contract
        fuelToken.transfer(fuelHolderAddress, _amount);
        totalToppedUpCount += _amount;
    }
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import {CommonBase} from "./Common.sol";
import "ds-test/test.sol";
// forgefmt: disable-next-line
import {console, console2, StdAssertions, StdChains, StdCheats, stdError, stdJson, stdMath, StdStorage, stdStorage, StdUtils, Vm} from "./Components.sol";

abstract contract TestBase is CommonBase {}

abstract contract Test is DSTest, StdAssertions, StdChains, StdCheats, StdUtils, TestBase {}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./interfaces/IFuelHolder.sol";

contract FuelHolder is IFuelHolder {
    IERC20 public immutable fuelToken;
    address public immutable economicsImplementation;

    constructor(address _tokenAddres) {
        fuelToken = IERC20(_tokenAddres);
        economicsImplementation = msg.sender;
    }

    modifier onlyEconomicsImplementation() {
        require(msg.sender == economicsImplementation, "FuelHodler: Only economics implementation allowed");
        _;
    }

    /**
     * @param _to address fuel token are transferred to
     * @param _amount amount of fueltokens transferred
     */
    function transferTokensOut(address _to, uint256 _amount) external onlyEconomicsImplementation {
        emit TransferTokensOut(_to, _amount);
        fuelToken.transfer(_to, _amount);
    }

    /**
     * @param _from address fuel token are transferred from
     * @param _amount amount of fueltokens transferred
     */
    function transferTokensIn(address _from, uint256 _amount) external onlyEconomicsImplementation {
        emit TransferTokensIn(_from, _amount);
        fuelToken.transferFrom(_from, address(this), _amount);
    }
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.9.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IFuelHolder {
    event TransferTokensOut(address indexed _to, uint256 _amount);
    event TransferTokensIn(address indexed _from, uint256 _amount);

    function fuelToken() external view returns (IERC20);

    function economicsImplementation() external view returns (address);

    function transferTokensIn(address _from, uint256 _amount) external;

    function transferTokensOut(address _to, uint256 _amount) external;
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import {StdStorage, Vm} from "./Components.sol";

abstract contract CommonBase {
	// Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.
	address internal constant VM_ADDRESS =
		address(uint160(uint256(keccak256("hevm cheat code"))));

	// console.sol and console2.sol work by executing a staticcall to this address.
	address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;

	// Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.
	address internal constant DEFAULT_SENDER =
		address(uint160(uint256(keccak256("foundry default caller"))));

	// Address of the test contract, deployed by the DEFAULT_SENDER.
	address internal constant DEFAULT_TEST_CONTRACT =
		0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;

	// Create2 factory used by scripts when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.
	address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;

	uint256 internal constant UINT256_MAX =
		115792089237316195423570985008687907853269984665640564039457584007913129639935;

	Vm internal constant vm = Vm(VM_ADDRESS);

	StdStorage internal stdstore;
}

// SPDX-License-Identifier: GPL-3.0-or-later

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

pragma solidity >=0.5.0;

contract DSTest {
	event log(string);
	event logs(bytes);

	event log_address(address);
	event log_bytes32(bytes32);
	event log_int(int);
	event log_uint(uint);
	event log_bytes(bytes);
	event log_string(string);

	event log_named_address(string key, address val);
	event log_named_bytes32(string key, bytes32 val);
	event log_named_decimal_int(string key, int val, uint decimals);
	event log_named_decimal_uint(string key, uint val, uint decimals);
	event log_named_int(string key, int val);
	event log_named_uint(string key, uint val);
	event log_named_bytes(string key, bytes val);
	event log_named_string(string key, string val);

	bool public IS_TEST = true;
	bool private _failed;

	address constant HEVM_ADDRESS =
		address(bytes20(uint160(uint256(keccak256("hevm cheat code")))));

	modifier mayRevert() {
		_;
	}
	modifier testopts(string memory) {
		_;
	}

	function failed() public returns (bool) {
		if (_failed) {
			return _failed;
		} else {
			bool globalFailed = false;
			if (hasHEVMContext()) {
				(, bytes memory retdata) = HEVM_ADDRESS.call(
					abi.encodePacked(
						bytes4(keccak256("load(address,bytes32)")),
						abi.encode(HEVM_ADDRESS, bytes32("failed"))
					)
				);
				globalFailed = abi.decode(retdata, (bool));
			}
			return globalFailed;
		}
	}

	function fail() internal {
		if (hasHEVMContext()) {
			(bool status, ) = HEVM_ADDRESS.call(
				abi.encodePacked(
					bytes4(keccak256("store(address,bytes32,bytes32)")),
					abi.encode(
						HEVM_ADDRESS,
						bytes32("failed"),
						bytes32(uint256(0x01))
					)
				)
			);
			status; // Silence compiler warnings
		}
		_failed = true;
	}

	function hasHEVMContext() internal view returns (bool) {
		uint256 hevmCodeSize = 0;
		assembly {
			hevmCodeSize := extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)
		}
		return hevmCodeSize > 0;
	}

	modifier logs_gas() {
		uint startGas = gasleft();
		_;
		uint endGas = gasleft();
		emit log_named_uint("gas", startGas - endGas);
	}

	function assertTrue(bool condition) internal {
		if (!condition) {
			emit log("Error: Assertion Failed");
			fail();
		}
	}

	function assertTrue(bool condition, string memory err) internal {
		if (!condition) {
			emit log_named_string("Error", err);
			assertTrue(condition);
		}
	}

	function assertEq(address a, address b) internal {
		if (a != b) {
			emit log("Error: a == b not satisfied [address]");
			emit log_named_address("  Expected", b);
			emit log_named_address("    Actual", a);
			fail();
		}
	}

	function assertEq(address a, address b, string memory err) internal {
		if (a != b) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function assertEq(bytes32 a, bytes32 b) internal {
		if (a != b) {
			emit log("Error: a == b not satisfied [bytes32]");
			emit log_named_bytes32("  Expected", b);
			emit log_named_bytes32("    Actual", a);
			fail();
		}
	}

	function assertEq(bytes32 a, bytes32 b, string memory err) internal {
		if (a != b) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function assertEq32(bytes32 a, bytes32 b) internal {
		assertEq(a, b);
	}

	function assertEq32(bytes32 a, bytes32 b, string memory err) internal {
		assertEq(a, b, err);
	}

	function assertEq(int a, int b) internal {
		if (a != b) {
			emit log("Error: a == b not satisfied [int]");
			emit log_named_int("  Expected", b);
			emit log_named_int("    Actual", a);
			fail();
		}
	}

	function assertEq(int a, int b, string memory err) internal {
		if (a != b) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function assertEq(uint a, uint b) internal {
		if (a != b) {
			emit log("Error: a == b not satisfied [uint]");
			emit log_named_uint("  Expected", b);
			emit log_named_uint("    Actual", a);
			fail();
		}
	}

	function assertEq(uint a, uint b, string memory err) internal {
		if (a != b) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function assertEqDecimal(int a, int b, uint decimals) internal {
		if (a != b) {
			emit log("Error: a == b not satisfied [decimal int]");
			emit log_named_decimal_int("  Expected", b, decimals);
			emit log_named_decimal_int("    Actual", a, decimals);
			fail();
		}
	}

	function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {
		if (a != b) {
			emit log_named_string("Error", err);
			assertEqDecimal(a, b, decimals);
		}
	}

	function assertEqDecimal(uint a, uint b, uint decimals) internal {
		if (a != b) {
			emit log("Error: a == b not satisfied [decimal uint]");
			emit log_named_decimal_uint("  Expected", b, decimals);
			emit log_named_decimal_uint("    Actual", a, decimals);
			fail();
		}
	}

	function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {
		if (a != b) {
			emit log_named_string("Error", err);
			assertEqDecimal(a, b, decimals);
		}
	}

	function assertGt(uint a, uint b) internal {
		if (a <= b) {
			emit log("Error: a > b not satisfied [uint]");
			emit log_named_uint("  Value a", a);
			emit log_named_uint("  Value b", b);
			fail();
		}
	}

	function assertGt(uint a, uint b, string memory err) internal {
		if (a <= b) {
			emit log_named_string("Error", err);
			assertGt(a, b);
		}
	}

	function assertGt(int a, int b) internal {
		if (a <= b) {
			emit log("Error: a > b not satisfied [int]");
			emit log_named_int("  Value a", a);
			emit log_named_int("  Value b", b);
			fail();
		}
	}

	function assertGt(int a, int b, string memory err) internal {
		if (a <= b) {
			emit log_named_string("Error", err);
			assertGt(a, b);
		}
	}

	function assertGtDecimal(int a, int b, uint decimals) internal {
		if (a <= b) {
			emit log("Error: a > b not satisfied [decimal int]");
			emit log_named_decimal_int("  Value a", a, decimals);
			emit log_named_decimal_int("  Value b", b, decimals);
			fail();
		}
	}

	function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {
		if (a <= b) {
			emit log_named_string("Error", err);
			assertGtDecimal(a, b, decimals);
		}
	}

	function assertGtDecimal(uint a, uint b, uint decimals) internal {
		if (a <= b) {
			emit log("Error: a > b not satisfied [decimal uint]");
			emit log_named_decimal_uint("  Value a", a, decimals);
			emit log_named_decimal_uint("  Value b", b, decimals);
			fail();
		}
	}

	function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {
		if (a <= b) {
			emit log_named_string("Error", err);
			assertGtDecimal(a, b, decimals);
		}
	}

	function assertGe(uint a, uint b) internal {
		if (a < b) {
			emit log("Error: a >= b not satisfied [uint]");
			emit log_named_uint("  Value a", a);
			emit log_named_uint("  Value b", b);
			fail();
		}
	}

	function assertGe(uint a, uint b, string memory err) internal {
		if (a < b) {
			emit log_named_string("Error", err);
			assertGe(a, b);
		}
	}

	function assertGe(int a, int b) internal {
		if (a < b) {
			emit log("Error: a >= b not satisfied [int]");
			emit log_named_int("  Value a", a);
			emit log_named_int("  Value b", b);
			fail();
		}
	}

	function assertGe(int a, int b, string memory err) internal {
		if (a < b) {
			emit log_named_string("Error", err);
			assertGe(a, b);
		}
	}

	function assertGeDecimal(int a, int b, uint decimals) internal {
		if (a < b) {
			emit log("Error: a >= b not satisfied [decimal int]");
			emit log_named_decimal_int("  Value a", a, decimals);
			emit log_named_decimal_int("  Value b", b, decimals);
			fail();
		}
	}

	function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {
		if (a < b) {
			emit log_named_string("Error", err);
			assertGeDecimal(a, b, decimals);
		}
	}

	function assertGeDecimal(uint a, uint b, uint decimals) internal {
		if (a < b) {
			emit log("Error: a >= b not satisfied [decimal uint]");
			emit log_named_decimal_uint("  Value a", a, decimals);
			emit log_named_decimal_uint("  Value b", b, decimals);
			fail();
		}
	}

	function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {
		if (a < b) {
			emit log_named_string("Error", err);
			assertGeDecimal(a, b, decimals);
		}
	}

	function assertLt(uint a, uint b) internal {
		if (a >= b) {
			emit log("Error: a < b not satisfied [uint]");
			emit log_named_uint("  Value a", a);
			emit log_named_uint("  Value b", b);
			fail();
		}
	}

	function assertLt(uint a, uint b, string memory err) internal {
		if (a >= b) {
			emit log_named_string("Error", err);
			assertLt(a, b);
		}
	}

	function assertLt(int a, int b) internal {
		if (a >= b) {
			emit log("Error: a < b not satisfied [int]");
			emit log_named_int("  Value a", a);
			emit log_named_int("  Value b", b);
			fail();
		}
	}

	function assertLt(int a, int b, string memory err) internal {
		if (a >= b) {
			emit log_named_string("Error", err);
			assertLt(a, b);
		}
	}

	function assertLtDecimal(int a, int b, uint decimals) internal {
		if (a >= b) {
			emit log("Error: a < b not satisfied [decimal int]");
			emit log_named_decimal_int("  Value a", a, decimals);
			emit log_named_decimal_int("  Value b", b, decimals);
			fail();
		}
	}

	function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {
		if (a >= b) {
			emit log_named_string("Error", err);
			assertLtDecimal(a, b, decimals);
		}
	}

	function assertLtDecimal(uint a, uint b, uint decimals) internal {
		if (a >= b) {
			emit log("Error: a < b not satisfied [decimal uint]");
			emit log_named_decimal_uint("  Value a", a, decimals);
			emit log_named_decimal_uint("  Value b", b, decimals);
			fail();
		}
	}

	function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {
		if (a >= b) {
			emit log_named_string("Error", err);
			assertLtDecimal(a, b, decimals);
		}
	}

	function assertLe(uint a, uint b) internal {
		if (a > b) {
			emit log("Error: a <= b not satisfied [uint]");
			emit log_named_uint("  Value a", a);
			emit log_named_uint("  Value b", b);
			fail();
		}
	}

	function assertLe(uint a, uint b, string memory err) internal {
		if (a > b) {
			emit log_named_string("Error", err);
			assertLe(a, b);
		}
	}

	function assertLe(int a, int b) internal {
		if (a > b) {
			emit log("Error: a <= b not satisfied [int]");
			emit log_named_int("  Value a", a);
			emit log_named_int("  Value b", b);
			fail();
		}
	}

	function assertLe(int a, int b, string memory err) internal {
		if (a > b) {
			emit log_named_string("Error", err);
			assertLe(a, b);
		}
	}

	function assertLeDecimal(int a, int b, uint decimals) internal {
		if (a > b) {
			emit log("Error: a <= b not satisfied [decimal int]");
			emit log_named_decimal_int("  Value a", a, decimals);
			emit log_named_decimal_int("  Value b", b, decimals);
			fail();
		}
	}

	function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {
		if (a > b) {
			emit log_named_string("Error", err);
			assertLeDecimal(a, b, decimals);
		}
	}

	function assertLeDecimal(uint a, uint b, uint decimals) internal {
		if (a > b) {
			emit log("Error: a <= b not satisfied [decimal uint]");
			emit log_named_decimal_uint("  Value a", a, decimals);
			emit log_named_decimal_uint("  Value b", b, decimals);
			fail();
		}
	}

	function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {
		if (a > b) {
			emit log_named_string("Error", err);
			assertGeDecimal(a, b, decimals);
		}
	}

	function assertEq(string memory a, string memory b) internal {
		if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {
			emit log("Error: a == b not satisfied [string]");
			emit log_named_string("  Expected", b);
			emit log_named_string("    Actual", a);
			fail();
		}
	}

	function assertEq(string memory a, string memory b, string memory err) internal {
		if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {
		ok = true;
		if (a.length == b.length) {
			for (uint i = 0; i < a.length; i++) {
				if (a[i] != b[i]) {
					ok = false;
				}
			}
		} else {
			ok = false;
		}
	}

	function assertEq0(bytes memory a, bytes memory b) internal {
		if (!checkEq0(a, b)) {
			emit log("Error: a == b not satisfied [bytes]");
			emit log_named_bytes("  Expected", b);
			emit log_named_bytes("    Actual", a);
			fail();
		}
	}

	function assertEq0(bytes memory a, bytes memory b, string memory err) internal {
		if (!checkEq0(a, b)) {
			emit log_named_string("Error", err);
			assertEq0(a, b);
		}
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import "./console.sol";
import "./console2.sol";
import "./StdAssertions.sol";
import "./StdChains.sol";
import "./StdCheats.sol";
import "./StdError.sol";
import "./StdJson.sol";
import "./StdMath.sol";
import "./StdStorage.sol";
import "./StdUtils.sol";
import "./Vm.sol";

// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

library console {
	address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);

	function _sendLogPayload(bytes memory payload) private view {
		uint256 payloadLength = payload.length;
		address consoleAddress = CONSOLE_ADDRESS;
		/// @solidity memory-safe-assembly
		assembly {
			let payloadStart := add(payload, 32)
			let r := staticcall(
				gas(),
				consoleAddress,
				payloadStart,
				payloadLength,
				0,
				0
			)
		}
	}

	function log() internal view {
		_sendLogPayload(abi.encodeWithSignature("log()"));
	}

	function logInt(int p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(int)", p0));
	}

	function logUint(uint p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
	}

	function logString(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function logBool(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function logAddress(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function logBytes(bytes memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
	}

	function logBytes1(bytes1 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
	}

	function logBytes2(bytes2 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
	}

	function logBytes3(bytes3 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
	}

	function logBytes4(bytes4 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
	}

	function logBytes5(bytes5 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
	}

	function logBytes6(bytes6 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
	}

	function logBytes7(bytes7 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
	}

	function logBytes8(bytes8 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
	}

	function logBytes9(bytes9 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
	}

	function logBytes10(bytes10 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
	}

	function logBytes11(bytes11 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
	}

	function logBytes12(bytes12 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
	}

	function logBytes13(bytes13 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
	}

	function logBytes14(bytes14 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
	}

	function logBytes15(bytes15 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
	}

	function logBytes16(bytes16 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
	}

	function logBytes17(bytes17 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
	}

	function logBytes18(bytes18 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
	}

	function logBytes19(bytes19 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
	}

	function logBytes20(bytes20 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
	}

	function logBytes21(bytes21 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
	}

	function logBytes22(bytes22 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
	}

	function logBytes23(bytes23 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
	}

	function logBytes24(bytes24 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
	}

	function logBytes25(bytes25 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
	}

	function logBytes26(bytes26 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
	}

	function logBytes27(bytes27 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
	}

	function logBytes28(bytes28 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
	}

	function logBytes29(bytes29 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
	}

	function logBytes30(bytes30 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
	}

	function logBytes31(bytes31 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
	}

	function logBytes32(bytes32 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
	}

	function log(uint p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
	}

	function log(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function log(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function log(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function log(uint p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
	}

	function log(uint p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
	}

	function log(uint p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
	}

	function log(uint p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
	}

	function log(string memory p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
	}

	function log(string memory p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
	}

	function log(string memory p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
	}

	function log(string memory p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
	}

	function log(bool p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
	}

	function log(bool p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
	}

	function log(bool p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
	}

	function log(bool p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
	}

	function log(address p0, uint p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
	}

	function log(address p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
	}

	function log(address p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
	}

	function log(address p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
	}

	function log(uint p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
	}

	function log(uint p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
	}

	function log(uint p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
	}

	function log(uint p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
	}

	function log(uint p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
	}

	function log(uint p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
	}

	function log(uint p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
	}

	function log(uint p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
	}

	function log(uint p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
	}

	function log(uint p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
	}

	function log(uint p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
	}

	function log(uint p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
	}

	function log(uint p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
	}

	function log(string memory p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
	}

	function log(string memory p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
	}

	function log(string memory p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
	}

	function log(string memory p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
	}

	function log(string memory p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
	}

	function log(bool p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
	}

	function log(bool p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
	}

	function log(bool p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
	}

	function log(bool p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
	}

	function log(bool p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
	}

	function log(bool p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
	}

	function log(bool p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
	}

	function log(bool p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
	}

	function log(bool p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
	}

	function log(bool p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
	}

	function log(bool p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
	}

	function log(bool p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
	}

	function log(address p0, uint p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
	}

	function log(address p0, uint p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
	}

	function log(address p0, uint p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
	}

	function log(address p0, uint p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
	}

	function log(address p0, string memory p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
	}

	function log(address p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
	}

	function log(address p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
	}

	function log(address p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
	}

	function log(address p0, bool p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
	}

	function log(address p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
	}

	function log(address p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
	}

	function log(address p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
	}

	function log(address p0, address p1, uint p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
	}

	function log(address p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
	}

	function log(address p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
	}

	function log(address p0, address p1, address p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,address)", p0, p1, p2)
		);
	}

	function log(uint p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		string memory p2,
		address p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		address p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,string,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(
		string memory p0,
		address p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(bool p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(
		address p0,
		string memory p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, bool p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, uint p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, uint p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, uint p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, uint p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, string memory p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,string,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, bool p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, address p2, uint p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should
/// use `int256` and `uint256`. This modified version fixes that. This version is recommended
/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in
/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.
/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178
library console2 {
	address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);

	function _sendLogPayload(bytes memory payload) private view {
		uint256 payloadLength = payload.length;
		address consoleAddress = CONSOLE_ADDRESS;
		/// @solidity memory-safe-assembly
		assembly {
			let payloadStart := add(payload, 32)
			let r := staticcall(
				gas(),
				consoleAddress,
				payloadStart,
				payloadLength,
				0,
				0
			)
		}
	}

	function log() internal view {
		_sendLogPayload(abi.encodeWithSignature("log()"));
	}

	function logInt(int256 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(int256)", p0));
	}

	function logUint(uint256 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
	}

	function logString(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function logBool(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function logAddress(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function logBytes(bytes memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
	}

	function logBytes1(bytes1 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
	}

	function logBytes2(bytes2 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
	}

	function logBytes3(bytes3 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
	}

	function logBytes4(bytes4 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
	}

	function logBytes5(bytes5 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
	}

	function logBytes6(bytes6 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
	}

	function logBytes7(bytes7 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
	}

	function logBytes8(bytes8 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
	}

	function logBytes9(bytes9 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
	}

	function logBytes10(bytes10 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
	}

	function logBytes11(bytes11 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
	}

	function logBytes12(bytes12 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
	}

	function logBytes13(bytes13 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
	}

	function logBytes14(bytes14 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
	}

	function logBytes15(bytes15 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
	}

	function logBytes16(bytes16 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
	}

	function logBytes17(bytes17 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
	}

	function logBytes18(bytes18 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
	}

	function logBytes19(bytes19 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
	}

	function logBytes20(bytes20 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
	}

	function logBytes21(bytes21 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
	}

	function logBytes22(bytes22 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
	}

	function logBytes23(bytes23 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
	}

	function logBytes24(bytes24 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
	}

	function logBytes25(bytes25 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
	}

	function logBytes26(bytes26 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
	}

	function logBytes27(bytes27 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
	}

	function logBytes28(bytes28 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
	}

	function logBytes29(bytes29 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
	}

	function logBytes30(bytes30 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
	}

	function logBytes31(bytes31 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
	}

	function logBytes32(bytes32 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
	}

	function log(uint256 p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256)", p0));
	}

	function log(string memory p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string)", p0));
	}

	function log(bool p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
	}

	function log(address p0) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address)", p0));
	}

	function log(uint256 p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256)", p0, p1));
	}

	function log(uint256 p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string)", p0, p1));
	}

	function log(uint256 p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool)", p0, p1));
	}

	function log(uint256 p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address)", p0, p1));
	}

	function log(string memory p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256)", p0, p1));
	}

	function log(string memory p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
	}

	function log(string memory p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
	}

	function log(string memory p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
	}

	function log(bool p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256)", p0, p1));
	}

	function log(bool p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
	}

	function log(bool p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
	}

	function log(bool p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
	}

	function log(address p0, uint256 p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256)", p0, p1));
	}

	function log(address p0, string memory p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
	}

	function log(address p0, bool p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
	}

	function log(address p0, address p1) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
	}

	function log(uint256 p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,uint256)", p0, p1, p2)
		);
	}

	function log(uint256 p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,string)", p0, p1, p2));
	}

	function log(uint256 p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,uint256,bool)", p0, p1, p2));
	}

	function log(uint256 p0, uint256 p1, address p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,address)", p0, p1, p2)
		);
	}

	function log(uint256 p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,uint256)", p0, p1, p2));
	}

	function log(uint256 p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,string)", p0, p1, p2));
	}

	function log(uint256 p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,bool)", p0, p1, p2));
	}

	function log(uint256 p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,string,address)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,uint256)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,string)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,bool)", p0, p1, p2));
	}

	function log(uint256 p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,bool,address)", p0, p1, p2));
	}

	function log(uint256 p0, address p1, uint256 p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,uint256)", p0, p1, p2)
		);
	}

	function log(uint256 p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,string)", p0, p1, p2));
	}

	function log(uint256 p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(uint256,address,bool)", p0, p1, p2));
	}

	function log(uint256 p0, address p1, address p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,address)", p0, p1, p2)
		);
	}

	function log(string memory p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,uint256)", p0, p1, p2));
	}

	function log(string memory p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,string)", p0, p1, p2));
	}

	function log(string memory p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,bool)", p0, p1, p2));
	}

	function log(string memory p0, uint256 p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,uint256,address)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,uint256)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
	}

	function log(string memory p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint256)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
	}

	function log(string memory p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
	}

	function log(string memory p0, address p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,uint256)", p0, p1, p2));
	}

	function log(string memory p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
	}

	function log(string memory p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
	}

	function log(string memory p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,uint256)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,string)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,bool)", p0, p1, p2));
	}

	function log(bool p0, uint256 p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,uint256,address)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint256)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
	}

	function log(bool p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
	}

	function log(bool p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint256)", p0, p1, p2));
	}

	function log(bool p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
	}

	function log(bool p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
	}

	function log(bool p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
	}

	function log(bool p0, address p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint256)", p0, p1, p2));
	}

	function log(bool p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
	}

	function log(bool p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
	}

	function log(bool p0, address p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
	}

	function log(address p0, uint256 p1, uint256 p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,uint256)", p0, p1, p2)
		);
	}

	function log(address p0, uint256 p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,string)", p0, p1, p2));
	}

	function log(address p0, uint256 p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,uint256,bool)", p0, p1, p2));
	}

	function log(address p0, uint256 p1, address p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,address)", p0, p1, p2)
		);
	}

	function log(address p0, string memory p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,uint256)", p0, p1, p2));
	}

	function log(address p0, string memory p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
	}

	function log(address p0, string memory p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
	}

	function log(address p0, string memory p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
	}

	function log(address p0, bool p1, uint256 p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint256)", p0, p1, p2));
	}

	function log(address p0, bool p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
	}

	function log(address p0, bool p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
	}

	function log(address p0, bool p1, address p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
	}

	function log(address p0, address p1, uint256 p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,uint256)", p0, p1, p2)
		);
	}

	function log(address p0, address p1, string memory p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
	}

	function log(address p0, address p1, bool p2) internal view {
		_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
	}

	function log(address p0, address p1, address p2) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,address)", p0, p1, p2)
		);
	}

	function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,string,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,uint256,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,uint256,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(
		uint256 p0,
		string memory p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,string,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,uint256,uint256)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,uint256,address)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,address,uint256)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,string,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(uint256 p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(uint256,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(uint256 p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(uint256,address,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(
		string memory p0,
		uint256 p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,uint256,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,uint256,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,string,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		uint256 p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,string,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		string memory p2,
		uint256 p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		string memory p2,
		address p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,string,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(
		string memory p0,
		string memory p1,
		address p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,string,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint256,uint256)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,uint256,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,uint256)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(
		string memory p0,
		address p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(string memory p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(string memory p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(string,address,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,uint256,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,uint256,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,address,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,uint256,address,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint256,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,uint256,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint256,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,uint256,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint256,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,uint256,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,uint256)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(bool p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,string,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, uint256 p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,uint256,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, uint256 p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,uint256,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(
		address p0,
		string memory p1,
		string memory p2,
		string memory p3
	) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, string memory p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, string memory p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,string,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, bool p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint256,uint256)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint256,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,uint256,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,uint256)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,uint256)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, bool p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, uint256 p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,uint256,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, uint256 p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,uint256,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, uint256 p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,uint256,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, uint256 p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,uint256,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, string memory p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,string,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, string memory p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,string,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, string memory p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, string memory p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,string,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, bool p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,uint256)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, bool p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, bool p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, bool p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, address p2, uint256 p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,address,uint256)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, address p2, string memory p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,address,string)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}

	function log(address p0, address p1, address p2, bool p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3)
		);
	}

	function log(address p0, address p1, address p2, address p3) internal view {
		_sendLogPayload(
			abi.encodeWithSignature(
				"log(address,address,address,address)",
				p0,
				p1,
				p2,
				p3
			)
		);
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import "ds-test/test.sol";
import "./StdMath.sol";

abstract contract StdAssertions is DSTest {
	event log_array(uint256[] val);
	event log_array(int256[] val);
	event log_array(address[] val);
	event log_named_array(string key, uint256[] val);
	event log_named_array(string key, int256[] val);
	event log_named_array(string key, address[] val);

	function fail(string memory err) internal virtual {
		emit log_named_string("Error", err);
		fail();
	}

	function assertFalse(bool data) internal virtual {
		assertTrue(!data);
	}

	function assertFalse(bool data, string memory err) internal virtual {
		assertTrue(!data, err);
	}

	function assertEq(bool a, bool b) internal virtual {
		if (a != b) {
			emit log("Error: a == b not satisfied [bool]");
			emit log_named_string("  Expected", b ? "true" : "false");
			emit log_named_string("    Actual", a ? "true" : "false");
			fail();
		}
	}

	function assertEq(bool a, bool b, string memory err) internal virtual {
		if (a != b) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function assertEq(bytes memory a, bytes memory b) internal virtual {
		assertEq0(a, b);
	}

	function assertEq(bytes memory a, bytes memory b, string memory err) internal virtual {
		assertEq0(a, b, err);
	}

	function assertEq(uint256[] memory a, uint256[] memory b) internal virtual {
		if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
			emit log("Error: a == b not satisfied [uint[]]");
			emit log_named_array("  Expected", b);
			emit log_named_array("    Actual", a);
			fail();
		}
	}

	function assertEq(int256[] memory a, int256[] memory b) internal virtual {
		if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
			emit log("Error: a == b not satisfied [int[]]");
			emit log_named_array("  Expected", b);
			emit log_named_array("    Actual", a);
			fail();
		}
	}

	function assertEq(address[] memory a, address[] memory b) internal virtual {
		if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
			emit log("Error: a == b not satisfied [address[]]");
			emit log_named_array("  Expected", b);
			emit log_named_array("    Actual", a);
			fail();
		}
	}

	function assertEq(
		uint256[] memory a,
		uint256[] memory b,
		string memory err
	) internal virtual {
		if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function assertEq(
		int256[] memory a,
		int256[] memory b,
		string memory err
	) internal virtual {
		if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	function assertEq(
		address[] memory a,
		address[] memory b,
		string memory err
	) internal virtual {
		if (keccak256(abi.encode(a)) != keccak256(abi.encode(b))) {
			emit log_named_string("Error", err);
			assertEq(a, b);
		}
	}

	// Legacy helper
	function assertEqUint(uint256 a, uint256 b) internal virtual {
		assertEq(uint256(a), uint256(b));
	}

	function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta) internal virtual {
		uint256 delta = stdMath.delta(a, b);

		if (delta > maxDelta) {
			emit log("Error: a ~= b not satisfied [uint]");
			emit log_named_uint("  Expected", b);
			emit log_named_uint("    Actual", a);
			emit log_named_uint(" Max Delta", maxDelta);
			emit log_named_uint("     Delta", delta);
			fail();
		}
	}

	function assertApproxEqAbs(
		uint256 a,
		uint256 b,
		uint256 maxDelta,
		string memory err
	) internal virtual {
		uint256 delta = stdMath.delta(a, b);

		if (delta > maxDelta) {
			emit log_named_string("Error", err);
			assertApproxEqAbs(a, b, maxDelta);
		}
	}

	function assertApproxEqAbs(int256 a, int256 b, uint256 maxDelta) internal virtual {
		uint256 delta = stdMath.delta(a, b);

		if (delta > maxDelta) {
			emit log("Error: a ~= b not satisfied [int]");
			emit log_named_int("  Expected", b);
			emit log_named_int("    Actual", a);
			emit log_named_uint(" Max Delta", maxDelta);
			emit log_named_uint("     Delta", delta);
			fail();
		}
	}

	function assertApproxEqAbs(
		int256 a,
		int256 b,
		uint256 maxDelta,
		string memory err
	) internal virtual {
		uint256 delta = stdMath.delta(a, b);

		if (delta > maxDelta) {
			emit log_named_string("Error", err);
			assertApproxEqAbs(a, b, maxDelta);
		}
	}

	function assertApproxEqRel(
		uint256 a,
		uint256 b,
		uint256 maxPercentDelta // An 18 decimal fixed point number, where 1e18 == 100%
	) internal virtual {
		if (b == 0) return assertEq(a, b); // If the expected is 0, actual must be too.

		uint256 percentDelta = stdMath.percentDelta(a, b);

		if (percentDelta > maxPercentDelta) {
			emit log("Error: a ~= b not satisfied [uint]");
			emit log_named_uint("    Expected", b);
			emit log_named_uint("      Actual", a);
			emit log_named_decimal_uint(" Max % Delta", maxPercentDelta, 18);
			emit log_named_decimal_uint("     % Delta", percentDelta, 18);
			fail();
		}
	}

	function assertApproxEqRel(
		uint256 a,
		uint256 b,
		uint256 maxPercentDelta, // An 18 decimal fixed point number, where 1e18 == 100%
		string memory err
	) internal virtual {
		if (b == 0) return assertEq(a, b, err); // If the expected is 0, actual must be too.

		uint256 percentDelta = stdMath.percentDelta(a, b);

		if (percentDelta > maxPercentDelta) {
			emit log_named_string("Error", err);
			assertApproxEqRel(a, b, maxPercentDelta);
		}
	}

	function assertApproxEqRel(int256 a, int256 b, uint256 maxPercentDelta) internal virtual {
		if (b == 0) return assertEq(a, b); // If the expected is 0, actual must be too.

		uint256 percentDelta = stdMath.percentDelta(a, b);

		if (percentDelta > maxPercentDelta) {
			emit log("Error: a ~= b not satisfied [int]");
			emit log_named_int("    Expected", b);
			emit log_named_int("      Actual", a);
			emit log_named_decimal_uint(" Max % Delta", maxPercentDelta, 18);
			emit log_named_decimal_uint("     % Delta", percentDelta, 18);
			fail();
		}
	}

	function assertApproxEqRel(
		int256 a,
		int256 b,
		uint256 maxPercentDelta,
		string memory err
	) internal virtual {
		if (b == 0) return assertEq(a, b, err); // If the expected is 0, actual must be too.

		uint256 percentDelta = stdMath.percentDelta(a, b);

		if (percentDelta > maxPercentDelta) {
			emit log_named_string("Error", err);
			assertApproxEqRel(a, b, maxPercentDelta);
		}
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import "./Vm.sol";

abstract contract StdChains {
	VmSafe private constant vm =
		VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));

	struct Chain {
		// The chain name.
		string name;
		// The chain's Chain ID.
		uint256 chainId;
		// A default RPC endpoint for this chain.
		// NOTE: This default RPC URL is included for convenience to facilitate quick tests and
		// experimentation. Do not use this RPC URL for production test suites, CI, or other heavy
		// usage as you will be throttled and this is a disservice to others who need this endpoint.
		string rpcUrl;
	}

	bool private initialized;

	// Maps from a chain's key (matching the alias in the `foundry.toml` file) to chain data.
	mapping(string => Chain) private chains;
	// Maps from a chain ID to that chain's key name
	mapping(uint256 => string) private idToKey;

	function getChain(string memory key) internal virtual returns (Chain memory) {
		initialize();
		return chains[key];
	}

	function getChain(uint256 chainId) internal virtual returns (Chain memory) {
		initialize();
		return chains[idToKey[chainId]];
	}

	function setChain(
		string memory key,
		string memory name,
		uint256 chainId,
		string memory rpcUrl
	) internal virtual {
		require(
			keccak256(bytes(idToKey[chainId])) == keccak256(bytes("")) ||
				keccak256(bytes(idToKey[chainId])) == keccak256(bytes(key)),
			string(
				abi.encodePacked(
					"StdChains setChain(string,string,uint256,string): Chain ID ",
					vm.toString(chainId),
					' already used by "',
					idToKey[chainId],
					'".'
				)
			)
		);

		uint256 oldChainId = chains[key].chainId;
		delete idToKey[oldChainId];

		chains[key] = Chain(name, chainId, rpcUrl);
		idToKey[chainId] = key;
	}

	function initialize() private {
		if (initialized) return;

		setChain("anvil", "Anvil", 31337, "http://127.0.0.1:8545");
		setChain(
			"mainnet",
			"Mainnet",
			1,
			"https://mainnet.infura.io/v3/6770454bc6ea42c58aac12978531b93f"
		);
		setChain(
			"goerli",
			"Goerli",
			5,
			"https://goerli.infura.io/v3/6770454bc6ea42c58aac12978531b93f"
		);
		setChain("sepolia", "Sepolia", 11155111, "https://rpc.sepolia.dev");
		setChain("optimism", "Optimism", 10, "https://mainnet.optimism.io");
		setChain("optimism_goerli", "Optimism Goerli", 420, "https://goerli.optimism.io");
		setChain("arbitrum_one", "Arbitrum One", 42161, "https://arb1.arbitrum.io/rpc");
		setChain(
			"arbitrum_one_goerli",
			"Arbitrum One Goerli",
			421613,
			"https://goerli-rollup.arbitrum.io/rpc"
		);
		setChain("arbitrum_nova", "Arbitrum Nova", 42170, "https://nova.arbitrum.io/rpc");
		setChain("polygon", "Polygon", 137, "https://polygon-rpc.com");
		setChain(
			"polygon_mumbai",
			"Polygon Mumbai",
			80001,
			"https://rpc-mumbai.matic.today"
		);
		setChain("avalanche", "Avalanche", 43114, "https://api.avax.network/ext/bc/C/rpc");
		setChain(
			"avalanche_fuji",
			"Avalanche Fuji",
			43113,
			"https://api.avax-test.network/ext/bc/C/rpc"
		);
		setChain(
			"bnb_smart_chain",
			"BNB Smart Chain",
			56,
			"https://bsc-dataseed1.binance.org"
		);
		setChain(
			"bnb_smart_chain_testnet",
			"BNB Smart Chain Testnet",
			97,
			"https://data-seed-prebsc-1-s1.binance.org:8545"
		); // forgefmt: disable-line
		setChain("gnosis_chain", "Gnosis Chain", 100, "https://rpc.gnosischain.com");

		// Loop over RPC URLs in the config file to replace the default RPC URLs
		Vm.Rpc[] memory rpcs = vm.rpcUrlStructs();
		for (uint256 i = 0; i < rpcs.length; i++) {
			chains[rpcs[i].key].rpcUrl = rpcs[i].url;
		}

		initialized = true;
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

import "./StdStorage.sol";
import "./Vm.sol";

abstract contract StdCheatsSafe {
	VmSafe private constant vm =
		VmSafe(address(uint160(uint256(keccak256("hevm cheat code")))));

	// Data structures to parse Transaction objects from the broadcast artifact
	// that conform to EIP1559. The Raw structs is what is parsed from the JSON
	// and then converted to the one that is used by the user for better UX.

	struct RawTx1559 {
		string[] arguments;
		address contractAddress;
		string contractName;
		// json value name = function
		string functionSig;
		bytes32 hash;
		// json value name = tx
		RawTx1559Detail txDetail;
		// json value name = type
		string opcode;
	}

	struct RawTx1559Detail {
		AccessList[] accessList;
		bytes data;
		address from;
		bytes gas;
		bytes nonce;
		address to;
		bytes txType;
		bytes value;
	}

	struct Tx1559 {
		string[] arguments;
		address contractAddress;
		string contractName;
		string functionSig;
		bytes32 hash;
		Tx1559Detail txDetail;
		string opcode;
	}

	struct Tx1559Detail {
		AccessList[] accessList;
		bytes data;
		address from;
		uint256 gas;
		uint256 nonce;
		address to;
		uint256 txType;
		uint256 value;
	}

	// Data structures to parse Transaction objects from the broadcast artifact
	// that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON
	// and then converted to the one that is used by the user for better UX.

	struct TxLegacy {
		string[] arguments;
		address contractAddress;
		string contractName;
		string functionSig;
		string hash;
		string opcode;
		TxDetailLegacy transaction;
	}

	struct TxDetailLegacy {
		AccessList[] accessList;
		uint256 chainId;
		bytes data;
		address from;
		uint256 gas;
		uint256 gasPrice;
		bytes32 hash;
		uint256 nonce;
		bytes1 opcode;
		bytes32 r;
		bytes32 s;
		uint256 txType;
		address to;
		uint8 v;
		uint256 value;
	}

	struct AccessList {
		address accessAddress;
		bytes32[] storageKeys;
	}

	// Data structures to parse Receipt objects from the broadcast artifact.
	// The Raw structs is what is parsed from the JSON
	// and then converted to the one that is used by the user for better UX.

	struct RawReceipt {
		bytes32 blockHash;
		bytes blockNumber;
		address contractAddress;
		bytes cumulativeGasUsed;
		bytes effectiveGasPrice;
		address from;
		bytes gasUsed;
		RawReceiptLog[] logs;
		bytes logsBloom;
		bytes status;
		address to;
		bytes32 transactionHash;
		bytes transactionIndex;
	}

	struct Receipt {
		bytes32 blockHash;
		uint256 blockNumber;
		address contractAddress;
		uint256 cumulativeGasUsed;
		uint256 effectiveGasPrice;
		address from;
		uint256 gasUsed;
		ReceiptLog[] logs;
		bytes logsBloom;
		uint256 status;
		address to;
		bytes32 transactionHash;
		uint256 transactionIndex;
	}

	// Data structures to parse the entire broadcast artifact, assuming the
	// transactions conform to EIP1559.

	struct EIP1559ScriptArtifact {
		string[] libraries;
		string path;
		string[] pending;
		Receipt[] receipts;
		uint256 timestamp;
		Tx1559[] transactions;
		TxReturn[] txReturns;
	}

	struct RawEIP1559ScriptArtifact {
		string[] libraries;
		string path;
		string[] pending;
		RawReceipt[] receipts;
		TxReturn[] txReturns;
		uint256 timestamp;
		RawTx1559[] transactions;
	}

	struct RawReceiptLog {
		// json value = address
		address logAddress;
		bytes32 blockHash;
		bytes blockNumber;
		bytes data;
		bytes logIndex;
		bool removed;
		bytes32[] topics;
		bytes32 transactionHash;
		bytes transactionIndex;
		bytes transactionLogIndex;
	}

	struct ReceiptLog {
		// json value = address
		address logAddress;
		bytes32 blockHash;
		uint256 blockNumber;
		bytes data;
		uint256 logIndex;
		bytes32[] topics;
		uint256 transactionIndex;
		uint256 transactionLogIndex;
		bool removed;
	}

	struct TxReturn {
		string internalType;
		string value;
	}

	function assumeNoPrecompiles(address addr) internal virtual {
		// Assembly required since `block.chainid` was introduced in 0.8.0.
		uint256 chainId;
		assembly {
			chainId := chainid()
		}
		assumeNoPrecompiles(addr, chainId);
	}

	function assumeNoPrecompiles(address addr, uint256 chainId) internal virtual {
		// Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific
		// address), but the same rationale for excluding them applies so we include those too.

		// These should be present on all EVM-compatible chains.
		vm.assume(addr < address(0x1) || addr > address(0x9));

		// forgefmt: disable-start
		if (chainId == 10 || chainId == 420) {
			// https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21
			vm.assume(
				addr < address(0x4200000000000000000000000000000000000000) ||
					addr > address(0x4200000000000000000000000000000000000800)
			);
		} else if (chainId == 42161 || chainId == 421613) {
			// https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains
			vm.assume(
				addr < address(0x0000000000000000000000000000000000000064) ||
					addr > address(0x0000000000000000000000000000000000000068)
			);
		} else if (chainId == 43114 || chainId == 43113) {
			// https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59
			vm.assume(
				addr < address(0x0100000000000000000000000000000000000000) ||
					addr > address(0x01000000000000000000000000000000000000ff)
			);
			vm.assume(
				addr < address(0x0200000000000000000000000000000000000000) ||
					addr > address(0x02000000000000000000000000000000000000FF)
			);
			vm.assume(
				addr < address(0x0300000000000000000000000000000000000000) ||
					addr > address(0x03000000000000000000000000000000000000Ff)
			);
		}
		// forgefmt: disable-end
	}

	function readEIP1559ScriptArtifact(
		string memory path
	) internal view virtual returns (EIP1559ScriptArtifact memory) {
		string memory data = vm.readFile(path);
		bytes memory parsedData = vm.parseJson(data);
		RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(
			parsedData,
			(RawEIP1559ScriptArtifact)
		);
		EIP1559ScriptArtifact memory artifact;
		artifact.libraries = rawArtifact.libraries;
		artifact.path = rawArtifact.path;
		artifact.timestamp = rawArtifact.timestamp;
		artifact.pending = rawArtifact.pending;
		artifact.txReturns = rawArtifact.txReturns;
		artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);
		artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);
		return artifact;
	}

	function rawToConvertedEIPTx1559s(
		RawTx1559[] memory rawTxs
	) internal pure virtual returns (Tx1559[] memory) {
		Tx1559[] memory txs = new Tx1559[](rawTxs.length);
		for (uint256 i; i < rawTxs.length; i++) {
			txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);
		}
		return txs;
	}

	function rawToConvertedEIPTx1559(
		RawTx1559 memory rawTx
	) internal pure virtual returns (Tx1559 memory) {
		Tx1559 memory transaction;
		transaction.arguments = rawTx.arguments;
		transaction.contractName = rawTx.contractName;
		transaction.functionSig = rawTx.functionSig;
		transaction.hash = rawTx.hash;
		transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);
		transaction.opcode = rawTx.opcode;
		return transaction;
	}

	function rawToConvertedEIP1559Detail(
		RawTx1559Detail memory rawDetail
	) internal pure virtual returns (Tx1559Detail memory) {
		Tx1559Detail memory txDetail;
		txDetail.data = rawDetail.data;
		txDetail.from = rawDetail.from;
		txDetail.to = rawDetail.to;
		txDetail.nonce = _bytesToUint(rawDetail.nonce);
		txDetail.txType = _bytesToUint(rawDetail.txType);
		txDetail.value = _bytesToUint(rawDetail.value);
		txDetail.gas = _bytesToUint(rawDetail.gas);
		txDetail.accessList = rawDetail.accessList;
		return txDetail;
	}

	function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {
		string memory deployData = vm.readFile(path);
		bytes memory parsedDeployData = vm.parseJson(deployData, ".transactions");
		RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));
		return rawToConvertedEIPTx1559s(rawTxs);
	}

	function readTx1559(
		string memory path,
		uint256 index
	) internal view virtual returns (Tx1559 memory) {
		string memory deployData = vm.readFile(path);
		string memory key = string(
			abi.encodePacked(".transactions[", vm.toString(index), "]")
		);
		bytes memory parsedDeployData = vm.parseJson(deployData, key);
		RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));
		return rawToConvertedEIPTx1559(rawTx);
	}

	// Analogous to readTransactions, but for receipts.
	function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {
		string memory deployData = vm.readFile(path);
		bytes memory parsedDeployData = vm.parseJson(deployData, ".receipts");
		RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));
		return rawToConvertedReceipts(rawReceipts);
	}

	function readReceipt(
		string memory path,
		uint256 index
	) internal view virtual returns (Receipt memory) {
		string memory deployData = vm.readFile(path);
		string memory key = string(abi.encodePacked(".receipts[", vm.toString(index), "]"));
		bytes memory parsedDeployData = vm.parseJson(deployData, key);
		RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));
		return rawToConvertedReceipt(rawReceipt);
	}

	function rawToConvertedReceipts(
		RawReceipt[] memory rawReceipts
	) internal pure virtual returns (Receipt[] memory) {
		Receipt[] memory receipts = new Receipt[](rawReceipts.length);
		for (uint256 i; i < rawReceipts.length; i++) {
			receipts[i] = rawToConvertedReceipt(rawReceipts[i]);
		}
		return receipts;
	}

	function rawToConvertedReceipt(
		RawReceipt memory rawReceipt
	) internal pure virtual returns (Receipt memory) {
		Receipt memory receipt;
		receipt.blockHash = rawReceipt.blockHash;
		receipt.to = rawReceipt.to;
		receipt.from = rawReceipt.from;
		receipt.contractAddress = rawReceipt.contractAddress;
		receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);
		receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);
		receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);
		receipt.status = _bytesToUint(rawReceipt.status);
		receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);
		receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);
		receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);
		receipt.logsBloom = rawReceipt.logsBloom;
		receipt.transactionHash = rawReceipt.transactionHash;
		return receipt;
	}

	function rawToConvertedReceiptLogs(
		RawReceiptLog[] memory rawLogs
	) internal pure virtual returns (ReceiptLog[] memory) {
		ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);
		for (uint256 i; i < rawLogs.length; i++) {
			logs[i].logAddress = rawLogs[i].logAddress;
			logs[i].blockHash = rawLogs[i].blockHash;
			logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);
			logs[i].data = rawLogs[i].data;
			logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);
			logs[i].topics = rawLogs[i].topics;
			logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);
			logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);
			logs[i].removed = rawLogs[i].removed;
		}
		return logs;
	}

	// Deploy a contract by fetching the contract bytecode from
	// the artifacts directory
	// e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`
	function deployCode(
		string memory what,
		bytes memory args
	) internal virtual returns (address addr) {
		bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
		/// @solidity memory-safe-assembly
		assembly {
			addr := create(0, add(bytecode, 0x20), mload(bytecode))
		}

		require(
			addr != address(0),
			"StdCheats deployCode(string,bytes): Deployment failed."
		);
	}

	function deployCode(string memory what) internal virtual returns (address addr) {
		bytes memory bytecode = vm.getCode(what);
		/// @solidity memory-safe-assembly
		assembly {
			addr := create(0, add(bytecode, 0x20), mload(bytecode))
		}

		require(addr != address(0), "StdCheats deployCode(string): Deployment failed.");
	}

	/// @dev deploy contract with value on construction
	function deployCode(
		string memory what,
		bytes memory args,
		uint256 val
	) internal virtual returns (address addr) {
		bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);
		/// @solidity memory-safe-assembly
		assembly {
			addr := create(val, add(bytecode, 0x20), mload(bytecode))
		}

		require(
			addr != address(0),
			"StdCheats deployCode(string,bytes,uint256): Deployment failed."
		);
	}

	function deployCode(
		string memory what,
		uint256 val
	) internal virtual returns (address addr) {
		bytes memory bytecode = vm.getCode(what);
		/// @solidity memory-safe-assembly
		assembly {
			addr := create(val, add(bytecode, 0x20), mload(bytecode))
		}

		require(
			addr != address(0),
			"StdCheats deployCode(string,uint256): Deployment failed."
		);
	}

	// creates a labeled address and the corresponding private key
	function makeAddrAndKey(
		string memory name
	) internal virtual returns (address addr, uint256 privateKey) {
		privateKey = uint256(keccak256(abi.encodePacked(name)));
		addr = vm.addr(privateKey);
		vm.label(addr, name);
	}

	// creates a labeled address
	function makeAddr(string memory name) internal virtual returns (address addr) {
		(addr, ) = makeAddrAndKey(name);
	}

	function deriveRememberKey(
		string memory mnemonic,
		uint32 index
	) internal virtual returns (address who, uint256 privateKey) {
		privateKey = vm.deriveKey(mnemonic, index);
		who = vm.rememberKey(privateKey);
	}

	function _bytesToUint(bytes memory b) private pure returns (uint256) {
		require(b.length <= 32, "StdCheats _bytesToUint(bytes): Bytes length exceeds 32.");
		return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
	}
}

// Wrappers around cheatcodes to avoid footguns
abstract contract StdCheats is StdCheatsSafe {
	using stdStorage for StdStorage;

	StdStorage private stdstore;
	Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

	// Skip forward or rewind time by the specified number of seconds
	function skip(uint256 time) internal virtual {
		vm.warp(block.timestamp + time);
	}

	function rewind(uint256 time) internal virtual {
		vm.warp(block.timestamp - time);
	}

	// Setup a prank from an address that has some ether
	function hoax(address who) internal virtual {
		vm.deal(who, 1 << 128);
		vm.prank(who);
	}

	function hoax(address who, uint256 give) internal virtual {
		vm.deal(who, give);
		vm.prank(who);
	}

	function hoax(address who, address origin) internal virtual {
		vm.deal(who, 1 << 128);
		vm.prank(who, origin);
	}

	function hoax(address who, address origin, uint256 give) internal virtual {
		vm.deal(who, give);
		vm.prank(who, origin);
	}

	// Start perpetual prank from an address that has some ether
	function startHoax(address who) internal virtual {
		vm.deal(who, 1 << 128);
		vm.startPrank(who);
	}

	function startHoax(address who, uint256 give) internal virtual {
		vm.deal(who, give);
		vm.startPrank(who);
	}

	// Start perpetual prank from an address that has some ether
	// tx.origin is set to the origin parameter
	function startHoax(address who, address origin) internal virtual {
		vm.deal(who, 1 << 128);
		vm.startPrank(who, origin);
	}

	function startHoax(address who, address origin, uint256 give) internal virtual {
		vm.deal(who, give);
		vm.startPrank(who, origin);
	}

	function changePrank(address who) internal virtual {
		vm.stopPrank();
		vm.startPrank(who);
	}

	// The same as Vm's `deal`
	// Use the alternative signature for ERC20 tokens
	function deal(address to, uint256 give) internal virtual {
		vm.deal(to, give);
	}

	// Set the balance of an account for any ERC20 token
	// Use the alternative signature to update `totalSupply`
	function deal(address token, address to, uint256 give) internal virtual {
		deal(token, to, give, false);
	}

	function deal(address token, address to, uint256 give, bool adjust) internal virtual {
		// get current balance
		(, bytes memory balData) = token.call(abi.encodeWithSelector(0x70a08231, to));
		uint256 prevBal = abi.decode(balData, (uint256));

		// update balance
		stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);

		// update total supply
		if (adjust) {
			(, bytes memory totSupData) = token.call(
				abi.encodeWithSelector(0x18160ddd)
			);
			uint256 totSup = abi.decode(totSupData, (uint256));
			if (give < prevBal) {
				totSup -= (prevBal - give);
			} else {
				totSup += (give - prevBal);
			}
			stdstore.target(token).sig(0x18160ddd).checked_write(totSup);
		}
	}

	function isFork() internal virtual returns (bool status) {
		try vm.activeFork() {
			status = true;
		} catch (bytes memory) {}
	}

	modifier skipWhenForking() {
		if (!isFork()) {
			_;
		}
	}

	modifier skipWhenNotForking() {
		if (isFork()) {
			_;
		}
	}
}

// SPDX-License-Identifier: MIT
// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test
pragma solidity >=0.6.2 <0.9.0;

library stdError {
	bytes public constant assertionError = abi.encodeWithSignature("Panic(uint256)", 0x01);
	bytes public constant arithmeticError = abi.encodeWithSignature("Panic(uint256)", 0x11);
	bytes public constant divisionError = abi.encodeWithSignature("Panic(uint256)", 0x12);
	bytes public constant enumConversionError = abi.encodeWithSignature("Panic(uint256)", 0x21);
	bytes public constant encodeStorageError = abi.encodeWithSignature("Panic(uint256)", 0x22);
	bytes public constant popError = abi.encodeWithSignature("Panic(uint256)", 0x31);
	bytes public constant indexOOBError = abi.encodeWithSignature("Panic(uint256)", 0x32);
	bytes public constant memOverflowError = abi.encodeWithSignature("Panic(uint256)", 0x41);
	bytes public constant zeroVarError = abi.encodeWithSignature("Panic(uint256)", 0x51);
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.0 <0.9.0;

pragma experimental ABIEncoderV2;

import "./Vm.sol";

// Helpers for parsing and writing JSON files
// To parse:
// ```
// using stdJson for string;
// string memory json = vm.readFile("some_peth");
// json.parseUint("<json_path>");
// ```
// To write:
// ```
// using stdJson for string;
// string memory json = "deploymentArtifact";
// Contract contract = new Contract();
// json.serialize("contractAddress", address(contract));
// json = json.serialize("deploymentTimes", uint(1));
// // store the stringified JSON to the 'json' variable we have been using as a key
// // as we won't need it any longer
// string memory json2 = "finalArtifact";
// string memory final = json2.serialize("depArtifact", json);
// final.write("<some_path>");
// ```

library stdJson {
	VmSafe private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

	function parseRaw(
		string memory json,
		string memory key
	) internal pure returns (bytes memory) {
		return vm.parseJson(json, key);
	}

	function readUint(string memory json, string memory key) internal pure returns (uint256) {
		return abi.decode(vm.parseJson(json, key), (uint256));
	}

	function readUintArray(
		string memory json,
		string memory key
	) internal pure returns (uint256[] memory) {
		return abi.decode(vm.parseJson(json, key), (uint256[]));
	}

	function readInt(string memory json, string memory key) internal pure returns (int256) {
		return abi.decode(vm.parseJson(json, key), (int256));
	}

	function readIntArray(
		string memory json,
		string memory key
	) internal pure returns (int256[] memory) {
		return abi.decode(vm.parseJson(json, key), (int256[]));
	}

	function readBytes32(
		string memory json,
		string memory key
	) internal pure returns (bytes32) {
		return abi.decode(vm.parseJson(json, key), (bytes32));
	}

	function readBytes32Array(
		string memory json,
		string memory key
	) internal pure returns (bytes32[] memory) {
		return abi.decode(vm.parseJson(json, key), (bytes32[]));
	}

	function readString(
		string memory json,
		string memory key
	) internal pure returns (string memory) {
		return abi.decode(vm.parseJson(json, key), (string));
	}

	function readStringArray(
		string memory json,
		string memory key
	) internal pure returns (string[] memory) {
		return abi.decode(vm.parseJson(json, key), (string[]));
	}

	function readAddress(
		string memory json,
		string memory key
	) internal pure returns (address) {
		return abi.decode(vm.parseJson(json, key), (address));
	}

	function readAddressArray(
		string memory json,
		string memory key
	) internal pure returns (address[] memory) {
		return abi.decode(vm.parseJson(json, key), (address[]));
	}

	function readBool(string memory json, string memory key) internal pure returns (bool) {
		return abi.decode(vm.parseJson(json, key), (bool));
	}

	function readBoolArray(
		string memory json,
		string memory key
	) internal pure returns (bool[] memory) {
		return abi.decode(vm.parseJson(json, key), (bool[]));
	}

	function readBytes(
		string memory json,
		string memory key
	) internal pure returns (bytes memory) {
		return abi.decode(vm.parseJson(json, key), (bytes));
	}

	function readBytesArray(
		string memory json,
		string memory key
	) internal pure returns (bytes[] memory) {
		return abi.decode(vm.parseJson(json, key), (bytes[]));
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		bool value
	) internal returns (string memory) {
		return vm.serializeBool(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		bool[] memory value
	) internal returns (string memory) {
		return vm.serializeBool(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		uint256 value
	) internal returns (string memory) {
		return vm.serializeUint(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		uint256[] memory value
	) internal returns (string memory) {
		return vm.serializeUint(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		int256 value
	) internal returns (string memory) {
		return vm.serializeInt(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		int256[] memory value
	) internal returns (string memory) {
		return vm.serializeInt(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		address value
	) internal returns (string memory) {
		return vm.serializeAddress(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		address[] memory value
	) internal returns (string memory) {
		return vm.serializeAddress(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		bytes32 value
	) internal returns (string memory) {
		return vm.serializeBytes32(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		bytes32[] memory value
	) internal returns (string memory) {
		return vm.serializeBytes32(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		bytes memory value
	) internal returns (string memory) {
		return vm.serializeBytes(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		bytes[] memory value
	) internal returns (string memory) {
		return vm.serializeBytes(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		string memory value
	) internal returns (string memory) {
		return vm.serializeString(jsonKey, key, value);
	}

	function serialize(
		string memory jsonKey,
		string memory key,
		string[] memory value
	) internal returns (string memory) {
		return vm.serializeString(jsonKey, key, value);
	}

	function write(string memory jsonKey, string memory path) internal {
		vm.writeJson(jsonKey, path);
	}

	function write(string memory jsonKey, string memory path, string memory valueKey) internal {
		vm.writeJson(jsonKey, path, valueKey);
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

library stdMath {
	int256 private constant INT256_MIN =
		-57896044618658097711785492504343953926634992332820282019728792003956564819968;

	function abs(int256 a) internal pure returns (uint256) {
		// Required or it will fail when `a = type(int256).min`
		if (a == INT256_MIN) {
			return
				57896044618658097711785492504343953926634992332820282019728792003956564819968;
		}

		return uint256(a > 0 ? a : -a);
	}

	function delta(uint256 a, uint256 b) internal pure returns (uint256) {
		return a > b ? a - b : b - a;
	}

	function delta(int256 a, int256 b) internal pure returns (uint256) {
		// a and b are of the same sign
		// this works thanks to two's complement, the left-most bit is the sign bit
		if ((a ^ b) > -1) {
			return delta(abs(a), abs(b));
		}

		// a and b are of opposite signs
		return abs(a) + abs(b);
	}

	function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {
		uint256 absDelta = delta(a, b);

		return (absDelta * 1e18) / b;
	}

	function percentDelta(int256 a, int256 b) internal pure returns (uint256) {
		uint256 absDelta = delta(a, b);
		uint256 absB = abs(b);

		return (absDelta * 1e18) / absB;
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import "./Vm.sol";

struct StdStorage {
	mapping(address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;
	mapping(address => mapping(bytes4 => mapping(bytes32 => bool))) finds;
	bytes32[] _keys;
	bytes4 _sig;
	uint256 _depth;
	address _target;
	bytes32 _set;
}

library stdStorageSafe {
	event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);
	event WARNING_UninitedSlot(address who, uint256 slot);

	Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

	function sigs(string memory sigStr) internal pure returns (bytes4) {
		return bytes4(keccak256(bytes(sigStr)));
	}

	/// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against
	// slot complexity:
	//  if flat, will be bytes32(uint256(uint));
	//  if map, will be keccak256(abi.encode(key, uint(slot)));
	//  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));
	//  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);
	function find(StdStorage storage self) internal returns (uint256) {
		address who = self._target;
		bytes4 fsig = self._sig;
		uint256 field_depth = self._depth;
		bytes32[] memory ins = self._keys;

		// calldata to test against
		if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {
			return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];
		}
		bytes memory cald = abi.encodePacked(fsig, flatten(ins));
		vm.record();
		bytes32 fdat;
		{
			(, bytes memory rdat) = who.staticcall(cald);
			fdat = bytesToBytes32(rdat, 32 * field_depth);
		}

		(bytes32[] memory reads, ) = vm.accesses(address(who));
		if (reads.length == 1) {
			bytes32 curr = vm.load(who, reads[0]);
			if (curr == bytes32(0)) {
				emit WARNING_UninitedSlot(who, uint256(reads[0]));
			}
			if (fdat != curr) {
				require(
					false,
					"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported."
				);
			}
			emit SlotFound(
				who,
				fsig,
				keccak256(abi.encodePacked(ins, field_depth)),
				uint256(reads[0])
			);
			self.slots[who][fsig][
				keccak256(abi.encodePacked(ins, field_depth))
			] = uint256(reads[0]);
			self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;
		} else if (reads.length > 1) {
			for (uint256 i = 0; i < reads.length; i++) {
				bytes32 prev = vm.load(who, reads[i]);
				if (prev == bytes32(0)) {
					emit WARNING_UninitedSlot(who, uint256(reads[i]));
				}
				// store
				vm.store(who, reads[i], bytes32(hex"1337"));
				bool success;
				bytes memory rdat;
				{
					(success, rdat) = who.staticcall(cald);
					fdat = bytesToBytes32(rdat, 32 * field_depth);
				}

				if (success && fdat == bytes32(hex"1337")) {
					// we found which of the slots is the actual one
					emit SlotFound(
						who,
						fsig,
						keccak256(abi.encodePacked(ins, field_depth)),
						uint256(reads[i])
					);
					self.slots[who][fsig][
						keccak256(abi.encodePacked(ins, field_depth))
					] = uint256(reads[i]);
					self.finds[who][fsig][
						keccak256(abi.encodePacked(ins, field_depth))
					] = true;
					vm.store(who, reads[i], prev);
					break;
				}
				vm.store(who, reads[i], prev);
			}
		} else {
			require(
				false,
				"stdStorage find(StdStorage): No storage use detected for target."
			);
		}

		require(
			self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))],
			"stdStorage find(StdStorage): Slot(s) not found."
		);

		delete self._target;
		delete self._sig;
		delete self._keys;
		delete self._depth;

		return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];
	}

	function target(
		StdStorage storage self,
		address _target
	) internal returns (StdStorage storage) {
		self._target = _target;
		return self;
	}

	function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
		self._sig = _sig;
		return self;
	}

	function sig(
		StdStorage storage self,
		string memory _sig
	) internal returns (StdStorage storage) {
		self._sig = sigs(_sig);
		return self;
	}

	function with_key(
		StdStorage storage self,
		address who
	) internal returns (StdStorage storage) {
		self._keys.push(bytes32(uint256(uint160(who))));
		return self;
	}

	function with_key(
		StdStorage storage self,
		uint256 amt
	) internal returns (StdStorage storage) {
		self._keys.push(bytes32(amt));
		return self;
	}

	function with_key(
		StdStorage storage self,
		bytes32 key
	) internal returns (StdStorage storage) {
		self._keys.push(key);
		return self;
	}

	function depth(
		StdStorage storage self,
		uint256 _depth
	) internal returns (StdStorage storage) {
		self._depth = _depth;
		return self;
	}

	function read(StdStorage storage self) private returns (bytes memory) {
		address t = self._target;
		uint256 s = find(self);
		return abi.encode(vm.load(t, bytes32(s)));
	}

	function read_bytes32(StdStorage storage self) internal returns (bytes32) {
		return abi.decode(read(self), (bytes32));
	}

	function read_bool(StdStorage storage self) internal returns (bool) {
		int256 v = read_int(self);
		if (v == 0) return false;
		if (v == 1) return true;
		revert(
			"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool."
		);
	}

	function read_address(StdStorage storage self) internal returns (address) {
		return abi.decode(read(self), (address));
	}

	function read_uint(StdStorage storage self) internal returns (uint256) {
		return abi.decode(read(self), (uint256));
	}

	function read_int(StdStorage storage self) internal returns (int256) {
		return abi.decode(read(self), (int256));
	}

	function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {
		bytes32 out;

		uint256 max = b.length > 32 ? 32 : b.length;
		for (uint256 i = 0; i < max; i++) {
			out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);
		}
		return out;
	}

	function flatten(bytes32[] memory b) private pure returns (bytes memory) {
		bytes memory result = new bytes(b.length * 32);
		for (uint256 i = 0; i < b.length; i++) {
			bytes32 k = b[i];
			/// @solidity memory-safe-assembly
			assembly {
				mstore(add(result, add(32, mul(32, i))), k)
			}
		}

		return result;
	}
}

library stdStorage {
	Vm private constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

	function sigs(string memory sigStr) internal pure returns (bytes4) {
		return stdStorageSafe.sigs(sigStr);
	}

	function find(StdStorage storage self) internal returns (uint256) {
		return stdStorageSafe.find(self);
	}

	function target(
		StdStorage storage self,
		address _target
	) internal returns (StdStorage storage) {
		return stdStorageSafe.target(self, _target);
	}

	function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {
		return stdStorageSafe.sig(self, _sig);
	}

	function sig(
		StdStorage storage self,
		string memory _sig
	) internal returns (StdStorage storage) {
		return stdStorageSafe.sig(self, _sig);
	}

	function with_key(
		StdStorage storage self,
		address who
	) internal returns (StdStorage storage) {
		return stdStorageSafe.with_key(self, who);
	}

	function with_key(
		StdStorage storage self,
		uint256 amt
	) internal returns (StdStorage storage) {
		return stdStorageSafe.with_key(self, amt);
	}

	function with_key(
		StdStorage storage self,
		bytes32 key
	) internal returns (StdStorage storage) {
		return stdStorageSafe.with_key(self, key);
	}

	function depth(
		StdStorage storage self,
		uint256 _depth
	) internal returns (StdStorage storage) {
		return stdStorageSafe.depth(self, _depth);
	}

	function checked_write(StdStorage storage self, address who) internal {
		checked_write(self, bytes32(uint256(uint160(who))));
	}

	function checked_write(StdStorage storage self, uint256 amt) internal {
		checked_write(self, bytes32(amt));
	}

	function checked_write(StdStorage storage self, bool write) internal {
		bytes32 t;
		/// @solidity memory-safe-assembly
		assembly {
			t := write
		}
		checked_write(self, t);
	}

	function checked_write(StdStorage storage self, bytes32 set) internal {
		address who = self._target;
		bytes4 fsig = self._sig;
		uint256 field_depth = self._depth;
		bytes32[] memory ins = self._keys;

		bytes memory cald = abi.encodePacked(fsig, flatten(ins));
		if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {
			find(self);
		}
		bytes32 slot = bytes32(
			self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]
		);

		bytes32 fdat;
		{
			(, bytes memory rdat) = who.staticcall(cald);
			fdat = bytesToBytes32(rdat, 32 * field_depth);
		}
		bytes32 curr = vm.load(who, slot);

		if (fdat != curr) {
			require(
				false,
				"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported."
			);
		}
		vm.store(who, slot, set);
		delete self._target;
		delete self._sig;
		delete self._keys;
		delete self._depth;
	}

	function read_bytes32(StdStorage storage self) internal returns (bytes32) {
		return stdStorageSafe.read_bytes32(self);
	}

	function read_bool(StdStorage storage self) internal returns (bool) {
		return stdStorageSafe.read_bool(self);
	}

	function read_address(StdStorage storage self) internal returns (address) {
		return stdStorageSafe.read_address(self);
	}

	function read_uint(StdStorage storage self) internal returns (uint256) {
		return stdStorageSafe.read_uint(self);
	}

	function read_int(StdStorage storage self) internal returns (int256) {
		return stdStorageSafe.read_int(self);
	}

	// Private function so needs to be copied over
	function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {
		bytes32 out;

		uint256 max = b.length > 32 ? 32 : b.length;
		for (uint256 i = 0; i < max; i++) {
			out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);
		}
		return out;
	}

	// Private function so needs to be copied over
	function flatten(bytes32[] memory b) private pure returns (bytes memory) {
		bytes memory result = new bytes(b.length * 32);
		for (uint256 i = 0; i < b.length; i++) {
			bytes32 k = b[i];
			/// @solidity memory-safe-assembly
			assembly {
				mstore(add(result, add(32, mul(32, i))), k)
			}
		}

		return result;
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

import "./console2.sol";

abstract contract StdUtils {
	uint256 private constant UINT256_MAX =
		115792089237316195423570985008687907853269984665640564039457584007913129639935;

	function _bound(
		uint256 x,
		uint256 min,
		uint256 max
	) internal pure virtual returns (uint256 result) {
		require(
			min <= max,
			"StdUtils bound(uint256,uint256,uint256): Max is less than min."
		);

		// If x is between min and max, return x directly. This is to ensure that dictionary values
		// do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188
		if (x >= min && x <= max) return x;

		uint256 size = max - min + 1;

		// If the value is 0, 1, 2, 3, warp that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.
		// This helps ensure coverage of the min/max values.
		if (x <= 3 && size > x) return min + x;
		if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);

		// Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.
		if (x > max) {
			uint256 diff = x - max;
			uint256 rem = diff % size;
			if (rem == 0) return max;
			result = min + rem - 1;
		} else if (x < min) {
			uint256 diff = min - x;
			uint256 rem = diff % size;
			if (rem == 0) return min;
			result = max - rem + 1;
		}
	}

	function bound(
		uint256 x,
		uint256 min,
		uint256 max
	) internal view virtual returns (uint256 result) {
		result = _bound(x, min, max);
		console2.log("Bound Result", result);
	}

	/// @dev Compute the address a contract will be deployed at for a given deployer address and nonce
	/// @notice adapated from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)
	function computeCreateAddress(
		address deployer,
		uint256 nonce
	) internal pure virtual returns (address) {
		// forgefmt: disable-start
		// The integer zero is treated as an empty byte string, and as a result it only has a length prefix, 0x80, computed via 0x80 + 0.
		// A one byte integer uses its own value as its length prefix, there is no additional "0x80 + length" prefix that comes before it.
		if (nonce == 0x00)
			return
				addressFromLast20Bytes(
					keccak256(
						abi.encodePacked(
							bytes1(0xd6),
							bytes1(0x94),
							deployer,
							bytes1(0x80)
						)
					)
				);
		if (nonce <= 0x7f)
			return
				addressFromLast20Bytes(
					keccak256(
						abi.encodePacked(
							bytes1(0xd6),
							bytes1(0x94),
							deployer,
							uint8(nonce)
						)
					)
				);

		// Nonces greater than 1 byte all follow a consistent encoding scheme, where each value is preceded by a prefix of 0x80 + length.
		if (nonce <= 2 ** 8 - 1)
			return
				addressFromLast20Bytes(
					keccak256(
						abi.encodePacked(
							bytes1(0xd7),
							bytes1(0x94),
							deployer,
							bytes1(0x81),
							uint8(nonce)
						)
					)
				);
		if (nonce <= 2 ** 16 - 1)
			return
				addressFromLast20Bytes(
					keccak256(
						abi.encodePacked(
							bytes1(0xd8),
							bytes1(0x94),
							deployer,
							bytes1(0x82),
							uint16(nonce)
						)
					)
				);
		if (nonce <= 2 ** 24 - 1)
			return
				addressFromLast20Bytes(
					keccak256(
						abi.encodePacked(
							bytes1(0xd9),
							bytes1(0x94),
							deployer,
							bytes1(0x83),
							uint24(nonce)
						)
					)
				);
		// forgefmt: disable-end

		// More details about RLP encoding can be found here: https://eth.wiki/fundamentals/rlp
		// 0xda = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x84 ++ nonce)
		// 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)
		// 0x84 = 0x80 + 0x04 (0x04 = the bytes length of the nonce, 4 bytes, in hex)
		// We assume nobody can have a nonce large enough to require more than 32 bytes.
		return
			addressFromLast20Bytes(
				keccak256(
					abi.encodePacked(
						bytes1(0xda),
						bytes1(0x94),
						deployer,
						bytes1(0x84),
						uint32(nonce)
					)
				)
			);
	}

	function computeCreate2Address(
		bytes32 salt,
		bytes32 initcodeHash,
		address deployer
	) internal pure virtual returns (address) {
		return
			addressFromLast20Bytes(
				keccak256(
					abi.encodePacked(bytes1(0xff), deployer, salt, initcodeHash)
				)
			);
	}

	function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {
		require(b.length <= 32, "StdUtils bytesToUint(bytes): Bytes length exceeds 32.");
		return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));
	}

	function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {
		return address(uint160(uint256(bytesValue)));
	}
}

// SPDX-License-Identifier: MIT
pragma solidity >=0.6.2 <0.9.0;

pragma experimental ABIEncoderV2;

// Cheatcodes are marked as view/pure/none using the following rules:
// 0. A call's observable behaviour includes its return value, logs, reverts and state writes.
// 1. If you can influence a later call's observable behaviour, you're neither `view` nor `pure` (you are modifying some state be it the EVM, interpreter, filesystem, etc),
// 2. Otherwise if you can be influenced by an earlier call, or if reading some state, you're `view`,
// 3. Otherwise you're `pure`.

interface VmSafe {
	struct Log {
		bytes32[] topics;
		bytes data;
		address emitter;
	}

	struct Rpc {
		string key;
		string url;
	}

	// Loads a storage slot from an address (who, slot)
	function load(address, bytes32) external view returns (bytes32);

	// Signs data, (privateKey, digest) => (v, r, s)
	function sign(uint256, bytes32) external pure returns (uint8, bytes32, bytes32);

	// Gets the address for a given private key, (privateKey) => (address)
	function addr(uint256) external pure returns (address);

	// Gets the nonce of an account
	function getNonce(address) external view returns (uint64);

	// Performs a foreign function call via the terminal, (stringInputs) => (result)
	function ffi(string[] calldata) external returns (bytes memory);

	// Sets environment variables, (name, value)
	function setEnv(string calldata, string calldata) external;

	// Reads environment variables, (name) => (value)
	function envBool(string calldata) external view returns (bool);

	function envUint(string calldata) external view returns (uint256);

	function envInt(string calldata) external view returns (int256);

	function envAddress(string calldata) external view returns (address);

	function envBytes32(string calldata) external view returns (bytes32);

	function envString(string calldata) external view returns (string memory);

	function envBytes(string calldata) external view returns (bytes memory);

	// Reads environment variables as arrays, (name, delim) => (value[])
	function envBool(string calldata, string calldata) external view returns (bool[] memory);

	function envUint(string calldata, string calldata) external view returns (uint256[] memory);

	function envInt(string calldata, string calldata) external view returns (int256[] memory);

	function envAddress(
		string calldata,
		string calldata
	) external view returns (address[] memory);

	function envBytes32(
		string calldata,
		string calldata
	) external view returns (bytes32[] memory);

	function envString(
		string calldata,
		string calldata
	) external view returns (string[] memory);

	function envBytes(string calldata, string calldata) external view returns (bytes[] memory);

	// Records all storage reads and writes
	function record() external;

	// Gets all accessed reads and write slot from a recording session, for a given address
	function accesses(
		address
	) external returns (bytes32[] memory reads, bytes32[] memory writes);

	// Gets the _creation_ bytecode from an artifact file. Takes in the relative path to the json file
	function getCode(string calldata) external view returns (bytes memory);

	// Gets the _deployed_ bytecode from an artifact file. Takes in the relative path to the json file
	function getDeployedCode(string calldata) external view returns (bytes memory);

	// Labels an address in call traces
	function label(address, string calldata) external;

	// Using the address that calls the test contract, has the next call (at this call depth only) create a transaction that can later be signed and sent onchain
	function broadcast() external;

	// Has the next call (at this call depth only) create a transaction with the address provided as the sender that can later be signed and sent onchain
	function broadcast(address) external;

	// Has the next call (at this call depth only) create a transaction with the private key provided as the sender that can later be signed and sent onchain
	function broadcast(uint256) external;

	// Using the address that calls the test contract, has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain
	function startBroadcast() external;

	// Has all subsequent calls (at this call depth only) create transactions with the address provided that can later be signed and sent onchain
	function startBroadcast(address) external;

	// Has all subsequent calls (at this call depth only) create transactions with the private key provided that can later be signed and sent onchain
	function startBroadcast(uint256) external;

	// Stops collecting onchain transactions
	function stopBroadcast() external;

	// Reads the entire content of file to string, (path) => (data)
	function readFile(string calldata) external view returns (string memory);

	// Reads the entire content of file as binary. Path is relative to the project root. (path) => (data)
	function readFileBinary(string calldata) external view returns (bytes memory);

	// Get the path of the current project root
	function projectRoot() external view returns (string memory);

	// Reads next line of file to string, (path) => (line)
	function readLine(string calldata) external view returns (string memory);

	// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.
	// (path, data) => ()
	function writeFile(string calldata, string calldata) external;

	// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.
	// Path is relative to the project root. (path, data) => ()
	function writeFileBinary(string calldata, bytes calldata) external;

	// Writes line to file, creating a file if it does not exist.
	// (path, data) => ()
	function writeLine(string calldata, string calldata) external;

	// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.
	// (path) => ()
	function closeFile(string calldata) external;

	// Removes file. This cheatcode will revert in the following situations, but is not limited to just these cases:
	// - Path points to a directory.
	// - The file doesn't exist.
	// - The user lacks permissions to remove the file.
	// (path) => ()
	function removeFile(string calldata) external;

	// Convert values to a string, (value) => (stringified value)
	function toString(address) external pure returns (string memory);

	function toString(bytes calldata) external pure returns (string memory);

	function toString(bytes32) external pure returns (string memory);

	function toString(bool) external pure returns (string memory);

	function toString(uint256) external pure returns (string memory);

	function toString(int256) external pure returns (string memory);

	// Convert values from a string, (string) => (parsed value)
	function parseBytes(string calldata) external pure returns (bytes memory);

	function parseAddress(string calldata) external pure returns (address);

	function parseUint(string calldata) external pure returns (uint256);

	function parseInt(string calldata) external pure returns (int256);

	function parseBytes32(string calldata) external pure returns (bytes32);

	function parseBool(string calldata) external pure returns (bool);

	// Record all the transaction logs
	function recordLogs() external;

	// Gets all the recorded logs, () => (logs)
	function getRecordedLogs() external returns (Log[] memory);

	// Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path m/44'/60'/0'/0/{index}
	function deriveKey(string calldata, uint32) external pure returns (uint256);

	// Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path {path}{index}
	function deriveKey(
		string calldata,
		string calldata,
		uint32
	) external pure returns (uint256);

	// Adds a private key to the local forge wallet and returns the address
	function rememberKey(uint256) external returns (address);

	//
	// parseJson
	//
	// ----
	// In case the returned value is a JSON object, it's encoded as a ABI-encoded tuple. As JSON objects
	// don't have the notion of ordered, but tuples do, they JSON object is encoded with it's fields ordered in
	// ALPHABETICAL ordser. That means that in order to succesfully decode the tuple, we need to define a tuple that
	// encodes the fields in the same order, which is alphabetical. In the case of Solidity structs, they are encoded
	// as tuples, with the attributes in the order in which they are defined.
	// For example: json = { 'a': 1, 'b': 0xa4tb......3xs}
	// a: uint256
	// b: address
	// To decode that json, we need to define a struct or a tuple as follows:
	// struct json = { uint256 a; address b; }
	// If we defined a json struct with the opposite order, meaning placing the address b first, it would try to
	// decode the tuple in that order, and thus fail.
	// ----
	// Given a string of JSON, return it as ABI-encoded, (stringified json, key) => (ABI-encoded data)
	function parseJson(string calldata, string calldata) external pure returns (bytes memory);

	function parseJson(string calldata) external pure returns (bytes memory);

	//
	// writeJson
	//
	// ----
	// Let's assume we want to write the following JSON to a file:
	//
	// { "boolean": true, "number": 342, "object": { "title": "finally json serialization" } }
	//
	// ```
	//  string memory json1 = "some key";
	//  vm.serializeBool(json1, "boolean", true);
	//  vm.serializeBool(json1, "number", uint256(342));
	//  json2 = "some other key";
	//  string memory output = vm.serializeString(json2, "title", "finally json serialization");
	//  string memory finalJson = vm.serialize(json1, "object", output);
	//  vm.writeJson(finalJson, "./output/example.json");
	// ```
	//  The critical insight is that every invocation of serialization will return the stringified version of the JSON
	// up to that point. That means we can construct arbitrary JSON objects and then use the return stringified version
	// to serialize them as values to another JSON object.
	//
	//  json1 and json2 are simply keys used by the backend to keep track of the objects. So vm.serializeJson(json1,..)
	//  will find the object in-memory that is keyed by "some key".   // writeJson
	// ----
	// Serialize a key and value to a JSON object stored in-memory that can be latery written to a file
	// It returns the stringified version of the specific JSON file up to that moment.
	// (object_key, value_key, value) => (stringified JSON)
	function serializeBool(
		string calldata,
		string calldata,
		bool
	) external returns (string memory);

	function serializeUint(
		string calldata,
		string calldata,
		uint256
	) external returns (string memory);

	function serializeInt(
		string calldata,
		string calldata,
		int256
	) external returns (string memory);

	function serializeAddress(
		string calldata,
		string calldata,
		address
	) external returns (string memory);

	function serializeBytes32(
		string calldata,
		string calldata,
		bytes32
	) external returns (string memory);

	function serializeString(
		string calldata,
		string calldata,
		string calldata
	) external returns (string memory);

	function serializeBytes(
		string calldata,
		string calldata,
		bytes calldata
	) external returns (string memory);

	function serializeBool(
		string calldata,
		string calldata,
		bool[] calldata
	) external returns (string memory);

	function serializeUint(
		string calldata,
		string calldata,
		uint256[] calldata
	) external returns (string memory);

	function serializeInt(
		string calldata,
		string calldata,
		int256[] calldata
	) external returns (string memory);

	function serializeAddress(
		string calldata,
		string calldata,
		address[] calldata
	) external returns (string memory);

	function serializeBytes32(
		string calldata,
		string calldata,
		bytes32[] calldata
	) external returns (string memory);

	function serializeString(
		string calldata,
		string calldata,
		string[] calldata
	) external returns (string memory);

	function serializeBytes(
		string calldata,
		string calldata,
		bytes[] calldata
	) external returns (string memory);

	// Write a serialized JSON object to a file. If the file exists, it will be overwritten.
	// (stringified_json, path)
	function writeJson(string calldata, string calldata) external;

	// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key>
	// This is useful to replace a specific value of a JSON file, without having to parse the entire thing
	// (stringified_json, path, value_key)
	function writeJson(string calldata, string calldata, string calldata) external;

	// Returns the RPC url for the given alias
	function rpcUrl(string calldata) external view returns (string memory);

	// Returns all rpc urls and their aliases `[alias, url][]`
	function rpcUrls() external view returns (string[2][] memory);

	// Returns all rpc urls and their aliases as structs.
	function rpcUrlStructs() external view returns (Rpc[] memory);

	// If the condition is false, discard this run's fuzz inputs and generate new ones.
	function assume(bool) external pure;
}

interface Vm is VmSafe {
	// Sets block.timestamp (newTimestamp)
	function warp(uint256) external;

	// Sets block.height (newHeight)
	function roll(uint256) external;

	// Sets block.basefee (newBasefee)
	function fee(uint256) external;

	// Sets block.difficulty (newDifficulty)
	function difficulty(uint256) external;

	// Sets block.chainid
	function chainId(uint256) external;

	// Stores a value to an address' storage slot, (who, slot, value)
	function store(address, bytes32, bytes32) external;

	// Sets the nonce of an account; must be higher than the current nonce of the account
	function setNonce(address, uint64) external;

	// Sets the *next* call's msg.sender to be the input address
	function prank(address) external;

	// Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called
	function startPrank(address) external;

	// Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input
	function prank(address, address) external;

	// Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input
	function startPrank(address, address) external;

	// Resets subsequent calls' msg.sender to be `address(this)`
	function stopPrank() external;

	// Sets an address' balance, (who, newBalance)
	function deal(address, uint256) external;

	// Sets an address' code, (who, newCode)
	function etch(address, bytes calldata) external;

	// Expects an error on next call
	function expectRevert(bytes calldata) external;

	function expectRevert(bytes4) external;

	function expectRevert() external;

	// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).
	// Call this function, then emit an event, then call a function. Internally after the call, we check if
	// logs were emitted in the expected order with the expected topics and data (as specified by the booleans)
	function expectEmit(bool, bool, bool, bool) external;

	function expectEmit(bool, bool, bool, bool, address) external;

	// Mocks a call to an address, returning specified data.
	// Calldata can either be strict or a partial match, e.g. if you only
	// pass a Solidity selector to the expected calldata, then the entire Solidity
	// function will be mocked.
	function mockCall(address, bytes calldata, bytes calldata) external;

	// Mocks a call to an address with a specific msg.value, returning specified data.
	// Calldata match takes precedence over msg.value in case of ambiguity.
	function mockCall(address, uint256, bytes calldata, bytes calldata) external;

	// Clears all mocked calls
	function clearMockedCalls() external;

	// Expects a call to an address with the specified calldata.
	// Calldata can either be a strict or a partial match
	function expectCall(address, bytes calldata) external;

	// Expects a call to an address with the specified msg.value and calldata
	function expectCall(address, uint256, bytes calldata) external;

	// Sets block.coinbase (who)
	function coinbase(address) external;

	// Snapshot the current state of the evm.
	// Returns the id of the snapshot that was created.
	// To revert a snapshot use `revertTo`
	function snapshot() external returns (uint256);

	// Revert the state of the evm to a previous snapshot
	// Takes the snapshot id to revert to.
	// This deletes the snapshot and all snapshots taken after the given snapshot id.
	function revertTo(uint256) external returns (bool);

	// Creates a new fork with the given endpoint and block and returns the identifier of the fork
	function createFork(string calldata, uint256) external returns (uint256);

	// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork
	function createFork(string calldata) external returns (uint256);

	// Creates a new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction
	function createFork(string calldata, bytes32) external returns (uint256);

	// Creates _and_ also selects a new fork with the given endpoint and block and returns the identifier of the fork
	function createSelectFork(string calldata, uint256) external returns (uint256);

	// Creates _and_ also selects new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction
	function createSelectFork(string calldata, bytes32) external returns (uint256);

	// Creates _and_ also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork
	function createSelectFork(string calldata) external returns (uint256);

	// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.
	function selectFork(uint256) external;

	/// Returns the currently active fork
	/// Reverts if no fork is currently active
	function activeFork() external view returns (uint256);

	// Updates the currently active fork to given block number
	// This is similar to `roll` but for the currently active fork
	function rollFork(uint256) external;

	// Updates the currently active fork to given transaction
	// this will `rollFork` with the number of the block the transaction was mined in and replays all transaction mined before it in the block
	function rollFork(bytes32) external;

	// Updates the given fork to given block number
	function rollFork(uint256 forkId, uint256 blockNumber) external;

	// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block
	function rollFork(uint256 forkId, bytes32 transaction) external;

	// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup
	// Meaning, changes made to the state of this account will be kept when switching forks
	function makePersistent(address) external;

	function makePersistent(address, address) external;

	function makePersistent(address, address, address) external;

	function makePersistent(address[] calldata) external;

	// Revokes persistent status from the address, previously added via `makePersistent`
	function revokePersistent(address) external;

	function revokePersistent(address[] calldata) external;

	// Returns true if the account is marked as persistent
	function isPersistent(address) external view returns (bool);

	// In forking mode, explicitly grant the given address cheatcode access
	function allowCheatcodes(address) external;

	// Fetches the given transaction from the active fork and executes it on the current state
	function transact(bytes32 txHash) external;

	// Fetches the given transaction from the given fork and executes it on the current state
	function transact(uint256 forkId, bytes32 txHash) external;
}