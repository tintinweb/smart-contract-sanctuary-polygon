/**
 *Submitted for verification at polygonscan.com on 2023-07-09
*/

pragma solidity >=0.7.0 <0.9.0;
// SPDX-License-Identifier: MIT

/**
 * Generated by : https://www.cues.sg
 * Cues.sg : We make technology accessible.
 * Contract Type : ERC20 Minting
*/

// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
	function _msgSender() internal view virtual returns (address) {
		return msg.sender;
	}

	function _msgData() internal view virtual returns (bytes calldata) {
		return msg.data;
	}
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
	/**
	 * @dev Returns the amount of tokens in existence.
	 */
	function totalSupply() external view returns (uint256);

	/**
	 * @dev Returns the amount of tokens owned by `account`.
	 */
	function balanceOf(address account) external view returns (uint256);

	/**
	 * @dev Moves `amount` tokens from the caller's account to `recipient`.
	 *
	 * Returns a boolean value indicating whether the operation succeeded.
	 *
	 * Emits a {Transfer} event.
	 */
	function transfer(address recipient, uint256 amount) external returns (bool);

	/**
	 * @dev Returns the remaining number of tokens that `spender` will be
	 * allowed to spend on behalf of `owner` through {transferFrom}. This is
	 * zero by default.
	 *
	 * This value changes when {approve} or {transferFrom} are called.
	 */
	function allowance(address owner, address spender) external view returns (uint256);

	/**
	 * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
	 *
	 * Returns a boolean value indicating whether the operation succeeded.
	 *
	 * IMPORTANT: Beware that changing an allowance with this method brings the risk
	 * that someone may use both the old and the new allowance by unfortunate
	 * transaction ordering. One possible solution to mitigate this race
	 * condition is to first reduce the spender's allowance to 0 and set the
	 * desired value afterwards:
	 * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
	 *
	 * Emits an {Approval} event.
	 */
	function approve(address spender, uint256 amount) external returns (bool);

	/**
	 * @dev Moves `amount` tokens from `sender` to `recipient` using the
	 * allowance mechanism. `amount` is then deducted from the caller's
	 * allowance.
	 *
	 * Returns a boolean value indicating whether the operation succeeded.
	 *
	 * Emits a {Transfer} event.
	 */
	function transferFrom(
		address sender,
		address recipient,
		uint256 amount
	) external returns (bool);

	/**
	 * @dev Emitted when `value` tokens are moved from one account (`from`) to
	 * another (`to`).
	 *
	 * Note that `value` may be zero.
	 */
	event Transfer(address indexed from, address indexed to, uint256 value);

	/**
	 * @dev Emitted when the allowance of a `spender` for an `owner` is set by
	 * a call to {approve}. `value` is the new allowance.
	 */
	event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */



/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
	/**
	 * @dev Returns the name of the token.
	 */
	function name() external view returns (string memory);

	/**
	 * @dev Returns the symbol of the token.
	 */
	function symbol() external view returns (string memory);

	/**
	 * @dev Returns the decimals places of the token.
	 */
	function decimals() external view returns (uint8);
}


contract ERC20 is Context, IERC20, IERC20Metadata {
	mapping(address => uint256) private _balances;

	mapping(address => mapping(address => uint256)) private _allowances;

	uint256 private _totalSupply;

	string private _name;
	string private _symbol;

	/**
	 * @dev Sets the values for {name} and {symbol}.
	 *
	 * The default value of {decimals} is 18. To select a different value for
	 * {decimals} you should overload it.
	 *
	 * All two of these values are immutable: they can only be set once during
	 * construction.
	 */
	constructor(string memory name_, string memory symbol_) {
		_name = name_;
		_symbol = symbol_;
	}

	/**
	 * @dev Returns the name of the token.
	 */
	function name() public view virtual override returns (string memory) {
		return _name;
	}

	/**
	 * @dev Returns the symbol of the token, usually a shorter version of the
	 * name.
	 */
	function symbol() public view virtual override returns (string memory) {
		return _symbol;
	}

	/**
	 * @dev Returns the number of decimals used to get its user representation.
	 * For example, if `decimals` equals `2`, a balance of `505` tokens should
	 * be displayed to a user as `5.05` (`505 / 10 ** 2`).
	 *
	 * Tokens usually opt for a value of 18, imitating the relationship between
	 * Ether and Wei. This is the value {ERC20} uses, unless this function is
	 * overridden;
	 *
	 * NOTE: This information is only used for _display_ purposes: it in
	 * no way affects any of the arithmetic of the contract, including
	 * {IERC20-balanceOf} and {IERC20-transfer}.
	 */
	function decimals() public view virtual override returns (uint8) {
		return 18;
	}

	/**
	 * @dev See {IERC20-totalSupply}.
	 */
	function totalSupply() public view virtual override returns (uint256) {
		return _totalSupply;
	}

	/**
	 * @dev See {IERC20-balanceOf}.
	 */
	function balanceOf(address account) public view virtual override returns (uint256) {
		return _balances[account];
	}

	/**
	 * @dev See {IERC20-transfer}.
	 *
	 * Requirements:
	 *
	 * - `recipient` cannot be the zero address.
	 * - the caller must have a balance of at least `amount`.
	 */
	function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
		_transfer(_msgSender(), recipient, amount);
		return true;
	}

	/**
	 * @dev See {IERC20-allowance}.
	 */
	function allowance(address owner, address spender) public view virtual override returns (uint256) {
		return _allowances[owner][spender];
	}

	/**
	 * @dev See {IERC20-approve}.
	 *
	 * Requirements:
	 *
	 * - `spender` cannot be the zero address.
	 */
	function approve(address spender, uint256 amount) public virtual override returns (bool) {
		_approve(_msgSender(), spender, amount);
		return true;
	}

	/**
	 * @dev See {IERC20-transferFrom}.
	 *
	 * Emits an {Approval} event indicating the updated allowance. This is not
	 * required by the EIP. See the note at the beginning of {ERC20}.
	 *
	 * Requirements:
	 *
	 * - `sender` and `recipient` cannot be the zero address.
	 * - `sender` must have a balance of at least `amount`.
	 * - the caller must have allowance for ``sender``'s tokens of at least
	 * `amount`.
	 */
	function transferFrom(
		address sender,
		address recipient,
		uint256 amount
	) public virtual override returns (bool) {
		_transfer(sender, recipient, amount);

		uint256 currentAllowance = _allowances[sender][_msgSender()];
		require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
		unchecked {
			_approve(sender, _msgSender(), currentAllowance - amount);
		}

		return true;
	}

	/**
	 * @dev Atomically increases the allowance granted to `spender` by the caller.
	 *
	 * This is an alternative to {approve} that can be used as a mitigation for
	 * problems described in {IERC20-approve}.
	 *
	 * Emits an {Approval} event indicating the updated allowance.
	 *
	 * Requirements:
	 *
	 * - `spender` cannot be the zero address.
	 */
	function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
		_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
		return true;
	}

	/**
	 * @dev Atomically decreases the allowance granted to `spender` by the caller.
	 *
	 * This is an alternative to {approve} that can be used as a mitigation for
	 * problems described in {IERC20-approve}.
	 *
	 * Emits an {Approval} event indicating the updated allowance.
	 *
	 * Requirements:
	 *
	 * - `spender` cannot be the zero address.
	 * - `spender` must have allowance for the caller of at least
	 * `subtractedValue`.
	 */
	function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
		uint256 currentAllowance = _allowances[_msgSender()][spender];
		require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
		unchecked {
			_approve(_msgSender(), spender, currentAllowance - subtractedValue);
		}

		return true;
	}

	/**
	 * @dev Moves `amount` of tokens from `sender` to `recipient`.
	 *
	 * This internal function is equivalent to {transfer}, and can be used to
	 * e.g. implement automatic token fees, slashing mechanisms, etc.
	 *
	 * Emits a {Transfer} event.
	 *
	 * Requirements:
	 *
	 * - `sender` cannot be the zero address.
	 * - `recipient` cannot be the zero address.
	 * - `sender` must have a balance of at least `amount`.
	 */
	function _transfer(
		address sender,
		address recipient,
		uint256 amount
	) internal virtual {
		require(sender != address(0), "ERC20: transfer from the zero address");
		require(recipient != address(0), "ERC20: transfer to the zero address");

		_beforeTokenTransfer(sender, recipient, amount);

		uint256 senderBalance = _balances[sender];
		require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
		unchecked {
			_balances[sender] = senderBalance - amount;
		}
		_balances[recipient] += amount;

		emit Transfer(sender, recipient, amount);

		_afterTokenTransfer(sender, recipient, amount);
	}

	/** @dev Creates `amount` tokens and assigns them to `account`, increasing
	 * the total supply.
	 *
	 * Emits a {Transfer} event with `from` set to the zero address.
	 *
	 * Requirements:
	 *
	 * - `account` cannot be the zero address.
	 */
	function _mint(address account, uint256 amount) internal virtual {
		require(account != address(0), "ERC20: mint to the zero address");

		_beforeTokenTransfer(address(0), account, amount);

		_totalSupply += amount;
		_balances[account] += amount;
		emit Transfer(address(0), account, amount);

		_afterTokenTransfer(address(0), account, amount);
	}

	/**
	 * @dev Destroys `amount` tokens from `account`, reducing the
	 * total supply.
	 *
	 * Emits a {Transfer} event with `to` set to the zero address.
	 *
	 * Requirements:
	 *
	 * - `account` cannot be the zero address.
	 * - `account` must have at least `amount` tokens.
	 */
	function _burn(address account, uint256 amount) internal virtual {
		require(account != address(0), "ERC20: burn from the zero address");

		_beforeTokenTransfer(account, address(0), amount);

		uint256 accountBalance = _balances[account];
		require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
		unchecked {
			_balances[account] = accountBalance - amount;
		}
		_totalSupply -= amount;

		emit Transfer(account, address(0), amount);

		_afterTokenTransfer(account, address(0), amount);
	}

	/**
	 * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
	 *
	 * This internal function is equivalent to `approve`, and can be used to
	 * e.g. set automatic allowances for certain subsystems, etc.
	 *
	 * Emits an {Approval} event.
	 *
	 * Requirements:
	 *
	 * - `owner` cannot be the zero address.
	 * - `spender` cannot be the zero address.
	 */
	function _approve(
		address owner,
		address spender,
		uint256 amount
	) internal virtual {
		require(owner != address(0), "ERC20: approve from the zero address");
		require(spender != address(0), "ERC20: approve to the zero address");

		_allowances[owner][spender] = amount;
		emit Approval(owner, spender, amount);
	}

	/**
	 * @dev Hook that is called before any transfer of tokens. This includes
	 * minting and burning.
	 *
	 * Calling conditions:
	 *
	 * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
	 * will be transferred to `to`.
	 * - when `from` is zero, `amount` tokens will be minted for `to`.
	 * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
	 * - `from` and `to` are never both zero.
	 *
	 * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
	 */
	function _beforeTokenTransfer(
		address from,
		address to,
		uint256 amount
	) internal virtual {}

	/**
	 * @dev Hook that is called after any transfer of tokens. This includes
	 * minting and burning.
	 *
	 * Calling conditions:
	 *
	 * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
	 * has been transferred to `to`.
	 * - when `from` is zero, `amount` tokens have been minted for `to`.
	 * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
	 * - `from` and `to` are never both zero.
	 *
	 * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
	 */
	function _afterTokenTransfer(
		address from,
		address to,
		uint256 amount
	) internal virtual {}
}

contract Coin_STARD is ERC20 {

	address owner;
	event Burn (address indexed account);
	event Mint (address indexed mintBy);
	uint256 public mint_WrappedUSDRAmtInBank = uint256(0);
	address[] public transferTaxExclusionList0;
	address[] public burnExclusionList;

	constructor() ERC20("STARDollars", "STARD") {
		owner = 0xBDCBD23316AAA2aDecA774e107868adCE38cC69E;
		super._mint(address(0xBDCBD23316AAA2aDecA774e107868adCE38cC69E), uint256(30000000000000000000000));
	}

	//This function allows the owner to specify an address that will take over ownership rights instead. Please double check the address provided as once the function is executed, only the new owner will be able to change the address back.
	function changeOwner(address _newOwner) public onlyOwner {
		owner = _newOwner;
	}

	modifier onlyOwner() {
		require(msg.sender == owner);
		_;
	}

	function isInside_address(address _j0, address[] memory _j1) internal pure returns (bool){
		for (uint _i = 0; _i < _j1.length; _i++){
			if (_j0 == _j1[_i]){
				return true;
			}
		}
		return false;
	}

/**
 * Function transfer
 * The function takes in 2 variables, (an address) receipient, and (zero or a positive integer) _amount. It can be called by functions both inside and outside of this contract. It does the following :
 * creates an internal variable taxAmt with initial value 0
 * if check if (the address that called this function) is inside burnExclusionList then it does nothing else otherwise (calls super._burn with variable account as (the address that called this function), variable amount as ((_amount) / (1000)); and then updates taxAmt as (taxAmt) + ((_amount) / (1000)))
 * if check if (the address that called this function) is inside transferTaxExclusionList0 then it does nothing else otherwise (calls super.transfer with variable receipient as Address 0xBDCBD23316AAA2aDecA774e107868adCE38cC69E, variable amount as ((_amount) / (1000)); and then updates taxAmt as ((_amount) / (1000)) + (taxAmt))
 * calls super.transfer with variable receipient as receipient, variable amount as ((_amount) - (taxAmt))
 * returns true as output
 * This function overrides the original transfer.
*/
	function transfer(address receipient, uint256 _amount) public override returns (bool) {
		uint256 taxAmt = uint256(0);
		if (isInside_address(msg.sender, burnExclusionList)){
		}else{
			super._burn(msg.sender, (_amount / uint256(1000)));
			taxAmt  = (taxAmt + (_amount / uint256(1000)));
		}
		if (isInside_address(msg.sender, transferTaxExclusionList0)){
		}else{
			super.transfer(address(0xBDCBD23316AAA2aDecA774e107868adCE38cC69E), (_amount / uint256(1000)));
			taxAmt  = ((_amount / uint256(1000)) + taxAmt);
		}
		super.transfer(receipient, (_amount - taxAmt));
		return true;
	}

/**
 * Function addToBurnExclusionList
 * The function takes in 1 variable, (an address) _addressToAdd. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * if check if _addressToAdd is inside burnExclusionList then it does nothing else otherwise (adds _addressToAdd to burnExclusionList)
*/
	function addToBurnExclusionList(address _addressToAdd) public onlyOwner {
		if (isInside_address(_addressToAdd, burnExclusionList)){
		}else{
			burnExclusionList.push(_addressToAdd);
		}
	}

/**
 * Function removeFromBurnExclusionList
 * The function takes in 1 variable, (an address) _addressToAdd. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * if check if _addressToAdd is inside burnExclusionList then (repeat length of burnExclusionList times with loop variable i0 :  (if _addressToAdd is equals to (burnExclusionList with element (Loop Variable i0) - (1)) then (if (length of burnExclusionList) is strictly greater than (Loop Variable i0) then (updates burnExclusionList (Element (Loop Variable i0) - (1)) as burnExclusionList with element (length of burnExclusionList) - (1)); and then removes last item from burnExclusionList)))
*/
	function removeFromBurnExclusionList(address _addressToAdd) public onlyOwner {
		if (isInside_address(_addressToAdd, burnExclusionList)){
			for (uint i0 = (burnExclusionList).length; i0 > 0; i0--){
				if ((_addressToAdd == burnExclusionList[(i0 - uint256(1))])){
					if (((burnExclusionList).length > i0)){
						burnExclusionList[(i0 - uint256(1))]  = burnExclusionList[((burnExclusionList).length - uint256(1))];
					}
					burnExclusionList.pop();
				}
			}
		}
	}

/**
 * Function mint
 * Notes for _amt : Specify 1 coin here as 10^18
 * The function takes in 1 variable, (zero or a positive integer) _amt. It can be called by functions both inside and outside of this contract. It does the following :
 * calls ERC20(Address 0xAF0D9D65fC54de245cdA37af3d18cbEc860A4D4b)'s at transferFrom function  with variable sender as (the address that called this function), variable recipient as (the address of this contract), variable amount as _amt
 * updates mint_WrappedUSDRAmtInBank as (mint_WrappedUSDRAmtInBank) + (((_amt) * (100)) / (100))
 * calls super._mint with variable account as (the address that called this function), variable amount as _amt
 * emits event Mint with inputs the address that called this function
*/
	function mint(uint256 _amt) public {
		ERC20(address(0xAF0D9D65fC54de245cdA37af3d18cbEc860A4D4b)).transferFrom(msg.sender, address(this), uint256(_amt));
		mint_WrappedUSDRAmtInBank  = (mint_WrappedUSDRAmtInBank + ((uint256(_amt) * uint256(100)) / uint256(100)));
		super._mint(msg.sender, _amt);
		emit Mint(msg.sender);
	}

/**
 * Function mint_WrappedUSDRTaxWithdrawAmt
 * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * checks that (ERC20(Address 0xAF0D9D65fC54de245cdA37af3d18cbEc860A4D4b)'s at balanceOf function  with variable recipient as (the address of this contract)) is greater than or equals to mint_WrappedUSDRAmtInBank
 * if mint_WrappedUSDRAmtInBank is strictly greater than 0 then (calls ERC20(Address 0xAF0D9D65fC54de245cdA37af3d18cbEc860A4D4b)'s at transfer function  with variable recipient as (the address that called this function), variable amount as mint_WrappedUSDRAmtInBank)
 * updates mint_WrappedUSDRAmtInBank as 0
*/
	function mint_WrappedUSDRTaxWithdrawAmt() public onlyOwner {
		require((ERC20(address(0xAF0D9D65fC54de245cdA37af3d18cbEc860A4D4b)).balanceOf(address(this)) >= mint_WrappedUSDRAmtInBank), "Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.");
		if ((mint_WrappedUSDRAmtInBank > uint256(0))){
			ERC20(address(0xAF0D9D65fC54de245cdA37af3d18cbEc860A4D4b)).transfer(msg.sender, mint_WrappedUSDRAmtInBank);
		}
		mint_WrappedUSDRAmtInBank  = uint256(0);
	}

/**
 * Function addToTransferTaxExclusionList0
 * The function takes in 1 variable, (an address) _addressToAdd. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * if check if _addressToAdd is inside transferTaxExclusionList0 then it does nothing else otherwise (adds _addressToAdd to transferTaxExclusionList0)
*/
	function addToTransferTaxExclusionList0(address _addressToAdd) public onlyOwner {
		if (isInside_address(_addressToAdd, transferTaxExclusionList0)){
		}else{
			transferTaxExclusionList0.push(_addressToAdd);
		}
	}

/**
 * Function removeFromTransferTaxExclusionList0
 * The function takes in 1 variable, (an address) _addressToAdd. It can be called by functions both inside and outside of this contract. It does the following :
 * checks that the function is called by the owner of the contract
 * if check if _addressToAdd is inside transferTaxExclusionList0 then (repeat length of transferTaxExclusionList0 times with loop variable i0 :  (if _addressToAdd is equals to (transferTaxExclusionList0 with element (Loop Variable i0) - (1)) then (if (length of transferTaxExclusionList0) is strictly greater than (Loop Variable i0) then (updates transferTaxExclusionList0 (Element (Loop Variable i0) - (1)) as transferTaxExclusionList0 with element (length of transferTaxExclusionList0) - (1)); and then removes last item from transferTaxExclusionList0)))
*/
	function removeFromTransferTaxExclusionList0(address _addressToAdd) public onlyOwner {
		if (isInside_address(_addressToAdd, transferTaxExclusionList0)){
			for (uint i0 = (transferTaxExclusionList0).length; i0 > 0; i0--){
				if ((_addressToAdd == transferTaxExclusionList0[(i0 - uint256(1))])){
					if (((transferTaxExclusionList0).length > i0)){
						transferTaxExclusionList0[(i0 - uint256(1))]  = transferTaxExclusionList0[((transferTaxExclusionList0).length - uint256(1))];
					}
					transferTaxExclusionList0.pop();
				}
			}
		}
	}

/**
 * Function burn
 * The function takes in 1 variable, (zero or a positive integer) _amount. It can be called by functions both inside and outside of this contract. It does the following :
 * calls super._burn with variable account as (the address that called this function), variable amount as _amount
 * returns true as output
*/
	function burn(uint256 _amount) public returns (bool) {
		super._burn(msg.sender, _amount);
		return true;
	}
}