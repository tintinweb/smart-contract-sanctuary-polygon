/**
 *Submitted for verification at polygonscan.com on 2023-07-13
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {
    function verify(
        uint256[2] calldata pubInputs,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[937] memory transcript;
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0xc0, mod(calldataload(0x24), f_q))mstore(0x80, 12465365209991102708218965085634358016705659255229623734062638050039340982066)        {            let x := calldataload(0x84)            mstore(0xe0, x)            let y := calldataload(0xa4)            mstore(0x100, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xc4)            mstore(0x120, x)            let y := calldataload(0xe4)            mstore(0x140, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x104)            mstore(0x160, x)            let y := calldataload(0x124)            mstore(0x180, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1a0, keccak256(0x80, 288)){            let hash := mload(0x1a0)            mstore(0x1c0, mod(hash, f_q))            mstore(0x1e0, hash)        }        {            let x := calldataload(0x144)            mstore(0x200, x)            let y := calldataload(0x164)            mstore(0x220, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x184)            mstore(0x240, x)            let y := calldataload(0x1a4)            mstore(0x260, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1c4)            mstore(0x280, x)            let y := calldataload(0x1e4)            mstore(0x2a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x204)            mstore(0x2c0, x)            let y := calldataload(0x224)            mstore(0x2e0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x300, keccak256(0x1e0, 288)){            let hash := mload(0x300)            mstore(0x320, mod(hash, f_q))            mstore(0x340, hash)        }mstore8(0x360, 1)mstore(0x360, keccak256(0x340, 33)){            let hash := mload(0x360)            mstore(0x380, mod(hash, f_q))            mstore(0x3a0, hash)        }        {            let x := calldataload(0x244)            mstore(0x3c0, x)            let y := calldataload(0x264)            mstore(0x3e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x284)            mstore(0x400, x)            let y := calldataload(0x2a4)            mstore(0x420, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2c4)            mstore(0x440, x)            let y := calldataload(0x2e4)            mstore(0x460, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x304)            mstore(0x480, x)            let y := calldataload(0x324)            mstore(0x4a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x344)            mstore(0x4c0, x)            let y := calldataload(0x364)            mstore(0x4e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x384)            mstore(0x500, x)            let y := calldataload(0x3a4)            mstore(0x520, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x540, keccak256(0x3a0, 416)){            let hash := mload(0x540)            mstore(0x560, mod(hash, f_q))            mstore(0x580, hash)        }        {            let x := calldataload(0x3c4)            mstore(0x5a0, x)            let y := calldataload(0x3e4)            mstore(0x5c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x404)            mstore(0x5e0, x)            let y := calldataload(0x424)            mstore(0x600, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x444)            mstore(0x620, x)            let y := calldataload(0x464)            mstore(0x640, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x484)            mstore(0x660, x)            let y := calldataload(0x4a4)            mstore(0x680, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x6a0, keccak256(0x580, 288)){            let hash := mload(0x6a0)            mstore(0x6c0, mod(hash, f_q))            mstore(0x6e0, hash)        }mstore(0x700, mod(calldataload(0x4c4), f_q))mstore(0x720, mod(calldataload(0x4e4), f_q))mstore(0x740, mod(calldataload(0x504), f_q))mstore(0x760, mod(calldataload(0x524), f_q))mstore(0x780, mod(calldataload(0x544), f_q))mstore(0x7a0, mod(calldataload(0x564), f_q))mstore(0x7c0, mod(calldataload(0x584), f_q))mstore(0x7e0, mod(calldataload(0x5a4), f_q))mstore(0x800, mod(calldataload(0x5c4), f_q))mstore(0x820, mod(calldataload(0x5e4), f_q))mstore(0x840, mod(calldataload(0x604), f_q))mstore(0x860, mod(calldataload(0x624), f_q))mstore(0x880, mod(calldataload(0x644), f_q))mstore(0x8a0, mod(calldataload(0x664), f_q))mstore(0x8c0, mod(calldataload(0x684), f_q))mstore(0x8e0, mod(calldataload(0x6a4), f_q))mstore(0x900, mod(calldataload(0x6c4), f_q))mstore(0x920, mod(calldataload(0x6e4), f_q))mstore(0x940, mod(calldataload(0x704), f_q))mstore(0x960, mod(calldataload(0x724), f_q))mstore(0x980, mod(calldataload(0x744), f_q))mstore(0x9a0, mod(calldataload(0x764), f_q))mstore(0x9c0, mod(calldataload(0x784), f_q))mstore(0x9e0, mod(calldataload(0x7a4), f_q))mstore(0xa00, mod(calldataload(0x7c4), f_q))mstore(0xa20, mod(calldataload(0x7e4), f_q))mstore(0xa40, mod(calldataload(0x804), f_q))mstore(0xa60, mod(calldataload(0x824), f_q))mstore(0xa80, mod(calldataload(0x844), f_q))mstore(0xaa0, mod(calldataload(0x864), f_q))mstore(0xac0, mod(calldataload(0x884), f_q))mstore(0xae0, mod(calldataload(0x8a4), f_q))mstore(0xb00, mod(calldataload(0x8c4), f_q))mstore(0xb20, mod(calldataload(0x8e4), f_q))mstore(0xb40, mod(calldataload(0x904), f_q))mstore(0xb60, mod(calldataload(0x924), f_q))mstore(0xb80, mod(calldataload(0x944), f_q))mstore(0xba0, mod(calldataload(0x964), f_q))mstore(0xbc0, mod(calldataload(0x984), f_q))mstore(0xbe0, mod(calldataload(0x9a4), f_q))mstore(0xc00, mod(calldataload(0x9c4), f_q))mstore(0xc20, mod(calldataload(0x9e4), f_q))mstore(0xc40, keccak256(0x6e0, 1376)){            let hash := mload(0xc40)            mstore(0xc60, mod(hash, f_q))            mstore(0xc80, hash)        }        {            let x := calldataload(0xa04)            mstore(0xca0, x)            let y := calldataload(0xa24)            mstore(0xcc0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xa44)            mstore(0xce0, x)            let y := calldataload(0xa64)            mstore(0xd00, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xa84)            mstore(0xd20, x)            let y := calldataload(0xaa4)            mstore(0xd40, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xac4)            mstore(0xd60, x)            let y := calldataload(0xae4)            mstore(0xd80, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xda0, keccak256(0xc80, 288)){            let hash := mload(0xda0)            mstore(0xdc0, mod(hash, f_q))            mstore(0xde0, hash)        }mstore(0xe00, mulmod(mload(0x6c0), mload(0x6c0), f_q))mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))mstore(0xe40, mulmod(mload(0xe20), mload(0xe20), f_q))mstore(0xe60, mulmod(mload(0xe40), mload(0xe40), f_q))mstore(0xe80, mulmod(mload(0xe60), mload(0xe60), f_q))mstore(0xea0, mulmod(mload(0xe80), mload(0xe80), f_q))mstore(0xec0, mulmod(mload(0xea0), mload(0xea0), f_q))mstore(0xee0, mulmod(mload(0xec0), mload(0xec0), f_q))mstore(0xf00, mulmod(mload(0xee0), mload(0xee0), f_q))mstore(0xf20, mulmod(mload(0xf00), mload(0xf00), f_q))mstore(0xf40, mulmod(mload(0xf20), mload(0xf20), f_q))mstore(0xf60, mulmod(mload(0xf40), mload(0xf40), f_q))mstore(0xf80, mulmod(mload(0xf60), mload(0xf60), f_q))mstore(0xfa0, mulmod(mload(0xf80), mload(0xf80), f_q))mstore(0xfc0, mulmod(mload(0xfa0), mload(0xfa0), f_q))mstore(0xfe0, mulmod(mload(0xfc0), mload(0xfc0), f_q))mstore(0x1000, mulmod(mload(0xfe0), mload(0xfe0), f_q))mstore(0x1020, addmod(mload(0x1000), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1040, mulmod(mload(0x1020), 21888075877798810139885396174900942254113179552665176677420557563313886988289, f_q))mstore(0x1060, mulmod(mload(0x1040), 18801136258871406524726641978934912926273987048785013233465874845411408769764, f_q))mstore(0x1080, addmod(mload(0x6c0), 3087106612967868697519763766322362162274377351631021110232329341164399725853, f_q))mstore(0x10a0, mulmod(mload(0x1040), 13137266746974929847674828718073699700748973485900204084410541910719500618841, f_q))mstore(0x10c0, addmod(mload(0x6c0), 8750976124864345374571577027183575387799390914515830259287662275856307876776, f_q))mstore(0x10e0, mulmod(mload(0x1040), 14204982954615820785730815556166377574172276341958019443243371773666809943588, f_q))mstore(0x1100, addmod(mload(0x6c0), 7683259917223454436515590189090897514376088058458014900454832412908998552029, f_q))mstore(0x1120, mulmod(mload(0x1040), 9798514389911400568976296423560720718971335345616984532185711118739339214189, f_q))mstore(0x1140, addmod(mload(0x6c0), 12089728481927874653270109321696554369577029054799049811512493067836469281428, f_q))mstore(0x1160, mulmod(mload(0x1040), 5857228514216831962358810454360739186987616060007133076514874820078026801648, f_q))mstore(0x1180, addmod(mload(0x6c0), 16031014357622443259887595290896535901560748340408901267183329366497781693969, f_q))mstore(0x11a0, mulmod(mload(0x1040), 11402394834529375719535454173347509224290498423785625657829583372803806900475, f_q))mstore(0x11c0, addmod(mload(0x6c0), 10485848037309899502710951571909765864257865976630408685868620813772001595142, f_q))mstore(0x11e0, mulmod(mload(0x1040), 1, f_q))mstore(0x1200, addmod(mload(0x6c0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q)){            let prod := mload(0x1080)                prod := mulmod(mload(0x10c0), prod, f_q)                mstore(0x1220, prod)                            prod := mulmod(mload(0x1100), prod, f_q)                mstore(0x1240, prod)                            prod := mulmod(mload(0x1140), prod, f_q)                mstore(0x1260, prod)                            prod := mulmod(mload(0x1180), prod, f_q)                mstore(0x1280, prod)                            prod := mulmod(mload(0x11c0), prod, f_q)                mstore(0x12a0, prod)                            prod := mulmod(mload(0x1200), prod, f_q)                mstore(0x12c0, prod)                            prod := mulmod(mload(0x1020), prod, f_q)                mstore(0x12e0, prod)                    }mstore(0x1320, 32)mstore(0x1340, 32)mstore(0x1360, 32)mstore(0x1380, mload(0x12e0))mstore(0x13a0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x13c0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x1320, 0xc0, 0x1300, 0x20), 1), success){                        let inv := mload(0x1300)            let v                            v := mload(0x1020)                    mstore(0x1020, mulmod(mload(0x12c0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1200)                    mstore(0x1200, mulmod(mload(0x12a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x11c0)                    mstore(0x11c0, mulmod(mload(0x1280), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1180)                    mstore(0x1180, mulmod(mload(0x1260), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1140)                    mstore(0x1140, mulmod(mload(0x1240), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1100)                    mstore(0x1100, mulmod(mload(0x1220), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x10c0)                    mstore(0x10c0, mulmod(mload(0x1080), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x1080, inv)        }mstore(0x13e0, mulmod(mload(0x1060), mload(0x1080), f_q))mstore(0x1400, mulmod(mload(0x10a0), mload(0x10c0), f_q))mstore(0x1420, mulmod(mload(0x10e0), mload(0x1100), f_q))mstore(0x1440, mulmod(mload(0x1120), mload(0x1140), f_q))mstore(0x1460, mulmod(mload(0x1160), mload(0x1180), f_q))mstore(0x1480, mulmod(mload(0x11a0), mload(0x11c0), f_q))mstore(0x14a0, mulmod(mload(0x11e0), mload(0x1200), f_q)){            let result := mulmod(mload(0x14a0), mload(0xa0), f_q)mstore(0x14c0, result)        }{            let result := mulmod(mload(0x14a0), mload(0xc0), f_q)mstore(0x14e0, result)        }mstore(0x1500, addmod(1, sub(f_q, mload(0x880)), f_q))mstore(0x1520, mulmod(mload(0x1500), mload(0x880), f_q))mstore(0x1540, addmod(2, sub(f_q, mload(0x880)), f_q))mstore(0x1560, mulmod(mload(0x1540), mload(0x1520), f_q))mstore(0x1580, mulmod(mload(0x720), mload(0x700), f_q))mstore(0x15a0, addmod(mload(0x1580), mload(0x760), f_q))mstore(0x15c0, addmod(mload(0x740), sub(f_q, mload(0x15a0)), f_q))mstore(0x15e0, mulmod(mload(0x15c0), mload(0x1560), f_q))mstore(0x1600, mulmod(mload(0x560), mload(0x15e0), f_q))mstore(0x1620, addmod(1, sub(f_q, mload(0x8c0)), f_q))mstore(0x1640, mulmod(mload(0x1620), mload(0x8c0), f_q))mstore(0x1660, addmod(2, sub(f_q, mload(0x8c0)), f_q))mstore(0x1680, mulmod(mload(0x1660), mload(0x1640), f_q))mstore(0x16a0, addmod(mload(0x740), sub(f_q, mload(0x720)), f_q))mstore(0x16c0, mulmod(mload(0x16a0), mload(0x1680), f_q))mstore(0x16e0, addmod(mload(0x1600), mload(0x16c0), f_q))mstore(0x1700, mulmod(mload(0x560), mload(0x16e0), f_q))mstore(0x1720, mulmod(mload(0x1540), mload(0x880), f_q))mstore(0x1740, addmod(3, sub(f_q, mload(0x880)), f_q))mstore(0x1760, mulmod(mload(0x1740), mload(0x1720), f_q))mstore(0x1780, addmod(mload(0x700), mload(0x720), f_q))mstore(0x17a0, addmod(mload(0x740), sub(f_q, mload(0x1780)), f_q))mstore(0x17c0, mulmod(mload(0x17a0), mload(0x1760), f_q))mstore(0x17e0, addmod(mload(0x1700), mload(0x17c0), f_q))mstore(0x1800, mulmod(mload(0x560), mload(0x17e0), f_q))mstore(0x1820, addmod(1, sub(f_q, mload(0x8a0)), f_q))mstore(0x1840, mulmod(mload(0x1820), mload(0x8a0), f_q))mstore(0x1860, addmod(2, sub(f_q, mload(0x8a0)), f_q))mstore(0x1880, mulmod(mload(0x1860), mload(0x1840), f_q))mstore(0x18a0, addmod(mload(0x740), sub(f_q, mload(0x1580)), f_q))mstore(0x18c0, mulmod(mload(0x18a0), mload(0x1880), f_q))mstore(0x18e0, addmod(mload(0x1800), mload(0x18c0), f_q))mstore(0x1900, mulmod(mload(0x560), mload(0x18e0), f_q))mstore(0x1920, mulmod(mload(0x1740), mload(0x1520), f_q))mstore(0x1940, addmod(mload(0x700), sub(f_q, mload(0x720)), f_q))mstore(0x1960, addmod(mload(0x740), sub(f_q, mload(0x1940)), f_q))mstore(0x1980, mulmod(mload(0x1960), mload(0x1920), f_q))mstore(0x19a0, addmod(mload(0x1900), mload(0x1980), f_q))mstore(0x19c0, mulmod(mload(0x560), mload(0x19a0), f_q))mstore(0x19e0, mulmod(mload(0x1860), mload(0x8a0), f_q))mstore(0x1a00, addmod(3, sub(f_q, mload(0x8a0)), f_q))mstore(0x1a20, mulmod(mload(0x1a00), mload(0x19e0), f_q))mstore(0x1a40, addmod(mload(0x720), mload(0x760), f_q))mstore(0x1a60, addmod(mload(0x740), sub(f_q, mload(0x1a40)), f_q))mstore(0x1a80, mulmod(mload(0x1a60), mload(0x1a20), f_q))mstore(0x1aa0, addmod(mload(0x19c0), mload(0x1a80), f_q))mstore(0x1ac0, mulmod(mload(0x560), mload(0x1aa0), f_q))mstore(0x1ae0, mulmod(mload(0x1a00), mload(0x1840), f_q))mstore(0x1b00, addmod(mload(0x740), sub(f_q, sub(f_q, mload(0x720))), f_q))mstore(0x1b20, mulmod(mload(0x1b00), mload(0x1ae0), f_q))mstore(0x1b40, addmod(mload(0x1ac0), mload(0x1b20), f_q))mstore(0x1b60, mulmod(mload(0x560), mload(0x1b40), f_q))mstore(0x1b80, mulmod(mload(0x1660), mload(0x8c0), f_q))mstore(0x1ba0, addmod(3, sub(f_q, mload(0x8c0)), f_q))mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x1b80), f_q))mstore(0x1be0, addmod(mload(0x720), sub(f_q, mload(0x740)), f_q))mstore(0x1c00, mulmod(mload(0x1be0), mload(0x1bc0), f_q))mstore(0x1c20, addmod(mload(0x1b60), mload(0x1c00), f_q))mstore(0x1c40, mulmod(mload(0x560), mload(0x1c20), f_q))mstore(0x1c60, mulmod(mload(0x1ba0), mload(0x1640), f_q))mstore(0x1c80, mulmod(mload(0x720), mload(0x1c60), f_q))mstore(0x1ca0, addmod(mload(0x1c40), mload(0x1c80), f_q))mstore(0x1cc0, mulmod(mload(0x560), mload(0x1ca0), f_q))mstore(0x1ce0, addmod(mload(0x720), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1d00, mulmod(mload(0x1ce0), mload(0x720), f_q))mstore(0x1d20, mulmod(mload(0x1d00), mload(0x8e0), f_q))mstore(0x1d40, addmod(mload(0x1cc0), mload(0x1d20), f_q))mstore(0x1d60, mulmod(mload(0x560), mload(0x1d40), f_q))mstore(0x1d80, addmod(1, sub(f_q, mload(0xa00)), f_q))mstore(0x1da0, mulmod(mload(0x1d80), mload(0x14a0), f_q))mstore(0x1dc0, addmod(mload(0x1d60), mload(0x1da0), f_q))mstore(0x1de0, mulmod(mload(0x560), mload(0x1dc0), f_q))mstore(0x1e00, mulmod(mload(0xac0), mload(0xac0), f_q))mstore(0x1e20, addmod(mload(0x1e00), sub(f_q, mload(0xac0)), f_q))mstore(0x1e40, mulmod(mload(0x1e20), mload(0x13e0), f_q))mstore(0x1e60, addmod(mload(0x1de0), mload(0x1e40), f_q))mstore(0x1e80, mulmod(mload(0x560), mload(0x1e60), f_q))mstore(0x1ea0, addmod(mload(0xa60), sub(f_q, mload(0xa40)), f_q))mstore(0x1ec0, mulmod(mload(0x1ea0), mload(0x14a0), f_q))mstore(0x1ee0, addmod(mload(0x1e80), mload(0x1ec0), f_q))mstore(0x1f00, mulmod(mload(0x560), mload(0x1ee0), f_q))mstore(0x1f20, addmod(mload(0xac0), sub(f_q, mload(0xaa0)), f_q))mstore(0x1f40, mulmod(mload(0x1f20), mload(0x14a0), f_q))mstore(0x1f60, addmod(mload(0x1f00), mload(0x1f40), f_q))mstore(0x1f80, mulmod(mload(0x560), mload(0x1f60), f_q))mstore(0x1fa0, addmod(1, sub(f_q, mload(0x13e0)), f_q))mstore(0x1fc0, addmod(mload(0x1400), mload(0x1420), f_q))mstore(0x1fe0, addmod(mload(0x1fc0), mload(0x1440), f_q))mstore(0x2000, addmod(mload(0x1fe0), mload(0x1460), f_q))mstore(0x2020, addmod(mload(0x2000), mload(0x1480), f_q))mstore(0x2040, addmod(mload(0x1fa0), sub(f_q, mload(0x2020)), f_q))mstore(0x2060, mulmod(mload(0x920), mload(0x320), f_q))mstore(0x2080, addmod(mload(0x700), mload(0x2060), f_q))mstore(0x20a0, addmod(mload(0x2080), mload(0x380), f_q))mstore(0x20c0, mulmod(mload(0x940), mload(0x320), f_q))mstore(0x20e0, addmod(mload(0x720), mload(0x20c0), f_q))mstore(0x2100, addmod(mload(0x20e0), mload(0x380), f_q))mstore(0x2120, mulmod(mload(0x2100), mload(0x20a0), f_q))mstore(0x2140, mulmod(mload(0x960), mload(0x320), f_q))mstore(0x2160, addmod(mload(0x740), mload(0x2140), f_q))mstore(0x2180, addmod(mload(0x2160), mload(0x380), f_q))mstore(0x21a0, mulmod(mload(0x2180), mload(0x2120), f_q))mstore(0x21c0, mulmod(mload(0x21a0), mload(0xa20), f_q))mstore(0x21e0, mulmod(1, mload(0x320), f_q))mstore(0x2200, mulmod(mload(0x6c0), mload(0x21e0), f_q))mstore(0x2220, addmod(mload(0x700), mload(0x2200), f_q))mstore(0x2240, addmod(mload(0x2220), mload(0x380), f_q))mstore(0x2260, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x320), f_q))mstore(0x2280, mulmod(mload(0x6c0), mload(0x2260), f_q))mstore(0x22a0, addmod(mload(0x720), mload(0x2280), f_q))mstore(0x22c0, addmod(mload(0x22a0), mload(0x380), f_q))mstore(0x22e0, mulmod(mload(0x22c0), mload(0x2240), f_q))mstore(0x2300, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x320), f_q))mstore(0x2320, mulmod(mload(0x6c0), mload(0x2300), f_q))mstore(0x2340, addmod(mload(0x740), mload(0x2320), f_q))mstore(0x2360, addmod(mload(0x2340), mload(0x380), f_q))mstore(0x2380, mulmod(mload(0x2360), mload(0x22e0), f_q))mstore(0x23a0, mulmod(mload(0x2380), mload(0xa00), f_q))mstore(0x23c0, addmod(mload(0x21c0), sub(f_q, mload(0x23a0)), f_q))mstore(0x23e0, mulmod(mload(0x23c0), mload(0x2040), f_q))mstore(0x2400, addmod(mload(0x1f80), mload(0x23e0), f_q))mstore(0x2420, mulmod(mload(0x560), mload(0x2400), f_q))mstore(0x2440, mulmod(mload(0x980), mload(0x320), f_q))mstore(0x2460, addmod(mload(0x780), mload(0x2440), f_q))mstore(0x2480, addmod(mload(0x2460), mload(0x380), f_q))mstore(0x24a0, mulmod(mload(0x9a0), mload(0x320), f_q))mstore(0x24c0, addmod(mload(0x14c0), mload(0x24a0), f_q))mstore(0x24e0, addmod(mload(0x24c0), mload(0x380), f_q))mstore(0x2500, mulmod(mload(0x24e0), mload(0x2480), f_q))mstore(0x2520, mulmod(mload(0x9c0), mload(0x320), f_q))mstore(0x2540, addmod(mload(0x14e0), mload(0x2520), f_q))mstore(0x2560, addmod(mload(0x2540), mload(0x380), f_q))mstore(0x2580, mulmod(mload(0x2560), mload(0x2500), f_q))mstore(0x25a0, mulmod(mload(0x2580), mload(0xa80), f_q))mstore(0x25c0, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x320), f_q))mstore(0x25e0, mulmod(mload(0x6c0), mload(0x25c0), f_q))mstore(0x2600, addmod(mload(0x780), mload(0x25e0), f_q))mstore(0x2620, addmod(mload(0x2600), mload(0x380), f_q))mstore(0x2640, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x320), f_q))mstore(0x2660, mulmod(mload(0x6c0), mload(0x2640), f_q))mstore(0x2680, addmod(mload(0x14c0), mload(0x2660), f_q))mstore(0x26a0, addmod(mload(0x2680), mload(0x380), f_q))mstore(0x26c0, mulmod(mload(0x26a0), mload(0x2620), f_q))mstore(0x26e0, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x320), f_q))mstore(0x2700, mulmod(mload(0x6c0), mload(0x26e0), f_q))mstore(0x2720, addmod(mload(0x14e0), mload(0x2700), f_q))mstore(0x2740, addmod(mload(0x2720), mload(0x380), f_q))mstore(0x2760, mulmod(mload(0x2740), mload(0x26c0), f_q))mstore(0x2780, mulmod(mload(0x2760), mload(0xa60), f_q))mstore(0x27a0, addmod(mload(0x25a0), sub(f_q, mload(0x2780)), f_q))mstore(0x27c0, mulmod(mload(0x27a0), mload(0x2040), f_q))mstore(0x27e0, addmod(mload(0x2420), mload(0x27c0), f_q))mstore(0x2800, mulmod(mload(0x560), mload(0x27e0), f_q))mstore(0x2820, mulmod(mload(0x9e0), mload(0x320), f_q))mstore(0x2840, addmod(mload(0x7a0), mload(0x2820), f_q))mstore(0x2860, addmod(mload(0x2840), mload(0x380), f_q))mstore(0x2880, mulmod(mload(0x2860), mload(0xae0), f_q))mstore(0x28a0, mulmod(5625741653535312224677218588085279924365897425605943700675464992185016992283, mload(0x320), f_q))mstore(0x28c0, mulmod(mload(0x6c0), mload(0x28a0), f_q))mstore(0x28e0, addmod(mload(0x7a0), mload(0x28c0), f_q))mstore(0x2900, addmod(mload(0x28e0), mload(0x380), f_q))mstore(0x2920, mulmod(mload(0x2900), mload(0xac0), f_q))mstore(0x2940, addmod(mload(0x2880), sub(f_q, mload(0x2920)), f_q))mstore(0x2960, mulmod(mload(0x2940), mload(0x2040), f_q))mstore(0x2980, addmod(mload(0x2800), mload(0x2960), f_q))mstore(0x29a0, mulmod(mload(0x560), mload(0x2980), f_q))mstore(0x29c0, addmod(1, sub(f_q, mload(0xb00)), f_q))mstore(0x29e0, mulmod(mload(0x29c0), mload(0x14a0), f_q))mstore(0x2a00, addmod(mload(0x29a0), mload(0x29e0), f_q))mstore(0x2a20, mulmod(mload(0x560), mload(0x2a00), f_q))mstore(0x2a40, mulmod(mload(0xb00), mload(0xb00), f_q))mstore(0x2a60, addmod(mload(0x2a40), sub(f_q, mload(0xb00)), f_q))mstore(0x2a80, mulmod(mload(0x2a60), mload(0x13e0), f_q))mstore(0x2aa0, addmod(mload(0x2a20), mload(0x2a80), f_q))mstore(0x2ac0, mulmod(mload(0x560), mload(0x2aa0), f_q))mstore(0x2ae0, addmod(mload(0xb40), mload(0x320), f_q))mstore(0x2b00, mulmod(mload(0x2ae0), mload(0xb20), f_q))mstore(0x2b20, addmod(mload(0xb80), mload(0x380), f_q))mstore(0x2b40, mulmod(mload(0x2b20), mload(0x2b00), f_q))mstore(0x2b60, mulmod(mload(0x700), mload(0x840), f_q))mstore(0x2b80, addmod(1, sub(f_q, mload(0x840)), f_q))mstore(0x2ba0, mulmod(mload(0x2b80), 0, f_q))mstore(0x2bc0, addmod(mload(0x2b60), mload(0x2ba0), f_q))mstore(0x2be0, mulmod(mload(0x1c0), mload(0x2bc0), f_q))mstore(0x2c00, mulmod(mload(0x720), mload(0x840), f_q))mstore(0x2c20, addmod(mload(0x2c00), mload(0x2ba0), f_q))mstore(0x2c40, addmod(mload(0x2be0), mload(0x2c20), f_q))mstore(0x2c60, addmod(mload(0x2c40), mload(0x320), f_q))mstore(0x2c80, mulmod(mload(0x2c60), mload(0xb00), f_q))mstore(0x2ca0, mulmod(mload(0x1c0), mload(0x7c0), f_q))mstore(0x2cc0, addmod(mload(0x2ca0), mload(0x7e0), f_q))mstore(0x2ce0, addmod(mload(0x2cc0), mload(0x380), f_q))mstore(0x2d00, mulmod(mload(0x2ce0), mload(0x2c80), f_q))mstore(0x2d20, addmod(mload(0x2b40), sub(f_q, mload(0x2d00)), f_q))mstore(0x2d40, mulmod(mload(0x2d20), mload(0x2040), f_q))mstore(0x2d60, addmod(mload(0x2ac0), mload(0x2d40), f_q))mstore(0x2d80, mulmod(mload(0x560), mload(0x2d60), f_q))mstore(0x2da0, addmod(mload(0xb40), sub(f_q, mload(0xb80)), f_q))mstore(0x2dc0, mulmod(mload(0x2da0), mload(0x14a0), f_q))mstore(0x2de0, addmod(mload(0x2d80), mload(0x2dc0), f_q))mstore(0x2e00, mulmod(mload(0x560), mload(0x2de0), f_q))mstore(0x2e20, mulmod(mload(0x2da0), mload(0x2040), f_q))mstore(0x2e40, addmod(mload(0xb40), sub(f_q, mload(0xb60)), f_q))mstore(0x2e60, mulmod(mload(0x2e40), mload(0x2e20), f_q))mstore(0x2e80, addmod(mload(0x2e00), mload(0x2e60), f_q))mstore(0x2ea0, mulmod(mload(0x560), mload(0x2e80), f_q))mstore(0x2ec0, addmod(1, sub(f_q, mload(0xba0)), f_q))mstore(0x2ee0, mulmod(mload(0x2ec0), mload(0x14a0), f_q))mstore(0x2f00, addmod(mload(0x2ea0), mload(0x2ee0), f_q))mstore(0x2f20, mulmod(mload(0x560), mload(0x2f00), f_q))mstore(0x2f40, mulmod(mload(0xba0), mload(0xba0), f_q))mstore(0x2f60, addmod(mload(0x2f40), sub(f_q, mload(0xba0)), f_q))mstore(0x2f80, mulmod(mload(0x2f60), mload(0x13e0), f_q))mstore(0x2fa0, addmod(mload(0x2f20), mload(0x2f80), f_q))mstore(0x2fc0, mulmod(mload(0x560), mload(0x2fa0), f_q))mstore(0x2fe0, addmod(mload(0xbe0), mload(0x320), f_q))mstore(0x3000, mulmod(mload(0x2fe0), mload(0xbc0), f_q))mstore(0x3020, addmod(mload(0xc20), mload(0x380), f_q))mstore(0x3040, mulmod(mload(0x3020), mload(0x3000), f_q))mstore(0x3060, mulmod(mload(0x700), mload(0x860), f_q))mstore(0x3080, addmod(1, sub(f_q, mload(0x860)), f_q))mstore(0x30a0, mulmod(mload(0x3080), 0, f_q))mstore(0x30c0, addmod(mload(0x3060), mload(0x30a0), f_q))mstore(0x30e0, mulmod(mload(0x1c0), mload(0x30c0), f_q))mstore(0x3100, mulmod(mload(0x720), mload(0x860), f_q))mstore(0x3120, mulmod(mload(0x3080), 8, f_q))mstore(0x3140, addmod(mload(0x3100), mload(0x3120), f_q))mstore(0x3160, addmod(mload(0x30e0), mload(0x3140), f_q))mstore(0x3180, addmod(mload(0x3160), mload(0x320), f_q))mstore(0x31a0, mulmod(mload(0x3180), mload(0xba0), f_q))mstore(0x31c0, mulmod(mload(0x1c0), mload(0x800), f_q))mstore(0x31e0, addmod(mload(0x31c0), mload(0x820), f_q))mstore(0x3200, addmod(mload(0x31e0), mload(0x380), f_q))mstore(0x3220, mulmod(mload(0x3200), mload(0x31a0), f_q))mstore(0x3240, addmod(mload(0x3040), sub(f_q, mload(0x3220)), f_q))mstore(0x3260, mulmod(mload(0x3240), mload(0x2040), f_q))mstore(0x3280, addmod(mload(0x2fc0), mload(0x3260), f_q))mstore(0x32a0, mulmod(mload(0x560), mload(0x3280), f_q))mstore(0x32c0, addmod(mload(0xbe0), sub(f_q, mload(0xc20)), f_q))mstore(0x32e0, mulmod(mload(0x32c0), mload(0x14a0), f_q))mstore(0x3300, addmod(mload(0x32a0), mload(0x32e0), f_q))mstore(0x3320, mulmod(mload(0x560), mload(0x3300), f_q))mstore(0x3340, mulmod(mload(0x32c0), mload(0x2040), f_q))mstore(0x3360, addmod(mload(0xbe0), sub(f_q, mload(0xc00)), f_q))mstore(0x3380, mulmod(mload(0x3360), mload(0x3340), f_q))mstore(0x33a0, addmod(mload(0x3320), mload(0x3380), f_q))mstore(0x33c0, mulmod(mload(0x1000), mload(0x1000), f_q))mstore(0x33e0, mulmod(mload(0x33c0), mload(0x1000), f_q))mstore(0x3400, mulmod(mload(0x33e0), mload(0x1000), f_q))mstore(0x3420, mulmod(1, mload(0x1000), f_q))mstore(0x3440, mulmod(1, mload(0x33c0), f_q))mstore(0x3460, mulmod(1, mload(0x33e0), f_q))mstore(0x3480, mulmod(mload(0x33a0), mload(0x1020), f_q))mstore(0x34a0, mulmod(mload(0xdc0), mload(0xdc0), f_q))mstore(0x34c0, mulmod(mload(0x34a0), mload(0xdc0), f_q))mstore(0x34e0, mulmod(mload(0x34c0), mload(0xdc0), f_q))mstore(0x3500, mulmod(mload(0xc60), mload(0xc60), f_q))mstore(0x3520, mulmod(mload(0x3500), mload(0xc60), f_q))mstore(0x3540, mulmod(mload(0x3520), mload(0xc60), f_q))mstore(0x3560, mulmod(mload(0x3540), mload(0xc60), f_q))mstore(0x3580, mulmod(mload(0x3560), mload(0xc60), f_q))mstore(0x35a0, mulmod(mload(0x3580), mload(0xc60), f_q))mstore(0x35c0, mulmod(mload(0x35a0), mload(0xc60), f_q))mstore(0x35e0, mulmod(mload(0x35c0), mload(0xc60), f_q))mstore(0x3600, mulmod(mload(0x35e0), mload(0xc60), f_q))mstore(0x3620, mulmod(mload(0x3600), mload(0xc60), f_q))mstore(0x3640, mulmod(mload(0x3620), mload(0xc60), f_q))mstore(0x3660, mulmod(mload(0x3640), mload(0xc60), f_q))mstore(0x3680, mulmod(mload(0x3660), mload(0xc60), f_q))mstore(0x36a0, mulmod(mload(0x3680), mload(0xc60), f_q))mstore(0x36c0, mulmod(mload(0x36a0), mload(0xc60), f_q))mstore(0x36e0, mulmod(mload(0x36c0), mload(0xc60), f_q))mstore(0x3700, mulmod(mload(0x36e0), mload(0xc60), f_q))mstore(0x3720, mulmod(mload(0x3700), mload(0xc60), f_q))mstore(0x3740, mulmod(mload(0x3720), mload(0xc60), f_q))mstore(0x3760, mulmod(mload(0x3740), mload(0xc60), f_q))mstore(0x3780, mulmod(mload(0x3760), mload(0xc60), f_q))mstore(0x37a0, mulmod(mload(0x3780), mload(0xc60), f_q))mstore(0x37c0, mulmod(mload(0x37a0), mload(0xc60), f_q))mstore(0x37e0, mulmod(mload(0x37c0), mload(0xc60), f_q))mstore(0x3800, mulmod(mload(0x37e0), mload(0xc60), f_q))mstore(0x3820, mulmod(mload(0x3800), mload(0xc60), f_q))mstore(0x3840, mulmod(mload(0x3820), mload(0xc60), f_q))mstore(0x3860, mulmod(mload(0x3840), mload(0xc60), f_q))mstore(0x3880, mulmod(mload(0x3860), mload(0xc60), f_q))mstore(0x38a0, mulmod(mload(0x3880), mload(0xc60), f_q))mstore(0x38c0, mulmod(mload(0x38a0), mload(0xc60), f_q))mstore(0x38e0, mulmod(mload(0x38c0), mload(0xc60), f_q))mstore(0x3900, mulmod(sub(f_q, mload(0x700)), 1, f_q))mstore(0x3920, mulmod(sub(f_q, mload(0x720)), mload(0xc60), f_q))mstore(0x3940, mulmod(1, mload(0xc60), f_q))mstore(0x3960, addmod(mload(0x3900), mload(0x3920), f_q))mstore(0x3980, mulmod(sub(f_q, mload(0x740)), mload(0x3500), f_q))mstore(0x39a0, mulmod(1, mload(0x3500), f_q))mstore(0x39c0, addmod(mload(0x3960), mload(0x3980), f_q))mstore(0x39e0, mulmod(sub(f_q, mload(0xa00)), mload(0x3520), f_q))mstore(0x3a00, mulmod(1, mload(0x3520), f_q))mstore(0x3a20, addmod(mload(0x39c0), mload(0x39e0), f_q))mstore(0x3a40, mulmod(sub(f_q, mload(0xa60)), mload(0x3540), f_q))mstore(0x3a60, mulmod(1, mload(0x3540), f_q))mstore(0x3a80, addmod(mload(0x3a20), mload(0x3a40), f_q))mstore(0x3aa0, mulmod(sub(f_q, mload(0xac0)), mload(0x3560), f_q))mstore(0x3ac0, mulmod(1, mload(0x3560), f_q))mstore(0x3ae0, addmod(mload(0x3a80), mload(0x3aa0), f_q))mstore(0x3b00, mulmod(sub(f_q, mload(0xb00)), mload(0x3580), f_q))mstore(0x3b20, mulmod(1, mload(0x3580), f_q))mstore(0x3b40, addmod(mload(0x3ae0), mload(0x3b00), f_q))mstore(0x3b60, mulmod(sub(f_q, mload(0xb40)), mload(0x35a0), f_q))mstore(0x3b80, mulmod(1, mload(0x35a0), f_q))mstore(0x3ba0, addmod(mload(0x3b40), mload(0x3b60), f_q))mstore(0x3bc0, mulmod(sub(f_q, mload(0xb80)), mload(0x35c0), f_q))mstore(0x3be0, mulmod(1, mload(0x35c0), f_q))mstore(0x3c00, addmod(mload(0x3ba0), mload(0x3bc0), f_q))mstore(0x3c20, mulmod(sub(f_q, mload(0xba0)), mload(0x35e0), f_q))mstore(0x3c40, mulmod(1, mload(0x35e0), f_q))mstore(0x3c60, addmod(mload(0x3c00), mload(0x3c20), f_q))mstore(0x3c80, mulmod(sub(f_q, mload(0xbe0)), mload(0x3600), f_q))mstore(0x3ca0, mulmod(1, mload(0x3600), f_q))mstore(0x3cc0, addmod(mload(0x3c60), mload(0x3c80), f_q))mstore(0x3ce0, mulmod(sub(f_q, mload(0xc20)), mload(0x3620), f_q))mstore(0x3d00, mulmod(1, mload(0x3620), f_q))mstore(0x3d20, addmod(mload(0x3cc0), mload(0x3ce0), f_q))mstore(0x3d40, mulmod(sub(f_q, mload(0x780)), mload(0x3640), f_q))mstore(0x3d60, mulmod(1, mload(0x3640), f_q))mstore(0x3d80, addmod(mload(0x3d20), mload(0x3d40), f_q))mstore(0x3da0, mulmod(sub(f_q, mload(0x7a0)), mload(0x3660), f_q))mstore(0x3dc0, mulmod(1, mload(0x3660), f_q))mstore(0x3de0, addmod(mload(0x3d80), mload(0x3da0), f_q))mstore(0x3e00, mulmod(sub(f_q, mload(0x7c0)), mload(0x3680), f_q))mstore(0x3e20, mulmod(1, mload(0x3680), f_q))mstore(0x3e40, addmod(mload(0x3de0), mload(0x3e00), f_q))mstore(0x3e60, mulmod(sub(f_q, mload(0x7e0)), mload(0x36a0), f_q))mstore(0x3e80, mulmod(1, mload(0x36a0), f_q))mstore(0x3ea0, addmod(mload(0x3e40), mload(0x3e60), f_q))mstore(0x3ec0, mulmod(sub(f_q, mload(0x800)), mload(0x36c0), f_q))mstore(0x3ee0, mulmod(1, mload(0x36c0), f_q))mstore(0x3f00, addmod(mload(0x3ea0), mload(0x3ec0), f_q))mstore(0x3f20, addmod(mload(0x3e20), mload(0x3ee0), f_q))mstore(0x3f40, mulmod(sub(f_q, mload(0x820)), mload(0x36e0), f_q))mstore(0x3f60, mulmod(1, mload(0x36e0), f_q))mstore(0x3f80, addmod(mload(0x3f00), mload(0x3f40), f_q))mstore(0x3fa0, mulmod(sub(f_q, mload(0x840)), mload(0x3700), f_q))mstore(0x3fc0, mulmod(1, mload(0x3700), f_q))mstore(0x3fe0, addmod(mload(0x3f80), mload(0x3fa0), f_q))mstore(0x4000, mulmod(sub(f_q, mload(0x860)), mload(0x3720), f_q))mstore(0x4020, mulmod(1, mload(0x3720), f_q))mstore(0x4040, addmod(mload(0x3fe0), mload(0x4000), f_q))mstore(0x4060, mulmod(sub(f_q, mload(0x880)), mload(0x3740), f_q))mstore(0x4080, mulmod(1, mload(0x3740), f_q))mstore(0x40a0, addmod(mload(0x4040), mload(0x4060), f_q))mstore(0x40c0, mulmod(sub(f_q, mload(0x8a0)), mload(0x3760), f_q))mstore(0x40e0, mulmod(1, mload(0x3760), f_q))mstore(0x4100, addmod(mload(0x40a0), mload(0x40c0), f_q))mstore(0x4120, mulmod(sub(f_q, mload(0x8c0)), mload(0x3780), f_q))mstore(0x4140, mulmod(1, mload(0x3780), f_q))mstore(0x4160, addmod(mload(0x4100), mload(0x4120), f_q))mstore(0x4180, mulmod(sub(f_q, mload(0x8e0)), mload(0x37a0), f_q))mstore(0x41a0, mulmod(1, mload(0x37a0), f_q))mstore(0x41c0, addmod(mload(0x4160), mload(0x4180), f_q))mstore(0x41e0, addmod(mload(0x3dc0), mload(0x41a0), f_q))mstore(0x4200, mulmod(sub(f_q, mload(0x920)), mload(0x37c0), f_q))mstore(0x4220, mulmod(1, mload(0x37c0), f_q))mstore(0x4240, addmod(mload(0x41c0), mload(0x4200), f_q))mstore(0x4260, mulmod(sub(f_q, mload(0x940)), mload(0x37e0), f_q))mstore(0x4280, mulmod(1, mload(0x37e0), f_q))mstore(0x42a0, addmod(mload(0x4240), mload(0x4260), f_q))mstore(0x42c0, mulmod(sub(f_q, mload(0x960)), mload(0x3800), f_q))mstore(0x42e0, mulmod(1, mload(0x3800), f_q))mstore(0x4300, addmod(mload(0x42a0), mload(0x42c0), f_q))mstore(0x4320, mulmod(sub(f_q, mload(0x980)), mload(0x3820), f_q))mstore(0x4340, mulmod(1, mload(0x3820), f_q))mstore(0x4360, addmod(mload(0x4300), mload(0x4320), f_q))mstore(0x4380, mulmod(sub(f_q, mload(0x9a0)), mload(0x3840), f_q))mstore(0x43a0, mulmod(1, mload(0x3840), f_q))mstore(0x43c0, addmod(mload(0x4360), mload(0x4380), f_q))mstore(0x43e0, mulmod(sub(f_q, mload(0x9c0)), mload(0x3860), f_q))mstore(0x4400, mulmod(1, mload(0x3860), f_q))mstore(0x4420, addmod(mload(0x43c0), mload(0x43e0), f_q))mstore(0x4440, mulmod(sub(f_q, mload(0x9e0)), mload(0x3880), f_q))mstore(0x4460, mulmod(1, mload(0x3880), f_q))mstore(0x4480, addmod(mload(0x4420), mload(0x4440), f_q))mstore(0x44a0, mulmod(sub(f_q, mload(0x3480)), mload(0x38a0), f_q))mstore(0x44c0, mulmod(1, mload(0x38a0), f_q))mstore(0x44e0, mulmod(mload(0x3420), mload(0x38a0), f_q))mstore(0x4500, mulmod(mload(0x3440), mload(0x38a0), f_q))mstore(0x4520, mulmod(mload(0x3460), mload(0x38a0), f_q))mstore(0x4540, addmod(mload(0x4480), mload(0x44a0), f_q))mstore(0x4560, mulmod(sub(f_q, mload(0x900)), mload(0x38c0), f_q))mstore(0x4580, mulmod(1, mload(0x38c0), f_q))mstore(0x45a0, addmod(mload(0x4540), mload(0x4560), f_q))mstore(0x45c0, mulmod(mload(0x45a0), 1, f_q))mstore(0x45e0, mulmod(mload(0x3940), 1, f_q))mstore(0x4600, mulmod(mload(0x39a0), 1, f_q))mstore(0x4620, mulmod(mload(0x3a00), 1, f_q))mstore(0x4640, mulmod(mload(0x3a60), 1, f_q))mstore(0x4660, mulmod(mload(0x3ac0), 1, f_q))mstore(0x4680, mulmod(mload(0x3b20), 1, f_q))mstore(0x46a0, mulmod(mload(0x3b80), 1, f_q))mstore(0x46c0, mulmod(mload(0x3be0), 1, f_q))mstore(0x46e0, mulmod(mload(0x3c40), 1, f_q))mstore(0x4700, mulmod(mload(0x3ca0), 1, f_q))mstore(0x4720, mulmod(mload(0x3d00), 1, f_q))mstore(0x4740, mulmod(mload(0x3d60), 1, f_q))mstore(0x4760, mulmod(mload(0x41e0), 1, f_q))mstore(0x4780, mulmod(mload(0x3f20), 1, f_q))mstore(0x47a0, mulmod(mload(0x3e80), 1, f_q))mstore(0x47c0, mulmod(mload(0x3f60), 1, f_q))mstore(0x47e0, mulmod(mload(0x3fc0), 1, f_q))mstore(0x4800, mulmod(mload(0x4020), 1, f_q))mstore(0x4820, mulmod(mload(0x4080), 1, f_q))mstore(0x4840, mulmod(mload(0x40e0), 1, f_q))mstore(0x4860, mulmod(mload(0x4140), 1, f_q))mstore(0x4880, mulmod(mload(0x4220), 1, f_q))mstore(0x48a0, mulmod(mload(0x4280), 1, f_q))mstore(0x48c0, mulmod(mload(0x42e0), 1, f_q))mstore(0x48e0, mulmod(mload(0x4340), 1, f_q))mstore(0x4900, mulmod(mload(0x43a0), 1, f_q))mstore(0x4920, mulmod(mload(0x4400), 1, f_q))mstore(0x4940, mulmod(mload(0x4460), 1, f_q))mstore(0x4960, mulmod(mload(0x44c0), 1, f_q))mstore(0x4980, mulmod(mload(0x44e0), 1, f_q))mstore(0x49a0, mulmod(mload(0x4500), 1, f_q))mstore(0x49c0, mulmod(mload(0x4520), 1, f_q))mstore(0x49e0, mulmod(mload(0x4580), 1, f_q))mstore(0x4a00, mulmod(sub(f_q, mload(0x760)), 1, f_q))mstore(0x4a20, mulmod(sub(f_q, mload(0xb60)), mload(0xc60), f_q))mstore(0x4a40, addmod(mload(0x4a00), mload(0x4a20), f_q))mstore(0x4a60, mulmod(sub(f_q, mload(0xc00)), mload(0x3500), f_q))mstore(0x4a80, addmod(mload(0x4a40), mload(0x4a60), f_q))mstore(0x4aa0, mulmod(mload(0x4a80), mload(0xdc0), f_q))mstore(0x4ac0, mulmod(1, mload(0xdc0), f_q))mstore(0x4ae0, mulmod(mload(0x3940), mload(0xdc0), f_q))mstore(0x4b00, mulmod(mload(0x39a0), mload(0xdc0), f_q))mstore(0x4b20, addmod(mload(0x45c0), mload(0x4aa0), f_q))mstore(0x4b40, addmod(mload(0x4600), mload(0x4ac0), f_q))mstore(0x4b60, addmod(mload(0x46a0), mload(0x4ae0), f_q))mstore(0x4b80, addmod(mload(0x4700), mload(0x4b00), f_q))mstore(0x4ba0, mulmod(sub(f_q, mload(0xa20)), 1, f_q))mstore(0x4bc0, mulmod(sub(f_q, mload(0xa80)), mload(0xc60), f_q))mstore(0x4be0, addmod(mload(0x4ba0), mload(0x4bc0), f_q))mstore(0x4c00, mulmod(sub(f_q, mload(0xae0)), mload(0x3500), f_q))mstore(0x4c20, addmod(mload(0x4be0), mload(0x4c00), f_q))mstore(0x4c40, mulmod(sub(f_q, mload(0xb20)), mload(0x3520), f_q))mstore(0x4c60, addmod(mload(0x4c20), mload(0x4c40), f_q))mstore(0x4c80, mulmod(sub(f_q, mload(0xbc0)), mload(0x3540), f_q))mstore(0x4ca0, addmod(mload(0x4c60), mload(0x4c80), f_q))mstore(0x4cc0, mulmod(mload(0x4ca0), mload(0x34a0), f_q))mstore(0x4ce0, mulmod(1, mload(0x34a0), f_q))mstore(0x4d00, mulmod(mload(0x3940), mload(0x34a0), f_q))mstore(0x4d20, mulmod(mload(0x39a0), mload(0x34a0), f_q))mstore(0x4d40, mulmod(mload(0x3a00), mload(0x34a0), f_q))mstore(0x4d60, mulmod(mload(0x3a60), mload(0x34a0), f_q))mstore(0x4d80, addmod(mload(0x4b20), mload(0x4cc0), f_q))mstore(0x4da0, addmod(mload(0x4620), mload(0x4ce0), f_q))mstore(0x4dc0, addmod(mload(0x4640), mload(0x4d00), f_q))mstore(0x4de0, addmod(mload(0x4660), mload(0x4d20), f_q))mstore(0x4e00, addmod(mload(0x4680), mload(0x4d40), f_q))mstore(0x4e20, addmod(mload(0x46e0), mload(0x4d60), f_q))mstore(0x4e40, mulmod(sub(f_q, mload(0xaa0)), 1, f_q))mstore(0x4e60, mulmod(sub(f_q, mload(0xa40)), mload(0xc60), f_q))mstore(0x4e80, addmod(mload(0x4e40), mload(0x4e60), f_q))mstore(0x4ea0, mulmod(mload(0x4e80), mload(0x34c0), f_q))mstore(0x4ec0, mulmod(1, mload(0x34c0), f_q))mstore(0x4ee0, mulmod(mload(0x3940), mload(0x34c0), f_q))mstore(0x4f00, addmod(mload(0x4d80), mload(0x4ea0), f_q))mstore(0x4f20, addmod(mload(0x4dc0), mload(0x4ec0), f_q))mstore(0x4f40, addmod(mload(0x4da0), mload(0x4ee0), f_q))mstore(0x4f60, mulmod(1, mload(0x6c0), f_q))mstore(0x4f80, mulmod(1, mload(0x4f60), f_q))mstore(0x4fa0, mulmod(11402394834529375719535454173347509224290498423785625657829583372803806900475, mload(0x6c0), f_q))mstore(0x4fc0, mulmod(mload(0x4ac0), mload(0x4fa0), f_q))mstore(0x4fe0, mulmod(21846745818185811051373434299876022191132089169516983080959277716660228899818, mload(0x6c0), f_q))mstore(0x5000, mulmod(mload(0x4ce0), mload(0x4fe0), f_q))mstore(0x5020, mulmod(18801136258871406524726641978934912926273987048785013233465874845411408769764, mload(0x6c0), f_q))mstore(0x5040, mulmod(mload(0x4ec0), mload(0x5020), f_q))mstore(0x5060, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x5080, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x50a0, mload(0x4f00))success := and(eq(staticcall(gas(), 0x7, 0x5060, 0x60, 0x5060, 0x40), 1), success)mstore(0x50c0, mload(0x5060))                    mstore(0x50e0, mload(0x5080))mstore(0x5100, mload(0xe0))                    mstore(0x5120, mload(0x100))success := and(eq(staticcall(gas(), 0x6, 0x50c0, 0x80, 0x50c0, 0x40), 1), success)mstore(0x5140, mload(0x120))                    mstore(0x5160, mload(0x140))mstore(0x5180, mload(0x45e0))success := and(eq(staticcall(gas(), 0x7, 0x5140, 0x60, 0x5140, 0x40), 1), success)mstore(0x51a0, mload(0x50c0))                    mstore(0x51c0, mload(0x50e0))mstore(0x51e0, mload(0x5140))                    mstore(0x5200, mload(0x5160))success := and(eq(staticcall(gas(), 0x6, 0x51a0, 0x80, 0x51a0, 0x40), 1), success)mstore(0x5220, mload(0x160))                    mstore(0x5240, mload(0x180))mstore(0x5260, mload(0x4b40))success := and(eq(staticcall(gas(), 0x7, 0x5220, 0x60, 0x5220, 0x40), 1), success)mstore(0x5280, mload(0x51a0))                    mstore(0x52a0, mload(0x51c0))mstore(0x52c0, mload(0x5220))                    mstore(0x52e0, mload(0x5240))success := and(eq(staticcall(gas(), 0x6, 0x5280, 0x80, 0x5280, 0x40), 1), success)mstore(0x5300, mload(0x3c0))                    mstore(0x5320, mload(0x3e0))mstore(0x5340, mload(0x4f40))success := and(eq(staticcall(gas(), 0x7, 0x5300, 0x60, 0x5300, 0x40), 1), success)mstore(0x5360, mload(0x5280))                    mstore(0x5380, mload(0x52a0))mstore(0x53a0, mload(0x5300))                    mstore(0x53c0, mload(0x5320))success := and(eq(staticcall(gas(), 0x6, 0x5360, 0x80, 0x5360, 0x40), 1), success)mstore(0x53e0, mload(0x400))                    mstore(0x5400, mload(0x420))mstore(0x5420, mload(0x4f20))success := and(eq(staticcall(gas(), 0x7, 0x53e0, 0x60, 0x53e0, 0x40), 1), success)mstore(0x5440, mload(0x5360))                    mstore(0x5460, mload(0x5380))mstore(0x5480, mload(0x53e0))                    mstore(0x54a0, mload(0x5400))success := and(eq(staticcall(gas(), 0x6, 0x5440, 0x80, 0x5440, 0x40), 1), success)mstore(0x54c0, mload(0x440))                    mstore(0x54e0, mload(0x460))mstore(0x5500, mload(0x4de0))success := and(eq(staticcall(gas(), 0x7, 0x54c0, 0x60, 0x54c0, 0x40), 1), success)mstore(0x5520, mload(0x5440))                    mstore(0x5540, mload(0x5460))mstore(0x5560, mload(0x54c0))                    mstore(0x5580, mload(0x54e0))success := and(eq(staticcall(gas(), 0x6, 0x5520, 0x80, 0x5520, 0x40), 1), success)mstore(0x55a0, mload(0x480))                    mstore(0x55c0, mload(0x4a0))mstore(0x55e0, mload(0x4e00))success := and(eq(staticcall(gas(), 0x7, 0x55a0, 0x60, 0x55a0, 0x40), 1), success)mstore(0x5600, mload(0x5520))                    mstore(0x5620, mload(0x5540))mstore(0x5640, mload(0x55a0))                    mstore(0x5660, mload(0x55c0))success := and(eq(staticcall(gas(), 0x6, 0x5600, 0x80, 0x5600, 0x40), 1), success)mstore(0x5680, mload(0x200))                    mstore(0x56a0, mload(0x220))mstore(0x56c0, mload(0x4b60))success := and(eq(staticcall(gas(), 0x7, 0x5680, 0x60, 0x5680, 0x40), 1), success)mstore(0x56e0, mload(0x5600))                    mstore(0x5700, mload(0x5620))mstore(0x5720, mload(0x5680))                    mstore(0x5740, mload(0x56a0))success := and(eq(staticcall(gas(), 0x6, 0x56e0, 0x80, 0x56e0, 0x40), 1), success)mstore(0x5760, mload(0x240))                    mstore(0x5780, mload(0x260))mstore(0x57a0, mload(0x46c0))success := and(eq(staticcall(gas(), 0x7, 0x5760, 0x60, 0x5760, 0x40), 1), success)mstore(0x57c0, mload(0x56e0))                    mstore(0x57e0, mload(0x5700))mstore(0x5800, mload(0x5760))                    mstore(0x5820, mload(0x5780))success := and(eq(staticcall(gas(), 0x6, 0x57c0, 0x80, 0x57c0, 0x40), 1), success)mstore(0x5840, mload(0x4c0))                    mstore(0x5860, mload(0x4e0))mstore(0x5880, mload(0x4e20))success := and(eq(staticcall(gas(), 0x7, 0x5840, 0x60, 0x5840, 0x40), 1), success)mstore(0x58a0, mload(0x57c0))                    mstore(0x58c0, mload(0x57e0))mstore(0x58e0, mload(0x5840))                    mstore(0x5900, mload(0x5860))success := and(eq(staticcall(gas(), 0x6, 0x58a0, 0x80, 0x58a0, 0x40), 1), success)mstore(0x5920, mload(0x280))                    mstore(0x5940, mload(0x2a0))mstore(0x5960, mload(0x4b80))success := and(eq(staticcall(gas(), 0x7, 0x5920, 0x60, 0x5920, 0x40), 1), success)mstore(0x5980, mload(0x58a0))                    mstore(0x59a0, mload(0x58c0))mstore(0x59c0, mload(0x5920))                    mstore(0x59e0, mload(0x5940))success := and(eq(staticcall(gas(), 0x6, 0x5980, 0x80, 0x5980, 0x40), 1), success)mstore(0x5a00, mload(0x2c0))                    mstore(0x5a20, mload(0x2e0))mstore(0x5a40, mload(0x4720))success := and(eq(staticcall(gas(), 0x7, 0x5a00, 0x60, 0x5a00, 0x40), 1), success)mstore(0x5a60, mload(0x5980))                    mstore(0x5a80, mload(0x59a0))mstore(0x5aa0, mload(0x5a00))                    mstore(0x5ac0, mload(0x5a20))success := and(eq(staticcall(gas(), 0x6, 0x5a60, 0x80, 0x5a60, 0x40), 1), success)mstore(0x5ae0, 0x1d04e361a0b5df90e26709abcb623da7a3db6394bbcd5d05a5f4d53ffc636ab2)                    mstore(0x5b00, 0x1f7e4797415ab3d313186e3b2fb88d7b27fe652c990aeeb91f5d27c8339d7411)mstore(0x5b20, mload(0x4740))success := and(eq(staticcall(gas(), 0x7, 0x5ae0, 0x60, 0x5ae0, 0x40), 1), success)mstore(0x5b40, mload(0x5a60))                    mstore(0x5b60, mload(0x5a80))mstore(0x5b80, mload(0x5ae0))                    mstore(0x5ba0, mload(0x5b00))success := and(eq(staticcall(gas(), 0x6, 0x5b40, 0x80, 0x5b40, 0x40), 1), success)mstore(0x5bc0, 0x0000000000000000000000000000000000000000000000000000000000000000)                    mstore(0x5be0, 0x0000000000000000000000000000000000000000000000000000000000000000)mstore(0x5c00, mload(0x4760))success := and(eq(staticcall(gas(), 0x7, 0x5bc0, 0x60, 0x5bc0, 0x40), 1), success)mstore(0x5c20, mload(0x5b40))                    mstore(0x5c40, mload(0x5b60))mstore(0x5c60, mload(0x5bc0))                    mstore(0x5c80, mload(0x5be0))success := and(eq(staticcall(gas(), 0x6, 0x5c20, 0x80, 0x5c20, 0x40), 1), success)mstore(0x5ca0, 0x2deb4df632e554335f6c869ea5f8fc48d742f0af9c6f06d8a2fae8b3d6613368)                    mstore(0x5cc0, 0x16a38f6ccf3f54559f0cf03a6aad862d27944808c59d84bca144cb2529663098)mstore(0x5ce0, mload(0x4780))success := and(eq(staticcall(gas(), 0x7, 0x5ca0, 0x60, 0x5ca0, 0x40), 1), success)mstore(0x5d00, mload(0x5c20))                    mstore(0x5d20, mload(0x5c40))mstore(0x5d40, mload(0x5ca0))                    mstore(0x5d60, mload(0x5cc0))success := and(eq(staticcall(gas(), 0x6, 0x5d00, 0x80, 0x5d00, 0x40), 1), success)mstore(0x5d80, 0x0c0388a6ae4b4f3f0d54928f8758501aa1b9628ace09fe4f046925979b626356)                    mstore(0x5da0, 0x120c613f64738b57dcf54ac47f29aa6356ffdd6d13b9852d620f3a4b117ca5ad)mstore(0x5dc0, mload(0x47a0))success := and(eq(staticcall(gas(), 0x7, 0x5d80, 0x60, 0x5d80, 0x40), 1), success)mstore(0x5de0, mload(0x5d00))                    mstore(0x5e00, mload(0x5d20))mstore(0x5e20, mload(0x5d80))                    mstore(0x5e40, mload(0x5da0))success := and(eq(staticcall(gas(), 0x6, 0x5de0, 0x80, 0x5de0, 0x40), 1), success)mstore(0x5e60, 0x2e258d9c2ec1d35afd36459abad5bff8bbe824b5adad33949029074ea064d526)                    mstore(0x5e80, 0x1bcbd48074199602d9f188cbc41310e61c889b52441fe07df13b37c9e6d08819)mstore(0x5ea0, mload(0x47c0))success := and(eq(staticcall(gas(), 0x7, 0x5e60, 0x60, 0x5e60, 0x40), 1), success)mstore(0x5ec0, mload(0x5de0))                    mstore(0x5ee0, mload(0x5e00))mstore(0x5f00, mload(0x5e60))                    mstore(0x5f20, mload(0x5e80))success := and(eq(staticcall(gas(), 0x6, 0x5ec0, 0x80, 0x5ec0, 0x40), 1), success)mstore(0x5f40, 0x2be1fde335cff22fffa79db9b032b9e14f0de7e7584c81f56eccd2d9abbef5c5)                    mstore(0x5f60, 0x0cdfe79199c6327f08ddd4d2c8b097ec47e90dade45ae755e2b8b43bf239464b)mstore(0x5f80, mload(0x47e0))success := and(eq(staticcall(gas(), 0x7, 0x5f40, 0x60, 0x5f40, 0x40), 1), success)mstore(0x5fa0, mload(0x5ec0))                    mstore(0x5fc0, mload(0x5ee0))mstore(0x5fe0, mload(0x5f40))                    mstore(0x6000, mload(0x5f60))success := and(eq(staticcall(gas(), 0x6, 0x5fa0, 0x80, 0x5fa0, 0x40), 1), success)mstore(0x6020, 0x14012aaacf0a2be044389a9b9f3aa16f7beae73ca398f51928c9479049109c3d)                    mstore(0x6040, 0x1d1a326b3797cc9624133b6c3489f29d2be45529e39c2e8de2b9189cf7ec9ded)mstore(0x6060, mload(0x4800))success := and(eq(staticcall(gas(), 0x7, 0x6020, 0x60, 0x6020, 0x40), 1), success)mstore(0x6080, mload(0x5fa0))                    mstore(0x60a0, mload(0x5fc0))mstore(0x60c0, mload(0x6020))                    mstore(0x60e0, mload(0x6040))success := and(eq(staticcall(gas(), 0x6, 0x6080, 0x80, 0x6080, 0x40), 1), success)mstore(0x6100, 0x0780b8efe20759ccc26f52960b8e9733ba45783e0a6b5142a151d8977440741d)                    mstore(0x6120, 0x0c4b242e1011e4aaf5d05cc5f7dec5b1c27d7784646902afa600a6ed9f0da449)mstore(0x6140, mload(0x4820))success := and(eq(staticcall(gas(), 0x7, 0x6100, 0x60, 0x6100, 0x40), 1), success)mstore(0x6160, mload(0x6080))                    mstore(0x6180, mload(0x60a0))mstore(0x61a0, mload(0x6100))                    mstore(0x61c0, mload(0x6120))success := and(eq(staticcall(gas(), 0x6, 0x6160, 0x80, 0x6160, 0x40), 1), success)mstore(0x61e0, 0x226552633cd507a00ec6d284d443ed2a109d04ab3a905861eca36326f2e67da1)                    mstore(0x6200, 0x24b6a96857dc2e60bd1fac2c0f340c4c17292d3f9fdfebf9f0ff36e33101323a)mstore(0x6220, mload(0x4840))success := and(eq(staticcall(gas(), 0x7, 0x61e0, 0x60, 0x61e0, 0x40), 1), success)mstore(0x6240, mload(0x6160))                    mstore(0x6260, mload(0x6180))mstore(0x6280, mload(0x61e0))                    mstore(0x62a0, mload(0x6200))success := and(eq(staticcall(gas(), 0x6, 0x6240, 0x80, 0x6240, 0x40), 1), success)mstore(0x62c0, 0x2c42598636152b82d5ce71020dfb7f608503979d24a40c3eacc7ba66eff36cf8)                    mstore(0x62e0, 0x0b24d63f3ae16ac072200aa31a13be0396163e82a2d4d4bd078c5ecf21e3a57b)mstore(0x6300, mload(0x4860))success := and(eq(staticcall(gas(), 0x7, 0x62c0, 0x60, 0x62c0, 0x40), 1), success)mstore(0x6320, mload(0x6240))                    mstore(0x6340, mload(0x6260))mstore(0x6360, mload(0x62c0))                    mstore(0x6380, mload(0x62e0))success := and(eq(staticcall(gas(), 0x6, 0x6320, 0x80, 0x6320, 0x40), 1), success)mstore(0x63a0, 0x0735677c17b4d1edc2023644278b6c1ba662c1df54097e9314a3dbaf97ddb58c)                    mstore(0x63c0, 0x2df8aa26b193755735fd7debe00c173e0b931f408063a8f3f8c058397ea628ec)mstore(0x63e0, mload(0x4880))success := and(eq(staticcall(gas(), 0x7, 0x63a0, 0x60, 0x63a0, 0x40), 1), success)mstore(0x6400, mload(0x6320))                    mstore(0x6420, mload(0x6340))mstore(0x6440, mload(0x63a0))                    mstore(0x6460, mload(0x63c0))success := and(eq(staticcall(gas(), 0x6, 0x6400, 0x80, 0x6400, 0x40), 1), success)mstore(0x6480, 0x206f347903a0d822debf562bdb52ebd6783a56876a3400c72cf04224ffbe5fed)                    mstore(0x64a0, 0x20d2291e8daab99f6e64b11eda9c7df5ddd468ab28249ae0154dec44a266aab6)mstore(0x64c0, mload(0x48a0))success := and(eq(staticcall(gas(), 0x7, 0x6480, 0x60, 0x6480, 0x40), 1), success)mstore(0x64e0, mload(0x6400))                    mstore(0x6500, mload(0x6420))mstore(0x6520, mload(0x6480))                    mstore(0x6540, mload(0x64a0))success := and(eq(staticcall(gas(), 0x6, 0x64e0, 0x80, 0x64e0, 0x40), 1), success)mstore(0x6560, 0x2950dee9281e41252c3a40de5d1ea3d1bcef9b8e0241d820243ba2c6b0b6dd47)                    mstore(0x6580, 0x2973d73ae6b5fd104dace9e163d1d5b7895b466328e5f893f52e86ddacda3e9f)mstore(0x65a0, mload(0x48c0))success := and(eq(staticcall(gas(), 0x7, 0x6560, 0x60, 0x6560, 0x40), 1), success)mstore(0x65c0, mload(0x64e0))                    mstore(0x65e0, mload(0x6500))mstore(0x6600, mload(0x6560))                    mstore(0x6620, mload(0x6580))success := and(eq(staticcall(gas(), 0x6, 0x65c0, 0x80, 0x65c0, 0x40), 1), success)mstore(0x6640, 0x075349f5f9adfa388bdbf1ae88127c56bd80c4f881e19e43958a5ed96ff15475)                    mstore(0x6660, 0x2f28f8cc470a7560970a7d00af911e3adc9fb11077e52a6cfe1d82b655401636)mstore(0x6680, mload(0x48e0))success := and(eq(staticcall(gas(), 0x7, 0x6640, 0x60, 0x6640, 0x40), 1), success)mstore(0x66a0, mload(0x65c0))                    mstore(0x66c0, mload(0x65e0))mstore(0x66e0, mload(0x6640))                    mstore(0x6700, mload(0x6660))success := and(eq(staticcall(gas(), 0x6, 0x66a0, 0x80, 0x66a0, 0x40), 1), success)mstore(0x6720, 0x09e65d6e0bfd031e7b326715f872629ed9ae072f15558d7d7d1cfb82d98597af)                    mstore(0x6740, 0x1d197d59c7a7c1fd5d259a3d5cb11bd83f23910396bf8fc388c6634cac10801a)mstore(0x6760, mload(0x4900))success := and(eq(staticcall(gas(), 0x7, 0x6720, 0x60, 0x6720, 0x40), 1), success)mstore(0x6780, mload(0x66a0))                    mstore(0x67a0, mload(0x66c0))mstore(0x67c0, mload(0x6720))                    mstore(0x67e0, mload(0x6740))success := and(eq(staticcall(gas(), 0x6, 0x6780, 0x80, 0x6780, 0x40), 1), success)mstore(0x6800, 0x25fe0a3829a7504fb1aba8b6cedbac5a9946c173cf3fe3be42ed101078f5a1b5)                    mstore(0x6820, 0x0734eaf8db5c6c5771968e4402acaf241021aeb0de4c076febc8453c41ce7945)mstore(0x6840, mload(0x4920))success := and(eq(staticcall(gas(), 0x7, 0x6800, 0x60, 0x6800, 0x40), 1), success)mstore(0x6860, mload(0x6780))                    mstore(0x6880, mload(0x67a0))mstore(0x68a0, mload(0x6800))                    mstore(0x68c0, mload(0x6820))success := and(eq(staticcall(gas(), 0x6, 0x6860, 0x80, 0x6860, 0x40), 1), success)mstore(0x68e0, 0x0a7996aa36917b2d360c2b7483d55745e68081d52528c518c61e34ae6ae959de)                    mstore(0x6900, 0x0008bebe37e9ab56bb961edd911f65d07f60860309390fe53e4d0b0894b8ea42)mstore(0x6920, mload(0x4940))success := and(eq(staticcall(gas(), 0x7, 0x68e0, 0x60, 0x68e0, 0x40), 1), success)mstore(0x6940, mload(0x6860))                    mstore(0x6960, mload(0x6880))mstore(0x6980, mload(0x68e0))                    mstore(0x69a0, mload(0x6900))success := and(eq(staticcall(gas(), 0x6, 0x6940, 0x80, 0x6940, 0x40), 1), success)mstore(0x69c0, mload(0x5a0))                    mstore(0x69e0, mload(0x5c0))mstore(0x6a00, mload(0x4960))success := and(eq(staticcall(gas(), 0x7, 0x69c0, 0x60, 0x69c0, 0x40), 1), success)mstore(0x6a20, mload(0x6940))                    mstore(0x6a40, mload(0x6960))mstore(0x6a60, mload(0x69c0))                    mstore(0x6a80, mload(0x69e0))success := and(eq(staticcall(gas(), 0x6, 0x6a20, 0x80, 0x6a20, 0x40), 1), success)mstore(0x6aa0, mload(0x5e0))                    mstore(0x6ac0, mload(0x600))mstore(0x6ae0, mload(0x4980))success := and(eq(staticcall(gas(), 0x7, 0x6aa0, 0x60, 0x6aa0, 0x40), 1), success)mstore(0x6b00, mload(0x6a20))                    mstore(0x6b20, mload(0x6a40))mstore(0x6b40, mload(0x6aa0))                    mstore(0x6b60, mload(0x6ac0))success := and(eq(staticcall(gas(), 0x6, 0x6b00, 0x80, 0x6b00, 0x40), 1), success)mstore(0x6b80, mload(0x620))                    mstore(0x6ba0, mload(0x640))mstore(0x6bc0, mload(0x49a0))success := and(eq(staticcall(gas(), 0x7, 0x6b80, 0x60, 0x6b80, 0x40), 1), success)mstore(0x6be0, mload(0x6b00))                    mstore(0x6c00, mload(0x6b20))mstore(0x6c20, mload(0x6b80))                    mstore(0x6c40, mload(0x6ba0))success := and(eq(staticcall(gas(), 0x6, 0x6be0, 0x80, 0x6be0, 0x40), 1), success)mstore(0x6c60, mload(0x660))                    mstore(0x6c80, mload(0x680))mstore(0x6ca0, mload(0x49c0))success := and(eq(staticcall(gas(), 0x7, 0x6c60, 0x60, 0x6c60, 0x40), 1), success)mstore(0x6cc0, mload(0x6be0))                    mstore(0x6ce0, mload(0x6c00))mstore(0x6d00, mload(0x6c60))                    mstore(0x6d20, mload(0x6c80))success := and(eq(staticcall(gas(), 0x6, 0x6cc0, 0x80, 0x6cc0, 0x40), 1), success)mstore(0x6d40, mload(0x500))                    mstore(0x6d60, mload(0x520))mstore(0x6d80, mload(0x49e0))success := and(eq(staticcall(gas(), 0x7, 0x6d40, 0x60, 0x6d40, 0x40), 1), success)mstore(0x6da0, mload(0x6cc0))                    mstore(0x6dc0, mload(0x6ce0))mstore(0x6de0, mload(0x6d40))                    mstore(0x6e00, mload(0x6d60))success := and(eq(staticcall(gas(), 0x6, 0x6da0, 0x80, 0x6da0, 0x40), 1), success)mstore(0x6e20, mload(0xca0))                    mstore(0x6e40, mload(0xcc0))mstore(0x6e60, mload(0x4f80))success := and(eq(staticcall(gas(), 0x7, 0x6e20, 0x60, 0x6e20, 0x40), 1), success)mstore(0x6e80, mload(0x6da0))                    mstore(0x6ea0, mload(0x6dc0))mstore(0x6ec0, mload(0x6e20))                    mstore(0x6ee0, mload(0x6e40))success := and(eq(staticcall(gas(), 0x6, 0x6e80, 0x80, 0x6e80, 0x40), 1), success)mstore(0x6f00, mload(0xce0))                    mstore(0x6f20, mload(0xd00))mstore(0x6f40, mload(0x4fc0))success := and(eq(staticcall(gas(), 0x7, 0x6f00, 0x60, 0x6f00, 0x40), 1), success)mstore(0x6f60, mload(0x6e80))                    mstore(0x6f80, mload(0x6ea0))mstore(0x6fa0, mload(0x6f00))                    mstore(0x6fc0, mload(0x6f20))success := and(eq(staticcall(gas(), 0x6, 0x6f60, 0x80, 0x6f60, 0x40), 1), success)mstore(0x6fe0, mload(0xd20))                    mstore(0x7000, mload(0xd40))mstore(0x7020, mload(0x5000))success := and(eq(staticcall(gas(), 0x7, 0x6fe0, 0x60, 0x6fe0, 0x40), 1), success)mstore(0x7040, mload(0x6f60))                    mstore(0x7060, mload(0x6f80))mstore(0x7080, mload(0x6fe0))                    mstore(0x70a0, mload(0x7000))success := and(eq(staticcall(gas(), 0x6, 0x7040, 0x80, 0x7040, 0x40), 1), success)mstore(0x70c0, mload(0xd60))                    mstore(0x70e0, mload(0xd80))mstore(0x7100, mload(0x5040))success := and(eq(staticcall(gas(), 0x7, 0x70c0, 0x60, 0x70c0, 0x40), 1), success)mstore(0x7120, mload(0x7040))                    mstore(0x7140, mload(0x7060))mstore(0x7160, mload(0x70c0))                    mstore(0x7180, mload(0x70e0))success := and(eq(staticcall(gas(), 0x6, 0x7120, 0x80, 0x7120, 0x40), 1), success)mstore(0x71a0, mload(0xce0))                    mstore(0x71c0, mload(0xd00))mstore(0x71e0, mload(0x4ac0))success := and(eq(staticcall(gas(), 0x7, 0x71a0, 0x60, 0x71a0, 0x40), 1), success)mstore(0x7200, mload(0xca0))                    mstore(0x7220, mload(0xcc0))mstore(0x7240, mload(0x71a0))                    mstore(0x7260, mload(0x71c0))success := and(eq(staticcall(gas(), 0x6, 0x7200, 0x80, 0x7200, 0x40), 1), success)mstore(0x7280, mload(0xd20))                    mstore(0x72a0, mload(0xd40))mstore(0x72c0, mload(0x4ce0))success := and(eq(staticcall(gas(), 0x7, 0x7280, 0x60, 0x7280, 0x40), 1), success)mstore(0x72e0, mload(0x7200))                    mstore(0x7300, mload(0x7220))mstore(0x7320, mload(0x7280))                    mstore(0x7340, mload(0x72a0))success := and(eq(staticcall(gas(), 0x6, 0x72e0, 0x80, 0x72e0, 0x40), 1), success)mstore(0x7360, mload(0xd60))                    mstore(0x7380, mload(0xd80))mstore(0x73a0, mload(0x4ec0))success := and(eq(staticcall(gas(), 0x7, 0x7360, 0x60, 0x7360, 0x40), 1), success)mstore(0x73c0, mload(0x72e0))                    mstore(0x73e0, mload(0x7300))mstore(0x7400, mload(0x7360))                    mstore(0x7420, mload(0x7380))success := and(eq(staticcall(gas(), 0x6, 0x73c0, 0x80, 0x73c0, 0x40), 1), success)mstore(0x7440, mload(0x7120))                    mstore(0x7460, mload(0x7140))mstore(0x7480, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x74a0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x74c0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x74e0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x7500, mload(0x73c0))                    mstore(0x7520, mload(0x73e0))mstore(0x7540, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)            mstore(0x7560, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)            mstore(0x7580, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)            mstore(0x75a0, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)success := and(eq(staticcall(gas(), 0x8, 0x7440, 0x180, 0x7440, 0x20), 1), success)success := and(eq(mload(0x7440), 1), success)} return success; } }