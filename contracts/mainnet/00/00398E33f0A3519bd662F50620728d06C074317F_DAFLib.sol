// SPDX-License-Identifier: CC0-1.0
pragma solidity 0.8.13;

import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/Base64.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

import "./IntegerWrapper.sol";
import "./DAFactoryI.sol";
import "./DAFSubscriptionsI.sol";

/// @dev Possible roles of DAF tokens.
enum Role {
    Contributor,
    Core
}

/// @dev Possible states of a token in a voting process
enum TokenVotingState {
    Pending,
    Voted,
    Punished
}

/// @dev Data structure of a question
struct QuestionStruct {
    string baseQuestion;
    string id;
    string[] answersIds;
    uint256[] votesOfEachAnswers;
    uint256 dateOfCreation;
    uint256 timeToVote;
    uint256[] bestAnswers;
    uint256 minimumVotesForConsensus;
    bool reachedConsensus;
}

enum MigrationState {
    NotStarted,
    Started,
    Ended
}

/// @dev Data structure containing all state variables of DAFactory contract.
/// It is an approach inspired by the AppStorage pattern
struct DAFStorage {
    /// @notice Reference to DAFSubscriptions external interface
    DAFSubscriptionsContract dafSubscriptionsContract;
    /// @notice Starting score (number of points) of a new token. Also score assigned to a dead token revived (against payment)
    uint256 startScore;
    /// @notice Holds the ID of the next token to be minted
    uint256 nextId;
    /// @notice Price for reviving a token that has no more points (in wei)
    uint256 revivePrice;
    /// @notice Grace period (in second)  granted to a token which has just had zero point before authorizing its destruction by other tokens.
    uint256 gracefulTokenPunishmentTimePeriod;
    /// @notice Number of points required to upgrade a contributor token to core contributor
    uint256 scoreToUpgrade;
    /// @notice Holds the total number of points generated by the efforts of the DAF contributors
    IntegerWrapper.Integer totalOfPoints;
    /// @notice List of information for each contributor token
    DAFContributorToken[] dafContributorTokens;
    /// @notice Owner to token mapping
    mapping(address => uint256) ownerToToken;
    /// @notice Number of penalty points for a punished token
    uint256 punishmentPointDelta;
    /// @notice Reward in points of a token for a voting action
    uint256 rewardPointDeltaForVoting;
    /// @notice Reward in number of points of a token for a punishment action on another token
    uint256 rewardPointDeltaForPunishment;
    /// @notice Reward in points of a token for the destruction of a token which does not have any more points
    uint256 rewardPointDeltaForDestruction;
    /// @notice Minimum time required between the creation of a new question and the end of the vote. Expressed in seconds.
    uint256 minimumTimeToVote;
    /// @notice The generic question used to introduce the subject of each vote
    string baseQuestion;
    /// @notice The generic choices proposed as possible answers to the voting questions. For now: yes and no
    string[] baseAnswers;
    /// @notice The IDs of all the questions created
    string[] allQuestionIds;
    /// @notice Question info by question ID mapping
    mapping(string => QuestionStruct) questionsById;
    /// @notice Tokens voting states for a question  by the question ID
    mapping(string => mapping(uint256 => TokenVotingState)) tokensState;
    /// @notice Address of a previous or future version of the contract to use in an eventual migration process
    address migrationVersionAddress;
    /// @notice Contract Migration state, if the contract should migrate
    MigrationState migrationState;
    /// @notice Contract pause start time
    uint256 pauseStartTime;
}

/// @dev Result of getQuestionsPage function
struct GetQuestionPageResult {
    GetQuestionPageItemQueryResult[] items;
    uint256 numberOfPages;
}

/// @dev Structure containing the result of a query for questions
struct GetQuestionPageItemQueryResult {
    QuestionStruct question;
    bool invokerVotedOn;
}

/// @dev Structure containing the information of a contributor token
struct DAFContributorToken {
    uint256 id;
    address owner;
    uint256 score;
    uint256 dateOfCreation;
    uint256 dateOfDeath;
    Role role;
}

struct DAFSubscriptionToken {
    address owner;
    uint256 dateOfDeath;
}

/// @title  DAF library.
library DAFLib {
    using IntegerWrapper for IntegerWrapper.Integer;
    using SafeERC20 for IERC20;

    // Sharing event with DAFactory here in order to emit event from DAFLib
    // https://blog.aragon.org/library-driven-development-in-solidity-2bebcaf88736/#events-and-libraries
    event ConsensusReached(string questionId, string consensusAnswerId);

    error DAFQuestionDoesNotExist(string id);
    error DAFTokenScoreIsNotNull(uint256 tokenId);
    error DAFTokenNotInDeathStage(uint256 tokenId);
    error DAFTokenHasAlreadyBeenBurnt(uint256 tokenId);
    error DAFQuestionAlreadyExists(string questionId);
    error DAFQuestionTimeToVoteShouldBeBiggerThanMinimumTimeToVote(
        string questionId,
        uint256 time
    );
    error DAFQuestionMoreThanOneAnswerRequired(
        string questionId,
        uint256 numberOfAnswersProvided
    );
    error DAFAccountShouldNotHaveContributorToken(address account);
    error DAFAccountShouldNotHaveSubscriberToken(address account);
    error DAFSubscribersShouldGetQuestionsFromBackend();
    error DAFQuestionVotingTimeIsOver(
        string questionId,
        uint256 deadlineToVote
    );
    error DAFTokenReviveTimeIsOver(uint256 tokenId, uint256 deadlineToRevive);
    error DAFTokenOwnerCannotPunishItself(uint256 tokenId);
    error DAFCannotPunishTokenCreatedAfterQuestion(
        uint256 tokenId,
        uint256 tokenCreationDate,
        uint256 questionCreationDate
    );
    error DAFCannotPunishOnQuestionBeforeItsOver(
        string questionId,
        uint256 deadlineToVote
    );
    error DAFTokenScoreMustNotBeNull();
    error DAFTokenMustNotHaveVoted(uint256 tokenId);
    error DAFNotEnoughPointsToWithdraw();
    error DAFCannotWithdrawUnderStartScore();
    error DAFCoreContributorCannotUpgrade(uint256 tokenId);
    error DAFInsufficientScoreToUpgrade(uint256 tokenId);

    function getCurrentMinimumVoteNumberToShowToSubscriber(
        uint256 validTokensNumber
    ) public pure returns (uint256 voteNumber) {
        uint256 halfInt = validTokensNumber / 2;

        return halfInt + 1;
    }

    /// @notice Get a question from its id.
    /// @dev The other arguments come from the contract that invokes this library.
    /// @return result The question whose index is passed as argument.

    function getQuestion(
        QuestionStruct storage question,
        bool isValidContributor,
        bool isValidSubscriber,
        uint256 tokenId,
        mapping(string => mapping(uint256 => TokenVotingState))
            storage tokensState
    ) public view returns (GetQuestionPageItemQueryResult memory result) {
        if (bytes(question.id).length == 0) {
            revert DAFQuestionDoesNotExist(question.id);
        }
        result.invokerVotedOn =
            isValidContributor &&
            tokensState[question.id][tokenId] == TokenVotingState.Voted;

        // slither-disable-next-line timestamp
        bool isAllowedToSeeVotes = isValidContributor &&
            (question.dateOfCreation + question.timeToVote < block.timestamp || // Voting is over
                tokensState[question.id][tokenId] == TokenVotingState.Voted || // Has voted
                tokensState[question.id][tokenId] == TokenVotingState.Punished);
        // Has been punished

        if (isValidSubscriber || isAllowedToSeeVotes) {
            result.question = question;
        } else {
            result.question = QuestionStruct(
                question.baseQuestion,
                question.id,
                question.answersIds,
                new uint256[](question.answersIds.length),
                question.dateOfCreation,
                question.timeToVote,
                new uint256[](question.answersIds.length),
                question.minimumVotesForConsensus,
                question.reachedConsensus
            );
        }
    }

    /// @notice See {DAFactory-getTokensState}.
    function getTokensState(
        DAFContributorToken[] storage dafContributorTokens,
        mapping(string => mapping(uint256 => TokenVotingState))
            storage tokensState,
        string calldata questionId
    ) external view returns (TokenVotingState[] memory states) {
        states = new TokenVotingState[](dafContributorTokens.length);
        for (uint256 i = 0; i < dafContributorTokens.length; i++) {
            states[i] = tokensState[questionId][i];
        }
        return states;
    }

    function addPoints(
        DAFContributorToken storage token,
        uint256 _nbOfPoints,
        IntegerWrapper.Integer storage totalOfPoints
    ) public {
        token.score = token.score + _nbOfPoints;
        totalOfPoints.increment(_nbOfPoints);
    }

    function addPoints(DAFContributorToken storage token, uint256 _nbOfPoints)
        public
    {
        token.score = token.score + _nbOfPoints;
    }

    /// @notice See {DAFactory-burnContributorToken}.

    function burnContributorToken(
        DAFContributorToken storage targetToken,
        DAFContributorToken storage invokerToken,
        uint256 gracefulTokenPunishmentTimePeriod,
        uint256 rewardPointDeltaForDestruction,
        IntegerWrapper.Integer storage totalOfPoints,
        mapping(address => uint256) storage ownerToToken,
        MigrationState migrationState
    ) public {
        if (migrationState != MigrationState.Started) {
            if (targetToken.score > 0) {
                revert DAFTokenScoreIsNotNull(targetToken.id);
            }
            // slither-disable-next-line timestamp
            if (
                targetToken.dateOfDeath + gracefulTokenPunishmentTimePeriod >=
                block.timestamp
            ) {
                revert DAFTokenNotInDeathStage(targetToken.id);
            }
        }
        if (targetToken.owner == address(0)) {
            revert DAFTokenHasAlreadyBeenBurnt(targetToken.id);
        }
        ownerToToken[targetToken.owner] = 0;
        targetToken.owner = address(0);
        addPoints(invokerToken, rewardPointDeltaForDestruction, totalOfPoints);
    }

    /// @notice See {DAFactory-burnExpiredSubscriptionToken}.
    function burnExpiredSubscriptionToken(
        address punisherAddress,
        DAFContributorToken[] storage dafContributorTokens,
        uint256 punisherTokenId,
        uint256 subscribedTokenId,
        IntegerWrapper.Integer storage totalOfPoints,
        uint256 rewardPointDeltaForDestruction,
        DAFSubscriptionsContract dafSubscriptionsContract
    ) external {
        requireTokenToBeAlive(dafContributorTokens[punisherTokenId]);
        addPoints(
            dafContributorTokens[punisherTokenId],
            rewardPointDeltaForDestruction,
            totalOfPoints
        );
        dafSubscriptionsContract.burnToken(
            punisherAddress,
            punisherTokenId,
            subscribedTokenId,
            rewardPointDeltaForDestruction
        );
    }

    /// @notice See {DAFactory-createQuestion and DAFactory-createQuestionAsOwner}.
    function createQuestion(
        // slither-disable-next-line timestamp
        string memory baseQuestionToSave,
        string memory questionId,
        string[] calldata answersIds,
        uint256 timeToVote,
        uint256 minimumTimeToVote,
        mapping(string => QuestionStruct) storage questionsById,
        DAFContributorToken[] storage dafContributorTokens,
        string[] storage allQuestions
    ) internal {
        // slither-disable-next-line timestamp
        if (bytes(questionsById[questionId].id).length > 0) {
            revert DAFQuestionAlreadyExists(questionId);
        }
        if (timeToVote < minimumTimeToVote) {
            revert DAFQuestionTimeToVoteShouldBeBiggerThanMinimumTimeToVote(
                questionId,
                timeToVote
            );
        }
        if (answersIds.length <= 1) {
            revert DAFQuestionMoreThanOneAnswerRequired(
                questionId,
                answersIds.length
            );
        }

        uint256 numberOfValidTokens = 0;
        for (uint256 i = 0; i < dafContributorTokens.length; i++) {
            if (dafContributorTokens[i].score > 0) {
                numberOfValidTokens += 1;
            }
        }

        // solhint-disable not-rely-on-time
        questionsById[questionId] = QuestionStruct(
            baseQuestionToSave,
            questionId,
            answersIds,
            new uint256[](answersIds.length),
            block.timestamp,
            timeToVote,
            new uint256[](answersIds.length),
            getCurrentMinimumVoteNumberToShowToSubscriber(numberOfValidTokens),
            false
        );
        allQuestions.push(questionId);
    }

    /// @notice To know if an address has or not a token, of contributor or subscriber type
    /// @param _account An Address
    /// @param daFactoryContract DAFactoryContract reference
    /// @param dafSubscriptionsContract DAFSubscriptionsContract reference

    function requireAccountNotToHaveToken(
        address _account,
        DAFactoryContract daFactoryContract,
        DAFSubscriptionsContract dafSubscriptionsContract
    ) external view {
        if (daFactoryContract.balanceOf(_account) > 0) {
            revert DAFAccountShouldNotHaveContributorToken(_account);
        }
        if (dafSubscriptionsContract.balanceOf(_account) > 0) {
            revert DAFAccountShouldNotHaveSubscriberToken(_account);
        }
    }

    function getQuestionPageArgs(
        uint256 pageNumber,
        uint256 pageSize,
        uint256 numberOfQuestions
    ) public pure returns (uint256 lowIndex, uint256 highIndex) {
        highIndex = 0;
        if (numberOfQuestions > 0) {
            highIndex = numberOfQuestions;
        }

        if (pageNumber > 0) {
            if (highIndex < pageNumber * pageSize) {
                highIndex = 0;
            } else {
                highIndex = highIndex - pageNumber * pageSize;
            }
        }

        lowIndex = 0;
        // Testing (highIndex - pageSize > 0) without
        // calculating potentially negative number
        if (highIndex > pageSize) {
            lowIndex = highIndex - pageSize;
        }

        return (lowIndex, highIndex);
    }

    /// @notice See {DAFactory-getQuestionsPage}.

    function getQuestionsPage(
        address wallet,
        uint256 pageNumber,
        uint256 pageSize,
        string[] storage questionsIds,
        mapping(string => QuestionStruct) storage questionsById,
        DAFactoryContract daFactoryContract,
        DAFSubscriptionsContract dafSubscriptionsContract,
        uint256 tokenId,
        mapping(string => mapping(uint256 => TokenVotingState))
            storage tokensState
    ) external view returns (GetQuestionPageResult memory pageResult) {
        (uint256 lowIndex, uint256 highIndex) = getQuestionPageArgs(
            pageNumber,
            pageSize,
            questionsIds.length
        );

        bool isValidContributor = daFactoryContract.isNftOwnerOfValidToken(
            wallet
        );
        bool isValidSubscriber = dafSubscriptionsContract
            .isNftOwnerOfValidToken(wallet);

        if (isValidSubscriber) {
            revert DAFSubscribersShouldGetQuestionsFromBackend();
        }

        pageResult.numberOfPages =
            (questionsIds.length / pageSize) +
            (questionsIds.length % pageSize != 0 ? 1 : 0);
        pageResult.items = new GetQuestionPageItemQueryResult[](
            highIndex - lowIndex
        );

        if (highIndex == 0) {
            return pageResult;
        }

        // int / uint conversion needed here for the evaluation of i-- >= 0
        // (it does need to compute i = -1 before evaluating i >= lowIndex)
        uint256 indexToSet = 0;
        for (int256 i = int256(highIndex - 1); i >= int256(lowIndex); i--) {
            pageResult.items[indexToSet] = getQuestion(
                questionsById[questionsIds[uint256(i)]],
                isValidContributor,
                isValidSubscriber,
                tokenId,
                tokensState
            );
            indexToSet++;
        }

        return pageResult;
    }

    /// @notice See {DAFactory-vote}.

    function vote(
        uint256 tokenId,
        QuestionStruct storage question,
        DAFContributorToken[] storage dafContributorTokens,
        IntegerWrapper.Integer storage totalOfPoints,
        uint256 answerIdIndex,
        uint256 rewardPointDeltaForVoting,
        mapping(string => mapping(uint256 => TokenVotingState))
            storage tokensState
    ) public returns (bool justReachedConsensus) {
        if (bytes(question.id).length == 0) {
            revert DAFQuestionDoesNotExist(question.id);
        }
        if (isVotingTimeOverForQuestion(question)) {
            revert DAFQuestionVotingTimeIsOver(
                question.id,
                question.dateOfCreation + question.timeToVote
            );
        }
        requireTokenNotToHaveVoted(tokensState[question.id], tokenId);
        requireTokenToBeAlive(dafContributorTokens[tokenId]);

        question.votesOfEachAnswers[answerIdIndex] =
            question.votesOfEachAnswers[answerIdIndex] +
            1;
        tokensState[question.id][tokenId] = TokenVotingState.Voted;

        uint256 bestAnswer = question.bestAnswers[0];
        if (bestAnswer != answerIdIndex) {
            if (
                question.votesOfEachAnswers[bestAnswer] ==
                question.votesOfEachAnswers[answerIdIndex]
            ) {
                question.bestAnswers.push(answerIdIndex);
            } else if (
                question.votesOfEachAnswers[bestAnswer] <
                question.votesOfEachAnswers[answerIdIndex]
            ) {
                question.bestAnswers = [answerIdIndex];
            }
        } else {
            question.bestAnswers = [answerIdIndex];
        }

        uint256 maxNumberOfVotes = question.votesOfEachAnswers[
            question.bestAnswers[0]
        ];
        if (
            question.bestAnswers.length == 1 &&
            maxNumberOfVotes >= question.minimumVotesForConsensus
        ) {
            justReachedConsensus = !question.reachedConsensus;
            question.reachedConsensus = true;
        }

        addPoints(
            dafContributorTokens[tokenId],
            rewardPointDeltaForVoting,
            totalOfPoints
        );

        return justReachedConsensus;
    }

    function emitConsensusIfNeeded(
        bool justReachedConsensus,
        QuestionStruct storage question
    ) external {
        if (justReachedConsensus) {
            string memory consensusAnswerId = question.answersIds[
                question.bestAnswers[0]
            ];

            emit ConsensusReached(question.id, consensusAnswerId);
        }
    }

    /// @notice See {DAFactory-revive}.

    function revive(
        DAFContributorToken[] storage dafContributorTokens,
        uint256 tokenId,
        uint256 timeToRevive,
        uint256 startScore
    ) external {
        if (dafContributorTokens[tokenId].score > 0) {
            revert DAFTokenScoreIsNotNull(tokenId);
        }
        // solhint-disable not-rely-on-time
        // slither-disable-next-line timestamp
        if (block.timestamp >= block.timestamp + timeToRevive) {
            revert DAFTokenReviveTimeIsOver(
                tokenId,
                block.timestamp + timeToRevive
            );
        }
        dafContributorTokens[tokenId].score = startScore;
        dafContributorTokens[tokenId].role = Role.Contributor;
    }

    function isTimeOverForVoting(QuestionStruct storage question)
        external
        view
        returns (bool)
    {
        // solhint-disable not-rely-on-time
        // slither-disable-next-line timestamp
        bool timeIsOver = (question.dateOfCreation + question.timeToVote) <
            block.timestamp;

        return timeIsOver;
    }

    /// @notice See {DAFactory-punishInactiveToken}.

    function punishInactiveToken(
        DAFContributorToken storage punishedToken,
        DAFContributorToken storage ownerToken,
        QuestionStruct storage question,
        uint256 punishedTokenId,
        uint256 punishmentPointDelta,
        uint256 rewardPointDeltaForPunishment,
        uint256 startScore,
        IntegerWrapper.Integer storage totalOfPoints,
        mapping(string => mapping(uint256 => TokenVotingState))
            storage tokensState
    ) public returns (bool justReachedConsensus) {
        if (bytes(question.id).length == 0) {
            revert DAFQuestionDoesNotExist(question.id);
        }
        if (punishedToken.owner == ownerToken.owner) {
            revert DAFTokenOwnerCannotPunishItself(punishedToken.id);
        }
        requireTokenNotToHaveVoted(tokensState[question.id], punishedTokenId);
        requireTokenToBeAlive(punishedToken);
        bool tokenCreatedBeforeVoteEvent = punishedToken.dateOfCreation <
            question.dateOfCreation;
        if (!tokenCreatedBeforeVoteEvent) {
            revert DAFCannotPunishTokenCreatedAfterQuestion(
                punishedToken.id,
                punishedToken.dateOfCreation,
                question.dateOfCreation
            );
        }
        bool votingTimeIsOver = isVotingTimeOverForQuestion(question);
        // slither-disable-next-line timestamp
        if (!votingTimeIsOver) {
            revert DAFCannotPunishOnQuestionBeforeItsOver(
                question.id,
                question.dateOfCreation + question.timeToVote
            );
        }
        tokensState[question.id][punishedTokenId] = TokenVotingState.Punished;

        addPoints(ownerToken, rewardPointDeltaForPunishment);
        int256 diffToApplyToTotalPoints = int256(rewardPointDeltaForPunishment);

        // if punishedToken.score <= startScore,
        // there's no redeemable points to get on punished token
        // means nothing to remove from totalOfPoints
        if (punishedToken.score > startScore) {
            uint256 removableRedeemablePoints = punishedToken.score -
                startScore;
            if (removableRedeemablePoints < punishmentPointDelta) {
                diffToApplyToTotalPoints -= int256(removableRedeemablePoints);
            } else {
                diffToApplyToTotalPoints -= int256(punishmentPointDelta);
            }
        }

        removePointsOnlyFromToken(punishedToken, punishmentPointDelta);

        if (diffToApplyToTotalPoints < 0) {
            if (int256(totalOfPoints.current()) <= -diffToApplyToTotalPoints) {
                totalOfPoints.reset();
            } else {
                totalOfPoints.decrement(uint256(diffToApplyToTotalPoints));
            }
        } else {
            totalOfPoints.increment(uint256(diffToApplyToTotalPoints));
        }

        // Handle consensus modification on question, considering the number of voter changed
        // (punished token cannot vote anymore), we should update the necessary vote count and consensus status
        if (question.minimumVotesForConsensus >= 1) {
            question.minimumVotesForConsensus -= 1;
        }

        uint256 maxNumberOfVotes = question.votesOfEachAnswers[
            question.bestAnswers[0]
        ];
        if (
            question.bestAnswers.length == 1 &&
            maxNumberOfVotes > question.minimumVotesForConsensus
        ) {
            justReachedConsensus = !question.reachedConsensus;
            question.reachedConsensus = true;
        }

        return justReachedConsensus;
    }

    function removePoints(
        DAFContributorToken storage token,
        IntegerWrapper.Integer storage totalOfPoints,
        uint256 nbOfPoints
    ) public {
        if (token.score <= nbOfPoints) {
            // solhint-disable not-rely-on-time
            token.dateOfDeath = block.timestamp;
            if (totalOfPoints.current() <= nbOfPoints) {
                totalOfPoints.reset();
            } else {
                totalOfPoints.decrement(nbOfPoints);
            }
            token.score = 0;
            token.role = Role.Contributor;
        } else {
            token.score = token.score - nbOfPoints;
            if (totalOfPoints.current() <= nbOfPoints) {
                totalOfPoints.reset();
            } else {
                totalOfPoints.decrement(nbOfPoints);
            }
        }
    }

    function removePointsOnlyFromToken(
        DAFContributorToken storage token,
        uint256 nbOfPoints
    ) internal {
        if (token.score <= nbOfPoints) {
            // solhint-disable not-rely-on-time
            token.dateOfDeath = block.timestamp;
            token.score = 0;
            token.role = Role.Contributor;
        } else {
            token.score = token.score - nbOfPoints;
        }
    }

    function getTokenURI(
        uint256 _score,
        bool _isAlive,
        Role _role
    ) external pure returns (string memory) {
        /* solhint-disable quotes */
        string memory svg = string(
            abi.encodePacked(
                "<svg xmlns='http://www.w3.org/2000/svg' width='50px' height='50px'><path fill='",
                _isAlive
                    ? (_role == Role.Contributor ? "#fff" : "#32CD32")
                    : "#000",
                "' d='M1 1h350v300H1z'/><text x='50%' y='55%' text-anchor='middle' font-size='9' fill='",
                _isAlive ? "#000" : "#fff",
                "'>",
                Strings.toString(_score),
                " POINTS</text></svg>"
            )
        );

        string memory encodedSvg = string(
            abi.encodePacked(
                '"data:image/svg+xml;base64,',
                Base64.encode(bytes(string(abi.encodePacked(svg))))
            )
        );

        return
            string(
                abi.encodePacked(
                    "data:application/json;base64,",
                    Base64.encode(
                        bytes(
                            abi.encodePacked(
                                '{"name": "TAF ',
                                _role == Role.Contributor
                                    ? "Contributor"
                                    : "Core contributor",
                                '","description": "thealphafactory.xyz"',
                                ', "image": ',
                                encodedSvg,
                                '","attributes": [{"trait_type": "score", "value":',
                                Strings.toString(_score),
                                "}]}"
                            )
                        )
                    )
                )
            );
        /* solhint-enable quotes */
    }

    function requireTokenToBeAlive(DAFContributorToken storage token)
        public
        view
    {
        if (token.score == 0) {
            revert DAFTokenScoreMustNotBeNull();
        }
    }

    function requireTokenNotToHaveVoted(
        mapping(uint256 => TokenVotingState) storage tokensState,
        uint256 tokenId
    ) private view {
        if (tokensState[tokenId] != TokenVotingState.Pending) {
            revert DAFTokenMustNotHaveVoted(tokenId);
        }
    }

    function isVotingTimeOverForQuestion(QuestionStruct storage question)
        private
        view
        returns (bool)
    {
        // slither-disable-next-line timestamp
        return
            (question.dateOfCreation + question.timeToVote) < block.timestamp;
    }

    function beforeTransfer(
        address from,
        address to,
        uint256 tokenId,
        mapping(address => uint256) storage ownerToToken,
        DAFContributorToken[] storage dafContributorTokens
    ) public {
        ownerToToken[to] = tokenId;
        ownerToToken[from] = 0;
        // Update relevant token fields
        dafContributorTokens[ownerToToken[to]].owner = to;
    }

    /// @notice See {DAFactory-claimReward}.
    function claimReward(
        DAFContributorToken storage token,
        uint256 points,
        uint256 startScore,
        IntegerWrapper.Integer storage totalOfPoints,
        DAFactoryContract daFactoryContract
    ) external returns (uint256 amountToClaim) {
        if (token.score < points) {
            revert DAFNotEnoughPointsToWithdraw();
        }
        if (token.score - points < startScore) {
            revert DAFCannotWithdrawUnderStartScore();
        }
        amountToClaim = calculateClaimableAmount(
            points,
            totalOfPoints,
            daFactoryContract
        );

        removePoints(token, totalOfPoints, points);

        return amountToClaim;
    }

    /// @notice Calculate how many payment tokens the user is able to claim Reward
    /// @param points Points owned by the user
    /// @param totalOfPoints Total redeemable points
    /// @param daFactoryContract DAFactoryContract reference
    function calculateClaimableAmount(
        uint256 points,
        IntegerWrapper.Integer storage totalOfPoints,
        DAFactoryContract daFactoryContract
    ) internal view returns (uint256 amountToClaim) {
        amountToClaim =
            (daFactoryContract.getBalance() * points) /
            totalOfPoints.current();
    }

    /// @notice Force Upgrade the sent contributor token to a core contributor token. This is only possible to be done by the owner

    function upgrade(
        uint256 tokenId,
        DAFStorage storage dafStorage,
        bool checkScore
    ) external {
        DAFContributorToken storage token = dafStorage.dafContributorTokens[
            tokenId
        ];

        if (token.role == Role.Core) {
            revert DAFCoreContributorCannotUpgrade(tokenId);
        }
        if (checkScore && token.score < dafStorage.scoreToUpgrade) {
            revert DAFInsufficientScoreToUpgrade(tokenId);
        }
        token.role = Role.Core;
    }
}

// SPDX-License-Identifier: CC0-1.0
pragma solidity 0.8.13;

/// @title A wrapper that allows, among other things, to transmit an integer by reference to functions.
library IntegerWrapper {
    /// @notice The structure containing the integer value, initially at zero.
    struct Integer {
        uint256 _value; // default: 0
    }

    /// @notice Get the value of the wrapped integer.
    /// @param integer The integer wrapper.
    /// @return The value of the wrapped integer.
    function current(Integer storage integer) internal view returns (uint256) {
        return integer._value;
    }

    /// @notice Increment the value of the wrapped integer by the increment value.
    /// @param integer The integer wrapper.
    /// @param incrementValue The increment value.
    function increment(Integer storage integer, uint256 incrementValue)
        internal
    {
        integer._value += incrementValue;
    }

    /// @notice Decrement the value of the wrapped integer by the decrement value.
    /// @param integer The integer wrapper.
    /// @param decrementValue The decrement value.
    function decrement(Integer storage integer, uint256 decrementValue)
        internal
    {
        uint256 value = integer._value;
        require(value >= decrementValue, "Counter: decrement overflow");
        integer._value -= decrementValue;
    }

    /// @notice Reset the value the wrapped integer to zero.
    /// @param integer The integer wrapper.
    function reset(Integer storage integer) internal {
        integer._value = 0;
    }
}

// SPDX-License-Identifier: CC0-1.0
pragma solidity 0.8.13;

/// @title Interface specifying the functions of DAFactory contract used in external invocations.
interface DAFactoryContract {
    /// @dev See {IERC721-balanceOf}.
    function balanceOf(address) external view returns (uint256);

    /// @dev See {DAFactory-getBalance}.
    function getBalance() external view returns (uint256);

    /// @dev See {DAFactory-isNftOwnerOfValidToken}.
    function isNftOwnerOfValidToken(address wallet)
        external
        view
        returns (bool);
}

// SPDX-License-Identifier: CC0-1.0
pragma solidity 0.8.13;

/// @title Interface specifying the functions of DAFSubscriptions contract used in external invocations.
interface DAFSubscriptionsContract {
    /// @dev See {IERC721-balanceOf}.
    function balanceOf(address) external view returns (uint256);

    /// @dev See {DAFSubscriptions-isNftOwnerOfValidToken}.
    function isNftOwnerOfValidToken(address wallet)
        external
        view
        returns (bool);

    /// @dev See {DAFSubscriptions-isNftOwnerOfValidTokenFromCurrentOrMigratedVersion}.
    function isNftOwnerOfValidTokenFromCurrentOrMigratedVersion(address _owner)
        external
        view
        returns (bool);

    /// @dev See {DAFSubscriptions-burnToken}.
    function burnToken(
        address punisherAddress,
        uint256 punisherTokenId,
        uint256 punishedTokenId,
        uint256 rewardPointDeltaForDestruction
    ) external;
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides a set of functions to operate with Base64 strings.
 *
 * _Available since v4.5._
 */
library Base64 {
    /**
     * @dev Base64 Encoding/Decoding Table
     */
    string internal constant _TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    /**
     * @dev Converts a `bytes` to its Bytes64 `string` representation.
     */
    function encode(bytes memory data) internal pure returns (string memory) {
        /**
         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence
         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol
         */
        if (data.length == 0) return "";

        // Loads the table into memory
        string memory table = _TABLE;

        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter
        // and split into 4 numbers of 6 bits.
        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up
        // - `data.length + 2`  -> Round up
        // - `/ 3`              -> Number of 3-bytes chunks
        // - `4 *`              -> 4 characters for each chunk
        string memory result = new string(4 * ((data.length + 2) / 3));

        /// @solidity memory-safe-assembly
        assembly {
            // Prepare the lookup table (skip the first "length" byte)
            let tablePtr := add(table, 1)

            // Prepare result pointer, jump over length
            let resultPtr := add(result, 32)

            // Run over the input, 3 bytes at a time
            for {
                let dataPtr := data
                let endPtr := add(data, mload(data))
            } lt(dataPtr, endPtr) {

            } {
                // Advance 3 bytes
                dataPtr := add(dataPtr, 3)
                let input := mload(dataPtr)

                // To write each character, shift the 3 bytes (18 bits) chunk
                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)
                // and apply logical AND with 0x3F which is the number of
                // the previous character in the ASCII table prior to the Base64 Table
                // The result is then added to the table to get the character to write,
                // and finally write it in the result pointer but with a left shift
                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits

                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance

                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance

                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance

                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))
                resultPtr := add(resultPtr, 1) // Advance
            }

            // When data `bytes` is not exactly 3 bytes long
            // it is padded with `=` characters at the end
            switch mod(mload(data), 3)
            case 1 {
                mstore8(sub(resultPtr, 1), 0x3d)
                mstore8(sub(resultPtr, 2), 0x3d)
            }
            case 2 {
                mstore8(sub(resultPtr, 1), 0x3d)
            }
        }

        return result;
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

import "./math/Math.sol";

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "../IERC20.sol";
import "../extensions/draft-IERC20Permit.sol";
import "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)

pragma solidity ^0.8.0;

/**
 * @dev Standard math utilities missing in the Solidity language.
 */
library Math {
    enum Rounding {
        Down, // Toward negative infinity
        Up, // Toward infinity
        Zero // Toward zero
    }

    /**
     * @dev Returns the largest of two numbers.
     */
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a > b ? a : b;
    }

    /**
     * @dev Returns the smallest of two numbers.
     */
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }

    /**
     * @dev Returns the average of two numbers. The result is rounded towards
     * zero.
     */
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow.
        return (a & b) + (a ^ b) / 2;
    }

    /**
     * @dev Returns the ceiling of the division of two numbers.
     *
     * This differs from standard division with `/` in that it rounds up instead
     * of rounding down.
     */
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a == 0 ? 0 : (a - 1) / b + 1;
    }

    /**
     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
     * with further edits by Uniswap Labs also under MIT license.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator
    ) internal pure returns (uint256 result) {
        unchecked {
            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use
            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256
            // variables such that product = prod1 * 2^256 + prod0.
            uint256 prod0; // Least significant 256 bits of the product
            uint256 prod1; // Most significant 256 bits of the product
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }

            // Handle non-overflow cases, 256 by 256 division.
            if (prod1 == 0) {
                return prod0 / denominator;
            }

            // Make sure the result is less than 2^256. Also prevents denominator == 0.
            require(denominator > prod1);

            ///////////////////////////////////////////////
            // 512 by 256 division.
            ///////////////////////////////////////////////

            // Make division exact by subtracting the remainder from [prod1 prod0].
            uint256 remainder;
            assembly {
                // Compute remainder using mulmod.
                remainder := mulmod(x, y, denominator)

                // Subtract 256 bit number from 512 bit number.
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }

            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.
            // See https://cs.stackexchange.com/q/138556/92363.

            // Does not overflow because the denominator cannot be zero at this stage in the function.
            uint256 twos = denominator & (~denominator + 1);
            assembly {
                // Divide denominator by twos.
                denominator := div(denominator, twos)

                // Divide [prod1 prod0] by twos.
                prod0 := div(prod0, twos)

                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.
                twos := add(div(sub(0, twos), twos), 1)
            }

            // Shift in bits from prod1 into prod0.
            prod0 |= prod1 * twos;

            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such
            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for
            // four bits. That is, denominator * inv = 1 mod 2^4.
            uint256 inverse = (3 * denominator) ^ 2;

            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works
            // in modular arithmetic, doubling the correct bits in each step.
            inverse *= 2 - denominator * inverse; // inverse mod 2^8
            inverse *= 2 - denominator * inverse; // inverse mod 2^16
            inverse *= 2 - denominator * inverse; // inverse mod 2^32
            inverse *= 2 - denominator * inverse; // inverse mod 2^64
            inverse *= 2 - denominator * inverse; // inverse mod 2^128
            inverse *= 2 - denominator * inverse; // inverse mod 2^256

            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.
            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is
            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1
            // is no longer required.
            result = prod0 * inverse;
            return result;
        }
    }

    /**
     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
     */
    function mulDiv(
        uint256 x,
        uint256 y,
        uint256 denominator,
        Rounding rounding
    ) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {
            result += 1;
        }
        return result;
    }

    /**
     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
     *
     * Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
     */
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.
        //
        // We know that the "msb" (most significant bit) of our target number `a` is a power of 2 such that we have
        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.
        //
        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`
        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`
        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`
        //
        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.
        uint256 result = 1 << (log2(a) >> 1);

        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,
        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at
        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision
        // into the expected uint128 result.
        unchecked {
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            result = (result + a / result) >> 1;
            return min(result, a / result);
        }
    }

    /**
     * @notice Calculates sqrt(a), following the selected rounding direction.
     */
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 2, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 128;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 64;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 32;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 16;
            }
            if (value >> 8 > 0) {
                value >>= 8;
                result += 8;
            }
            if (value >> 4 > 0) {
                value >>= 4;
                result += 4;
            }
            if (value >> 2 > 0) {
                value >>= 2;
                result += 2;
            }
            if (value >> 1 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 10, rounded down, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= 10**64) {
                value /= 10**64;
                result += 64;
            }
            if (value >= 10**32) {
                value /= 10**32;
                result += 32;
            }
            if (value >= 10**16) {
                value /= 10**16;
                result += 16;
            }
            if (value >= 10**8) {
                value /= 10**8;
                result += 8;
            }
            if (value >= 10**4) {
                value /= 10**4;
                result += 4;
            }
            if (value >= 10**2) {
                value /= 10**2;
                result += 2;
            }
            if (value >= 10**1) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);
        }
    }

    /**
     * @dev Return the log in base 256, rounded down, of a positive value.
     * Returns 0 if given 0.
     *
     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
     */
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >> 128 > 0) {
                value >>= 128;
                result += 16;
            }
            if (value >> 64 > 0) {
                value >>= 64;
                result += 8;
            }
            if (value >> 32 > 0) {
                value >>= 32;
                result += 4;
            }
            if (value >> 16 > 0) {
                value >>= 16;
                result += 2;
            }
            if (value >> 8 > 0) {
                result += 1;
            }
        }
        return result;
    }

    /**
     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.
     * Returns 0 if given 0.
     */
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling
     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.
     *
     * _Available since v4.8._
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        if (success) {
            if (returndata.length == 0) {
                // only check isContract if the call was successful and the return data is empty
                // otherwise we already know that it was a contract
                require(isContract(target), "Address: call to non-contract");
            }
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason or using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            _revert(returndata, errorMessage);
        }
    }

    function _revert(bytes memory returndata, string memory errorMessage) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert(errorMessage);
        }
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}