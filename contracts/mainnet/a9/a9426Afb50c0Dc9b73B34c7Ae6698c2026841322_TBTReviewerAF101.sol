// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

interface IStudents {
  function students(address user) external view returns (bool);
}


contract TBTReviewerAF101 {

    uint256 public numberOfReviews;
    mapping(address => uint256) internal reviewers;
    mapping(uint256 => bytes32) internal reviews;

    IStudents internal students;

    event ReviewWritten(
        address indexed reviewer,
        uint256 indexed reviewId,
        bytes32 indexed reviewHash
    );

    error ReviewAlreadyWritten();
    error NotStudent();

    modifier onlyStudent() {
        bool isStudent = students.students(msg.sender);

        if (!isStudent)
            revert NotStudent();
        _;
    }

    modifier onlyPendingReview() {
        uint256 reviewId = this.getReviewIdByAddress(msg.sender);
        
        if (reviewId > 0)
            revert ReviewAlreadyWritten();

        _;
    }

    constructor(address studentsContractAddress) {
        students = IStudents(studentsContractAddress);
    }

    /// Store a review.
    /// @param reviewHash hash generated by the rate and description
    function writeReview(bytes32 reviewHash) 
        external 
        onlyStudent 
        onlyPendingReview
    {

        reviewers[msg.sender] = ++numberOfReviews;
        reviews[numberOfReviews] = reviewHash;
        
        emit ReviewWritten(msg.sender, numberOfReviews, reviewHash);
    }

    /// Returns the stored review for a particular review_id.
    /// @param id the review_id.
    /// @return the review
    function getReviewById(uint256 id) external view returns (bytes32) {
        return reviews[id];
    }

    /// Returns if the sender can write a review.
    /// @return a boolean.
    function canWriteReview() 
        external 
        view 
        onlyStudent 
        onlyPendingReview 
        returns (bool) 
    {
        return true;
    }

    /// Return the stored review_id for a particular student.
    /// @param reviewer the address of a student.
    /// @return the review_id.
    function getReviewIdByAddress(address reviewer) public view returns (uint256) {
        return reviewers[reviewer];
    }
}